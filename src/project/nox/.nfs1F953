cscope 11 /i3c/hpcl/rdas/workspace-linux-simics/modules/pepsi/NoX/nox 0000474372
	@app.cpp

45 
	~<°dio.h
>

46 
	~<°dlib.h
>

47 
	~<m©h.h
>

49 #ifde‡
TR_INTEG


50 
	~"å™ß˘i⁄.h
"

51 #unde‡
INVALID


54 
	~"maö.h
"

55 
	~"rouãr.h
"

56 
	~"Êô.h
"

57 
	~"Êô_move.h
"

58 
	~"rouãr_comm⁄.h
"

59 
	~"≠p.h
"

60 
	~"nic.h
"

61 
	~"mu…imedü.h
"

62 
	~"sh¨ed.h
"

65 
	$∑ªto
(
k
, 
Æpha
)

67 
dum
;

70 
dum
 = (()
	`ønd
()/()
RAND_MAX
);

71 
dum
 == 0.0);

73  (
k
 * 
	`pow
(
dum
, -1/
Æpha
));

74 
	}
}

76 #ifde‡
TR_INTEG


77 
boﬁ
 
	$≠p_to_nic_ouçut_buf_°age
(
§c
, 
de°
, 
is_«ck
, 
åid
, 
Àn
)

79 #ifde‡
TRACE_READ


80 
boﬁ
 
	$≠p_to_nic_ouçut_buf_°age
(
§c
, 
de°
, 
is_«ck
, 
Àn
)

82 
boﬁ
 
	$≠p_to_nic_ouçut_buf_°age
(
§c
, 
de°
, 
is_«ck
, 
Àn
)

88 
node
, 
pc
, 
vc
, 
pos
, 
dnode
, 
i
;

89 
öj_Êag
, 
vc_found
;

90 
sx
, 
sy
, 
dx
, 
dy
, 
vc_£t
;

91 
is_ußbÀ_vc
[
MAX_VC
];

92 
Êô_t
 *
Êô_±r
, *
Êô_±r2
;

94 
m≥g_num
[
MAX_NODES
]={0};

95 
f_num
[
MAX_NODES
]={0};

96 
Êô_num
=0;

97 
œ°_£À˘ed_vc
[
MAX_NODES
][
MAX_NIC_PC
]={0};

98 
öãrvÆ_˙t
 [
MAX_NODES
][
MAX_NIC_PC
]={0};

99 
lﬂd_ußge
 [
MAX_NODES
][
MAX_NIC_PC
]={0};

101 
node
=0;Çode<
NUM_NODES
;Çode++)

103 
hybrid_t›ﬁogy
 =
YES
 && 
node
 =
NUM_NODES
/2)

107  
£lf_thrŸéög_åaffic
 =
YES
 && (
§c
 =-1 && 
de°
 ==-1) &&

108 ((
hybrid_t›ﬁogy
 =
NO
 && 
node
 =
NUM_NODES
/2Ë|| (hybrid_t›ﬁogy =
YES
 &&Çode == NUM_NODES/4)))

115 
t›ﬁogy
 !
XBAR
 &&Å›ﬁogy !
BUS
 &&Å›ﬁogy !
BFLY
 && 
c⁄˚¡øãd
 =
NO
)

116 
§c
 !-1 && 
de°
 != -1)

117 
§c
 !
node
)

120 
t›ﬁogy
 =
BFLY
)

121 
§c
 !-1 && 
de°
 != -1)

122 
§c
/
bÊy
.
k
 !
node
)

125 
c⁄˚¡øãd
 =
YES
 && 
t›ﬁogy
 !
BFLY
)

126 
§c
 !-1 && 
de°
 != -1)

127 
§c
/
c⁄˚¡øti⁄_degªe
 !
node
)

131 
rouãr
[
node
].
hó…h_°©us
 =
TRAPPED
 ||Ñouãr[node].hó…h_°©u†=
FAIL
)

134 
nic_pc
 = 
NUM_NIC_PC
;

135 
hybrid_t›ﬁogy
 =
YES
)

136 
nic_pc
 = 
c⁄˚¡øti⁄_degªe
;

138 
pc
=0;Öc<
nic_pc
;Öc++)

146 
t›ﬁogy
 =
BUS
 && 
pc
 =
NUM_NIC_PC
-1)

149 (
§c
 !-1 && 
de°
 !-1Ë&& (
t›ﬁogy
 =
XBAR
 ||Å›ﬁogy =
BUS
Ë&& 
pc
 != src)

152 (
§c
 !-1 && 
de°
 !-1Ë&& (
t›ﬁogy
 =
BFLY
Ë&& 
pc
 !§c%
bÊy
.
k
)

155 (
§c
 !-1 && 
de°
 !-1Ë&& (
t›ﬁogy
 !
BFLY
Ë&& (
c⁄˚¡øãd
 =
YES
Ë&& 
pc
 !§c%
c⁄˚¡øti⁄_degªe
)

158 
§c
 !-1 && 
de°
 != -1)

159 
öj_Êag
 = 
VALID
;

160 
£lf_thrŸéög_åaffic
 =
YES
)

161 
öj_Êag
 = 
VALID
;

162 
ö_åaffic
 =
UNIFORM
)

163 
öj_Êag
 = ( (()
	`ønd
()/()
RAND_MAX
Ë < 
lﬂd_øã
 )? 
VALID
:
INVALID
;

166 
ö_åaffic
 =
MULTIMEDIA
 || in_åaffi¯=
SSIMILAR
)

169 --
öãrvÆ_˙t
[
node
][
pc
] > 0)

172  (()(
lﬂd_ußge
[
node
][
pc
]*
MSG_LEN
)/()(
sim_˛ock
+1)Ë>
lﬂd_øã
)

175 
ö_åaffic
 =
MULTIMEDIA
)

178 
m≥g_num
[
node
] == 0)

179 
m≥g_num
[
node
] = ()(()((
MPEG_VIDEO_NUM
-1)*
	`ønd
())/()
RAND_MAX
) + 1;

182 
öãrvÆ_˙t
[
node
][
pc
] = 
	`m≥g_gíî©e
(
m≥g_num
[node], 
f_num
[node]++);

184 
ö_åaffic
 =
SSIMILAR
)

187 
öãrvÆ_˙t
[
node
][
pc
] = ()
	`∑ªto
–(
lﬂd_øã
)/30, 1.1 );

188 
	`fÊush
(
°dout
);

191 
öj_Êag
 = 
VALID
;

192 
lﬂd_ußge
[
node
][
pc
]++;

196 
öj_Êag
 !
VALID
)

203 
de°
 == -1)

207 
∑âîn
)

209 
NR
 :

213 
t›ﬁogy
 =
BUS
 ||Å›ﬁogy =
XBAR
)

214 
dnode
 = ()–()(
NUM_LOGICAL_NODES
-1Ë* (
	`ønd
(Ë/ ()
RAND_MAX
));

215 
hybrid_t›ﬁogy
 =
YES
)

217 
NUM_NODES
/2 == 2)

218 
dnode
 = ()((()(
	`ønd
(Ë/ ()
RAND_MAX
)) > 0.5 ? 1:0);

220 
dnode
 = ()(()(
NUM_NODES
/2 - 1Ë* (
	`ønd
(Ë/ ()
RAND_MAX
));

223 
dnode
 = ()–()(
NUM_NODES
-1Ë* (
	`ønd
(Ë/ ()
RAND_MAX
));

225 
£lf_thrŸéög_åaffic
 =
YES
)

227 
t›ﬁogy
 =
BUS
 ||Å›ﬁogy =
XBAR
)

228 
dnode
 = ()–()(
NUM_LOGICAL_NODES
/2-1Ë* (
	`ønd
(Ë/ ()
RAND_MAX
)) + NUM_LOGICAL_NODES/2;

229 
hybrid_t›ﬁogy
 =
YES
)

231 
NUM_NODES
/4 == 2)

232 
dnode
 = ()((()(
	`ønd
(Ë/ ()
RAND_MAX
)Ë> 0.5 ? 1:0Ë+ 
NUM_NODES
/4;

234 
dnode
 = ()(()(
NUM_NODES
/4 - 1Ë* (
	`ønd
(Ë/ ()
RAND_MAX
)) + NUM_NODES/4;

237 
dnode
 = ()–()(
NUM_NODES
/2-1Ë* (
	`ønd
(Ë/ ()
RAND_MAX
)) + NUM_NODES/2;

240 }  
rouãr
[
dnode
].
hó…h_°©us
 =
TRAPPED
 ||Ñouãr[dnode].hó…h_°©u†=
FAIL
);

244 
TP
 :

246 
tmpx
 = 
node
 % 
NUM_COLS
; 
tmpy
 =Çode / NUM_COLS;

247 
dnode
 = 
tmpx
 * 
NUM_COLS
 + 
tmpy
;

250 
TN
 :

252 
tmpx
 = 
node
 % 
NUM_COLS
; 
tmpy
 =Çodê/ NUM_COLS; 
k
=5;

253 
tmpx
 = (tmpx + (
k
-1)/2Ë% 
NUM_COLS
;

254 
dnode
 = 
tmpy
 * 
NUM_COLS
 + 
tmpx
;

257 
BC
 :

259 
tmpx
 = 
node
 % 
NUM_COLS
; 
tmpy
 =Çodê/ NUM_COLS; 
k
=4;

260 
tmpx
 = (
k
-tmpx-1Ë% 
NUM_COLS
; 
tmpy
 = (k-tmpy-1Ë% 
NUM_ROWS
;

261 
tmpx
 < 0Ëtmpx +
NUM_COLS
;

262 
tmpy
 < 0Ëtmpy +
NUM_ROWS
;

263 
dnode
 = 
tmpy
 * 
NUM_COLS
 + 
tmpx
;

266 
NB
 :

270 
dnode
 = ()–()(3* 
	`ønd
()Ë/ ()(
RAND_MAX
));

271 
dnode
 = 
√ighb‹
[
node
][dnode];

272 } 
dnode
 =
EDGE
);

273 }
rouãr
[
dnode
].
hó…h_°©us
 =
TRAPPED
 ||Ñouãr[dnode].hó…h_°©u†=
FAIL
);

281 
dnode
 = 
de°
;

283 
t›ﬁogy
 =
BFLY
)

284 
dnode
 = 
de°
/
bÊy
.
k
;

285 
c⁄˚¡øãd
 =
YES
)

286 
dnode
 = 
de°
/
c⁄˚¡øti⁄_degªe
;

296 
t›ﬁogy
 !
TORUS
)

299 
i
=0; i<
NUM_VC
; i++)

300 
is_ußbÀ_vc
[
i
] = 
YES
;

302 
t›ﬁogy
 =
TORUS
)

305 
	`ˇlc_co‹d
(
node
, &
sx
, &
sy
);

306 
	`ˇlc_co‹d
(
dnode
, &
dx
, &
dy
);

308 
routög_Æg‹ôhm
 =
DT
)

310 
sx
 < 
dx
Ë { 
i
=0; i<
NUM_VC
; i++Ë
is_ußbÀ_vc
[i] = (ò< (NUM_VC/2))? 
YES
:
NO
; }

311 
sx
 > 
dx
Ë { 
i
=0; i<
NUM_VC
; i++Ë
is_ußbÀ_vc
[i] = (ò< (NUM_VC/2))? 
NO
:
YES
; }

314 
sy
 < 
dy
Ë { 
i
=0; i<
NUM_VC
; i++Ë
is_ußbÀ_vc
[i] = (ò< (NUM_VC/2))? 
YES
:
NO
; }

315 
sy
 > 
dy
Ë{ 
i
=0; i<
NUM_VC
; i++Ë
is_ußbÀ_vc
[i] = (ò< (NUM_VC/2))? 
NO
:
YES
; }

319 
routög_Æg‹ôhm
 =
AD
)

321 
sx
 < 
dx
Ë { 
is_ußbÀ_vc
[0] = 
YES
; is_ußbÀ_vc[1] = 
NO
; }

322 
sx
 > 
dx
Ë { 
is_ußbÀ_vc
[0] = 
NO
; is_ußbÀ_vc[1] = 
YES
; }

325 
sy
 < 
dy
Ë { 
is_ußbÀ_vc
[0] = 
YES
; is_ußbÀ_vc[1] = 
NO
; }

326 
sy
 > 
dy
Ë { 
is_ußbÀ_vc
[0] = 
NO
; is_ußbÀ_vc[1] = 
YES
; }

330 
i
=2; i<
NUM_VC
; i++Ë
is_ußbÀ_vc
[i] = 
YES
;

336 
vc_found
 = 
NO
;

337 
i
=1; i<=
NUM_VC
; i++)

340 
vc
 = (
œ°_£À˘ed_vc
[
node
][
pc
] + 
i
Ë% 
NUM_VC
;

341 
is_ußbÀ_vc
[
vc
] =
NO
 || 
is_ªady
[
node
][
pc
+(
NUM_PC
-
NUM_NIC_PC
)][vc].
noutbuf
 == NO)

345 
vc_found
 = 
YES
;

347 
œ°_£À˘ed_vc
[
node
][
pc
] = 
vc
;

355 #i‚de‡
TR_INTEG


356 #i‚de‡
TRACE_READ


360 
Àn
 > 40 ||Üen < 1)

362 
	`¥ötf
("FATAL ERR inje˘ögÖackëÅÿNoXÉx˚edög buf„∏Àngth %d\n",
Àn
);

363 #ifde‡
TR_INTEG


364 
TRANSTYPE
 *
å

	`m≠_å™ß˘i⁄
(
åid
);

365 
å
->
	`hi°
();

367 
	`exô
(1);

369 
de°_pc
 = 0;

370 
msgÀn
 = 
Àn
;

371 
hybrid_t›ﬁogy
 =
YES
)

373 
msgÀn
 = ()
	`˚û
(()
Àn
*
møtio
);

374 
globÆ_msg_Àn
 = 
Àn
;

375 
loˇl_msg_Àn
 = 
msgÀn
;

376 
msgÀn
 == 0)

378 
	`¥ötf
("fatalÉrr!! injecting msg ofÜength zero\n");

379 
	`exô
(1);

383 
§c_node
, 
de°_node
;

385 
t›ﬁogy
 =
BFLY
)

386 
de°_pc
 = ()((
NUM_NIC_PC
-1)*(
	`ønd
()/()
RAND_MAX
));

387 
hybrid_t›ﬁogy
 =
YES
)

388 
de°_pc
 = ()((
c⁄˚¡øti⁄_degªe
-1)*(
	`ønd
()/()
RAND_MAX
));

389 
hybrid_t›ﬁogy
==
NO
 && 
c⁄˚¡øãd
 =
YES
)

390 
de°_pc
 = ()((
nic_pc
-1)*(
	`ønd
()/()
RAND_MAX
));

392 
de°_pc
 = 0;

394 
§c
 !-1 && 
de°
 != -1)

396 
§c_node
 = 
§c
;

397 
de°_node
 = 
de°
;

402 
t›ﬁogy
 =
BFLY
)

404 
de°_node
 = 
dnode
*
bÊy
.
k
 + 
de°_pc
;

405 
§c_node
 = 
node
*
bÊy
.
k
 + 
pc
;

407 
c⁄˚¡øãd
 =
YES
)

409 
de°_node
 = 
dnode
*
c⁄˚¡øti⁄_degªe
 + 
de°_pc
;

410 
§c_node
 = 
node
*
c⁄˚¡øti⁄_degªe
 + 
pc
;

414 
de°_node
 = 
dnode
;

415 
§c_node
 = 
node
;

422 
vc_found
 =
NO
 && (
§c
 !-1 && 
de°
 != -1))

424 
vîbo£
 =
YES
)

425 
	`¥ötf
("Dr›pög msg %d --> %dÜí:%dÇÿv¯avaûabÀ\n",
§c_node
,
de°_node
,
Àn
);

432 
is_waôög
[
§c_node
] =
åue
 && 
£lf_thrŸéög_åaffic
 =
YES
 && 
msgÀn
 =1 && 
§c
 =-1 && 
de°
 == -1)

435 
pos
=0;Öos<
msgÀn
;Öos++)

438 
Êô_±r
 = 
	`Êô_Æloc
();

439 
Êô_±r
->
öj_tm
 = 
sim_˛ock
;

440 
Êô_±r
->
msg_öj_tm
 = 
sim_˛ock
;

441 
Êô_±r
->
vc_num
 = 
vc
;

442 
Êô_±r
->
îr‹
 = 
ERROR_NONE
;

443 
Êô_±r
->
îr‹_≥«…y
 = 0;

444 
Êô_±r
->
e2e_≥«…y
 = 0;

445 
Êô_±r
->
blk_chk_d⁄e
 = 
NO
;

446 
Êô_±r
->
pos
 =Öos;

447 
Êô_±r
->
Êô_num
 = flit_num++;

448 
Êô_±r
->
dñay_cy˛e
 = 0;

449 
Êô_±r
->
íåy_time
 = 
sim_˛ock
;

450 
Êô_±r
->
num_h›
 = 0;

451 
Êô_±r
->
Œí
 = 
msgÀn
;

452 
Êô_±r
->
msgÀn
 = 
Àn
;

453 
Êô_±r
->
msgty≥
 = 
DATA
;

454 
Êô_±r
->
is_«ck
 = is_nack;

455 
Êô_±r
->
d©a
.
öj_pc
 = 
pc
;

456 
Êô_±r
->
sh‹t_Êô
 = 
YES
;

457 #ifde‡
TR_INTEG


458 
Êô_±r
->
åid
 =Årid;

460 
num_öj_Êô
++;

463 
Àn
 == 1)

464 
Êô_±r
->
msgty≥
 = 
CONTROL
;

466 
Àn
 =1 && 
£lf_thrŸéög_åaffic
 =
YES
)

468 
§c
 =-1 && 
de°
 == -1)

469 
Êô_±r
->
msgty≥
 = 
CONTROL
;

471 
Êô_±r
->
msgty≥
 = 
DATA
;

474 
Êô_±r
->
msgty≥
 =
CONTROL
)

475 
Êô_±r
->
sh‹t_Êô
 = 
YES
;

477 
Êô_±r
->
sh‹t_Êô
 = (()(
	`ønd
(Ë/ ()
RAND_MAX
)Ë< 
sh‹t_Êô_øtio
 ? 
YES
:
NO
;

480 
pos
 == 0)

484 
Êô_±r
->
Êô_ty≥
 = 
HEAD
;

485 
Êô_±r
->
d©a
.
¢ode
 = 
node
;

486 
Êô_±r
->
d©a
.
dnode
 = dnode;

487 
msgÀn
 == 1)

488 
Êô_±r
->
Êô_ty≥
 = (
HEAD
 | 
TAIL
);

491 
t›ﬁogy
 =
TORUS
)

493 
Êô_±r
->
is_sx_Àss_th™_dx
 = (
sx
 < 
dx
)? 
YES
:
NO
;

494 
Êô_±r
->
is_sy_Àss_th™_dy
 = (
sy
 < 
dy
)? 
YES
:
NO
;

498 
Êô_±r
->
d©a
.
ejt_pc
 = 0;

500 
pos
 =
msgÀn
-1)

504 
Êô_±r
->
Êô_ty≥
 = 
TAIL
;

511 
Êô_±r
->
Êô_ty≥
 = 
MIDL
;

515 
Êô_±r
->
d©a
.
¢ode
 = 
node
;

516 
Êô_±r
->
d©a
.
dnode
 = dnode;

517 
§c
 !-1 && 
de°
 != -1)

519 
t›ﬁogy
 =
BFLY
 || 
c⁄˚¡øãd
 =
YES
)

520 
Êô_±r
->
d©a
.
de°
 = dest;

524 
t›ﬁogy
 =
BFLY
)

525 
Êô_±r
->
d©a
.
de°
 = 
dnode
*
bÊy
.
k
 + 
de°_pc
;

526 
c⁄˚¡øãd
 =
YES
)

527 
Êô_±r
->
d©a
.
de°
 = 
dnode
*
c⁄˚¡øti⁄_degªe
 + 
de°_pc
;

529 
Êô_±r
->
d©a
.
de°
 = 
dnode
;

533 
sql
 =
YES
)

534 
	`Ârötf
(
fsql
, "INSERT INTO FLIT VALUES(%d,%d,%d,%d);\n", 
Êô_±r
->
Êô_num
, 
node
, 
dnode
, 
pos
);

536 
vîbo£
 =
YES
)

538 
	`¥ötf
("Inje˘ [%d][%d][%d]-Êô:%d, dnode:%dÇode:%d de°:%d msgÀn:%dáà˛ock:%ŒdÅy≥:%s\n", 
hybrid_t›ﬁogy
 =
NO
 ? 
node
 :Çodê+ 
NUM_NODES
/2,

539 
hybrid_t›ﬁogy
 =
NO
 ? 
pc
+(
NUM_PC
-
NUM_NIC_PC
) :Öc,

540 
vc
, 
Êô_±r
->
Êô_num
, 
dnode
, 
node
, flô_±r->
d©a
.
de°
,
msgÀn
, ()
sim_˛ock
, flô_±r->
msgty≥
 =
CONTROL
 ? "C":"D"); 
	`fÊush
(
°dout
);

541 
£lf_thrŸéög_åaffic
 =
YES
)

543 
	`¥ötf
("I†waôög sètu†o‡§c(%dËNI :%s\n", 
§c_node
, 
is_waôög
[src_node] ? "YES" : "NO");

545 
hybrid_t›ﬁogy
 =
YES
)

546 
	`¥öt_mbox
(&(
nic_ouçut_buf
[
node
 + 
NUM_NODES
/2][
pc
][
vc
]));

548 
	`¥öt_mbox
(&(
nic_ouçut_buf
[
node
][
pc
][
vc
]));

553 
£lf_thrŸéög_åaffic
 =
YES
 && 
Êô_±r
->
msgty≥
 =
CONTROL
)

554 
is_waôög
[
§c_node
] = 
åue
;

557 
hybrid_t›ﬁogy
 =
YES
)

558 
	`£nd_Êô
(&(
nic_ouçut_buf
[
node
 + 
NUM_NODES
/2][
pc
][
vc
]), &
Êô_±r
);

560 
	`£nd_Êô
(&(
nic_ouçut_buf
[
node
][
pc
][
vc
]), &
Êô_±r
);

564 
sim_˛ock
 > 
w¨mup_cy˛e
)

565 
tŸÆ_a˘ivôy
[
node
]++;

568 
p_buf„r
 +
PD_BUFFER
;

573 
p_buf„r
 +
PD_BUFFER
;

575 
num_öj_msg
++;

576 
hybrid_t›ﬁogy
 =
YES
)

578 
Êô_num
 +
globÆ_msg_Àn
 - 
loˇl_msg_Àn
;

579 
num_öj_Êô
 +
globÆ_msg_Àn
 - 
loˇl_msg_Àn
;

583 
œ°_£À˘ed_vc
[
node
][
pc
] = 
vc
;

586 
§c
 !-1 || 
de°
 != -1)

587 #ifde‡
TR_INTEG


588  
åue
;

590  
åue
;

595 
öj_Êag
 = 
INVALID
;

599 #ifde‡
TR_INTEG


600  
Ál£
;

602  
Ál£
;

603 
	}
}

	@app.h

44 #i‚de‡
APP_H


45  
	#APP_H


	)
47 #ifde‡
TR_INTEG


48 
boﬁ
 
≠p_to_nic_ouçut_buf_°age
(
§c
, 
de°
, 
is_«ck
, 
åid
, 
Àn
);

50 #ifde‡
TRACE_READ


51 
boﬁ
 
≠p_to_nic_ouçut_buf_°age
(
§c
, 
de°
, 
is_«ck
, 
Àn
);

53 
boﬁ
 
≠p_to_nic_ouçut_buf_°age
(
§c
, 
de°
, 
is_«ck
, 
Àn
);

	@cache.h

12 #i‚de‡
__CACHE_H__


13  
	#__CACHE_H__


	)
16 
	~<zlib.h
>

17 
	~<ve˘‹
>

18 
	~<m≠
>

20  
	#MODIFIED
 0

	)
21  
	#EXCLUSIVE
 1

	)
22  
	#SHARED
 2

	)
23  
	#INVALID
 3

	)
24  
	#NOT_FOUND
 4

	)
25  
	#STALE_ENTRY
 5

	)
26  
	#SHARED_BY_BOTH
 6

	)
28  
	#CPUTYPE
 -1

	)
29  
	#CACHETYPE
 -2

	)
30  
	#BUSTYPE
 -3

	)
32  
	#ICACHE
 0

	)
33  
	#DCACHE
 1

	)
35  
	#MAX_SECTORS
 8

	)
38 
ˇche_°©e
[4][10];

41 
˛ass
 
	gTRANSTYPE
;

43 
TRANSTYPE
* 
m≠_å™ß˘i⁄
–
å_id
);

44 
Flo‹Log2
(
x
);

46 
˛ass
 
	cCLINE
 {

47 
	mpublic
:

48 
addªss
;

49 
	m°©e
;

50 
	mtimëouched
;

51 
	m¥i
;

52 
	md©a
[16];

53 
boﬁ
 
	mc°©us
;

54 
	mcsize
;

56 
	$CLINE
(){

57 
timëouched
 = 0;

58 
addªss
 = 0;

59 
°©e
 = 
INVALID
;

60 
¥i
 = 0;

61 
csize
 = 16;

62 
c°©us
 = 0;

63 
d©a
[0] = data[1] = data[2] = data[3] = 0x0;

64 
d©a
[4] = data[5] = data[6] = data[7] = 0x0;

65 
d©a
[8] = data[9] = data[10] = data[11] = 0x0;

66 
d©a
[12] = data[13] = data[14] = data[15] = 0x0;

70 
	$¥öt
()

72 
	`¥ötf
("ADDR %Œx STATE %†PRI %d TIME %Œd CSTATUS %d CSIZE %d\n",
addªss
,
ˇche_°©e
[
°©e
],
¥i
,
timëouched
,
c°©us
,
csize
);

73 
	`¥ötf
("DATA ");

74 
i
=0;i<16;i++)

75 
	`¥ötf
("%Œx ", 
d©a
[
i
]);

76 
	`¥ötf
("\n");

77 
	}
}

82 
˛ass
 
	cCSET
 {

83 
	mpublic
:

84 
assoc
;

85 
	mnumlöes
;

86 
	m°d
::
ve˘‹
<
CLINE
> 
˛öes
;

88 
	mn£gs
;

90 
	mcom∑˘i⁄s
;

91 
	mtŸ_dód_time
;

92 
	mœ°_com∑˘
;

94 
	$CSET
(
_assoc
, 
boﬁ
 
com¥es£d
)

95 : 
	$assoc
(
_assoc
), 
	$numlöes
(0), 
	$n£gs
(0)

97 !
com¥es£d
)

98 
i
 = 0; i < 
assoc
; ++i)

100 
˛öes
.
	`push_back
(
	`CLINE
());

102 
com∑˘i⁄s
=0;

103 
tŸ_dód_time
=0;

104 
œ°_com∑˘
=0;

106 
	$kûl
()

108 
˛öes
.
	`˛ór
();

109 
	}
}

110 
	$¥öt
()

112 
i
 = 0; i < 
˛öes
.
	`size
(); ++i)

113 
˛öes
[
i
].
	`¥öt
();

114 
	}
}

118 
	sbq_node
 {

119 
	må_id
;

120 
	m°d
::
ve˘‹
<> 
mshr
;

123 
˛ass
 
	cCACHE
 {

124 
	mpublic
:

127 
ˇchesize
;

128 
	mlöesize
;

129 
	massoc
;

130 
	mnum£˘‹s
;

131 
	mis_¢o›_fûãr
;

132 
	mnum£ts
;

133 
	m˛abñ
[16];

134 
	mÀvñ
;

135 
boﬁ
 
	mcom¥es£d
;

138 
	mnum¥evˇches
;

139 
	mnum√xtˇches
;

143 
	m£˘‹_shi·
;

144 
	m£t_shi·
;

145 
	mèg_shi·
;

146 
	m£t_mask
;

147 
	mlöe_mask
;

148 
	m£˘‹_mask
;

150 
	m°d
::
ve˘‹
<
CSET
> 
£ts
;

151 
	m°d
::
ve˘‹
<> 
queue
;

152 
	m°d
::
ve˘‹
<
bq_node
> 
blocked_queue
;

155 
	mªfs
;

156 
	mhôs
;

157 
	msh¨ed_hôs
;

158 
	mmis£s
;

159 
	m¢o›s
;

160 
	mhôm
;

161 
	mwrôebacks
;

162 
	mövÆid©e_¢o›s
;

163 
	mmis£s_≥r_c‹e
[64];

164 
	mªfs_≥r_c‹e
[64];

165 
	mmis£s_≥r_¥i
[64];

166 
	mªfs_≥r_¥i
[64];

167 
	mbq_size
;

168 
	mrq_size
;

169 
	mtŸ_bq_size
;

170 
	mtŸ_rq_size
;

171 
	mbq_size_ßm∂es
;

172 
	mrq_size_ßm∂es
;

174 
	mªads
;

175 
	mwrôes
;

177 
	msh¨ed
;

178 
	mmodifõd
;

179 
	mövÆid
;

180 
	mex˛usive
;

182 
	mÁt_wrôes
;

183 
	mmlc_wbx_Át_wrôes
;

184 
	mcom∑˘i⁄s
;

185 
	mtŸ_com∑˘i⁄_dñay
;

186 
	mœ°_com∑˘i⁄_dñay
;

192 
func_ch™ge_°©e
(
addªss
, 
n°©e
, *
vaddªss
, *
v°©e
);

193 
func_look_up
(
addªss
, 
upd©e
);

195 
look_up
(
addªss
, 
upd©e
, 
TRANSTYPE
 *
å
);

196 
lookup_¥i
(
addªss
);

197 
ch™ge_°©e
(
addªss
, 
√w°©e
, 
¥i‹ôy
, 
TRANSTYPE
 *
å
);

198 
vi˘im_lookup
(
addªss
 , * 
pos
, 
¥i‹ôy
, 
°d
::
ve˘‹
<> *
vaddr
, 
°©e
, 
TRANSTYPE
 *
å
);

199 
vi˘im_lookup_¥i
(
addªss
, *
pos
, 
¥i‹ôy
);

200 
ª∂a˚_vi˘im
(
addªss
, 
vaddªss
, 
°©e
, 
pos
, 
¥i
, 
TRANSTYPE
 *
å
);

202 
ö£π_queue
(
å_id
);

203 
ö£π_queue_a·î_hód
(
å_id
);

204 
dñëe_queue
();

205 
boﬁ
 
queue_em±y
();

206 
queue_hód
();

207 
boﬁ
 
ö£π_blocked_queue
(
å_id
);

208 
dñëe_blocked_queue
(
å_id
);

209 
dñëe_queue_å
(
å_id
);

210 
TRANSTYPE
* 
blocked_queue_lookup
(
addªss
);

211 
boﬁ
 
addªss_ö_blocked_queue
(
addªss
, 
å_id
);

212 
boﬁ
 
upd©e_d©a
(
addªss
, 
TRANSTYPE
 *
å
);

214 
boﬁ
 
queue_fuŒ
();

215 
boﬁ
 
blocked_queue_fuŒ
();

216 
ª£t_°©s
();

217 
¥öt
();

219 
CACHE
(
size
, 
lsize
, 
assoc
, 
num£˘‹s
, 
˝u
, 
˛
,

220 
ty≥
, 
boﬁ
 
com¥
);

223 
	$kûl
()

225 
i
 =0; i < 
num£ts
; i++)

226 
£ts
[
i
].
	`kûl
();

227 
£ts
.
	`˛ór
();

230 
	}
};

232 
˛ass
 
	cBTYPE
 {

233 
	mˇches_to_¢o›
;

234 
CACHE
 *
	mˇchñi°
;

235 
	m¢o›ªsu…
;

238 
˛ass
 
	cCLEVEL
 {

239 
	mpublic
:

240 
°d
::
ve˘‹
<
CACHE
> 
ˇche
;

241 
	mcsize
;

242 
	mlsize
;

243 
	massoc
;

244 
	m£˘‹s
;

246 
	$kûl
()

248 
i
 =0; i < 
ˇche
.
	`size
(); i++)

249 
ˇche
[
i
].
	`kûl
();

250 
ˇche
.
	`˛ór
();

253 
	}
};

255 
	snic_íåy_t
 {

256 
	m§c
;

257 
	md°
;

258 
	mmsg_size
;

259 
	m˛ock
;

260 
	måid
;

264 
ö£π_nic_queue
(
§c
, 
d°
, 
msg_size
, 
˛ock
, 
åid
);

265 
boﬁ


266 
nic_queue_fuŒ
(
node
);

	@declarations.h

1 #i‚de‡
DECLS_H


2  
	#DECLS_H


	)
4 
Êô_t
 *
	g‰ì_li°_hód
;

5 
Êô_t
 *
	g‰ì_li°_èû
;

8 
mbox_t
 
	glök_buf
[
MAX_NODES
][
MAX_PC
-
MAX_NIC_PC
][
MAX_VC
]={0};

9 
mbox_t
 
	glök_buf2
[
MAX_NODES
][
MAX_PC
-
MAX_NIC_PC
][
MAX_VC
]={0};

10 
	glök_öfo
[
MAX_NODES
][
MAX_PC
-
MAX_NIC_PC
]={0};

13 
FILE
 *
	gfsql
;

14 
	gsim_íd_Êag
;

15 #ifde‡
TR_INTEG


16 
	gsim_˛ock
;

18 
	gsim_°¨t_˛ock
=0;

19 
	gsim_˛ock
;

21 
	gnum_öj_msg
;

22 
	gnum_ejt_msg
;

23 
	gc⁄åﬁ_ejt_msg
;

24 
	gd©a_ejt_msg
;

25 
	gw¨mup_cy˛e
;

26 
	gnum_ejt_Êô
;

27 
	gc⁄åﬁ_ejt_Êô
;

28 
	gd©a_ejt_Êô
;

29 
	gnum_öj_Êô
;

30 
	gtŸÆ_dñay_cy˛e
;

31 
	gtŸÆ_∑ckë_dñay_cy˛e
;

32 
	gtŸÆ_œãncy
;

33 
	gtŸÆ_queueög_œãncy
;

34 
	gtŸÆ_√tw‹k_œãncy
;

35 
	gcmsg_tŸÆ_dñay_cy˛e
;

36 
	gcmsg_tŸÆ_œãncy
;

37 
	gcmsg_tŸÆ_queueög_œãncy
;

38 
	gcmsg_tŸÆ_√tw‹k_œãncy
;

39 
	gdmsg_tŸÆ_dñay_cy˛e
;

40 
	gdmsg_tŸÆ_œãncy
;

41 
	gdmsg_tŸÆ_queueög_œãncy
;

42 
	gdmsg_tŸÆ_√tw‹k_œãncy
;

43 
	gtŸÆ_num_h›
;

44 
	gtŸÆ_aged_Êô10
;

45 
	gtŸÆ_aged_Êô20
;

46 
	gtŸÆ_a˘ivôy
[
MAX_NODES
];

47 
	gtŸÆ_buf_ußge
[
MAX_NODES
];

48 
	gtŸÆ_ªå™s_buf_ußge
[
MAX_NODES
];

49 
	gnum_esˇ≥_msgs
;

50 
	gÊôs_comböe_°©
;

53 
	gªå™s_ty≥
;

54 
	g∑âîn
;

55 
	g¨ch
;

56 
	gö_åaffic
;

57 
	góæy_eje˘i⁄
;

58 
	gnum_lök_îr
;

59 
	gnum_routög_îr
;

60 
	gnum_sw¨bôî_îr
;

61 
	gnum_Áûed_lök
;

62 
	gnum_Áûed_node
;

63 
	gnum_e2e_«ck
;

64 
	gnum_e2e_ªå™s
;

65 
	groutög_Æg‹ôhm
;

66 
	gt›ﬁogy
;

67 
	gvîbo£
;

68 
	g¥obe_vîbo£
;

69 
	gsql
;

70 
	glﬂd_øã
;

71 
	glök_îr_øã
;

72 
	groutög_îr_øã
;

73 
	gsw¨bôî_îr_øã
;

76 
mbox_t
 
	gnic_öput_buf
 [
MAX_NODES
][
MAX_NIC_PC
][
MAX_VC
]={0};

77 
mbox_t
 
	gnic_ouçut_buf
[
MAX_NODES
][
MAX_NIC_PC
][
MAX_VC
]={0};

80 
	gp_buf„r
;

81 
	gp_routög
;

82 
	gp_vc_¨b
;

83 
	gp_sw_¨b
;

84 
	gp_xb¨
;

85 
	gp_lök
;

86 
	gp_îr_chk
;

87 
	gp_ªå™s
;

90 
xb¨_out_t
 
	gxb¨_out
 [
MAX_NODES
][
MAX_PC
][
MAX_VC
];

91 
rouãr_t
 
	grouãr
 [
MAX_NODES
];

92 
vc_öfo_t
 
	gvc_öfo
 [
MAX_NODES
][
MAX_PC
][
MAX_VC
];

93 
	g√ighb‹
 [
MAX_NODES
][
MAX_PC
-
MAX_NIC_PC
] = {0};

94 
	g√ighb‹_pc
 [
MAX_NODES
][
MAX_PC
-
MAX_NIC_PC
] = {0};

95 
ªady_Êag_t
 
	gis_ªady
 [
MAX_NODES
][
MAX_PC
][
MAX_VC
] = {0};

96 
has_Êô_t
 
	ghas_Êô
 [
MAX_NODES
][
MAX_PC
][
MAX_VC
] = {0};

97 
mbox_t
 
	grouãr_öput_buf
 [
MAX_NODES
][
MAX_PC
][
MAX_VC
] = {0};

98 
mbox_t
 
	gxb¨_buf
 [
MAX_NODES
][
MAX_PC
][
MAX_VC
] = {0};

99 
	g√º_chk_d⁄e
 [
MAX_NODES
] = {0};

100 
	g√º_found
 [
MAX_NODES
] = {0};

101 
	glök_ußge
 [
MAX_NODES
][
MAX_PC
-
MAX_NIC_PC
] = {0};

103 
	gNUM_ROWS
 = 4;

104 
	gNUM_COLS
 = 4;

105 
	gNUM_NODES
 = 16;

106 
	gNUM_LOGICAL_NODES
 = 16;

108 
	gnum_nic_pc
 = 1;

109 
	gnum_pc
 = 5;

110 
	gNUM_VC
 = 2;

112 
	gMSG_LEN
=4;

114 
buâîÊy_t
 
	gbÊy
;

115 
	ghybrid_t›ﬁogy
 = 
NO
;

116 
	gc⁄˚¡øãd
 = 
NO
;

117 
	gc⁄˚¡øti⁄_degªe
 = 1;

118 
	gmu…i_cy˛e_SA
 = 1;

119 
	gxb¨_ö_‰ì
[
MAX_NODES
][
MAX_PC
] = {0};

120 
	gxb¨_out_‰ì
[
MAX_NODES
][
MAX_PC
] = {0};

121 
	grouãr_öp_buf_size
 = 4;

122 
	gvc_°©e
[11][20] = {

136 
	gglobÆ_msg_Àn
 = 2*
MSG_LEN
;

137 
	gloˇl_msg_Àn
 = 
MSG_LEN
;

138 
	gmøtio
 = 0.5;

139 
	gc⁄åﬁ_msg_comböe
 = 
NO
;

140 
	gmsg_comböe_ˇndid©e_øtio
 = 0.0;

143 
	gFLIT_WIDTH
 = 64;

144 
	gPD_ROUTER
 = 0.087;

145 
	gPD_BUFFER
 = 1.28;

146 
	gpd_lök_1bô
 = 0.112489;

148 
	gpd_lök_bus_1bô
 = 0.0313;

149 
	gpd_p_1_bus
 =0.0;

150 
	gpd_pv_1_bus
 =0.0;

151 
	gpd_v_1_bus
 =0.0;

152 
	gPD_XBAR_F
 = 5.3214;

153 
	gPD_P_1_ARB
 = 0.367;

154 
	gPD_V_1_ARB
 = 0.367;

155 
	gPD_PV_1_ARB
 = 0.367;

156 
	gPD_BUS_ARB
 = 0.0;

157 
	gPL_P_1_ARB
 = 0.0;

158 
	gPL_V_1_ARB
 = 0.0;

159 
	gPL_PV_1_ARB
 = 0.0;

160 
	g∂_°©ic_íîgy
 = 0.0;

161 
	gãchnﬁogy_node
 = 50;

162 
	gBUS_WIDTH
 = 1024;

163 
	gÊôs_⁄e_h›
 =0;

164 
	gÊôs_two_h›
 =0;

165 
	gÊôs_thªe_h›
 =0;

166 
	gÊôs_thªe_∂us_h›
 =0;

168 
	glök2
 = 0;

169 
	gbÆ™˚d_edge
 = 1;

171 
	gvc_utûiz©i⁄
[
MAX_NODES
][
MAX_PC
][
MAX_VC
];

173 
	gMSG_TO_INJECT
 = 400000;

174 
	gWARMUP_MSG
 = 1000;

175 
	gMSG_TO_EJECT
 = 399000;

177 
	g£lf_thrŸéög_åaffic
 = 1;

178 
boﬁ
 
	gis_waôög
[
MAX_NODES
]={
Ál£
};

179 
	gsh‹t_Êôs_sum
=0;

180 
	gsh‹t_Êô_øtio
 = 0;

	@defines.h

1 #i‚de‡
__DEFINES_H__


2  
	#__DEFINES_H__


	)
4  
	#MAX_CORES
 64

	)
5  
	#MAX_LLC_BANKS
 64

	)
6  
	#CORES_LOG
 
	`Flo‹Log2
(
CORES
)

	)
7  
	#ADDR_SIZE
 36

	)
8  
	#MLC
 0

	)
9  
	#LLC
 1

	)
10  
	#TRUE
 1

	)
11  
	#FALSE
 0

	)
12  
	#BLOCKED
 -1

	)
13  
	#INFINITE_CYCLE
 100000

	)
14  
	#MEM
 8

	)
15  
	#MAX_TR
 1000

	)
16  
	#TRACE_BUFFER_SIZE
 10000

	)
17  
	#SOFTWARE_BKPT
 0

	)
18  
	#SC_INTEG
 0

	)
19  
	#SIMICS_INTEG
 1

	)
20  
	#SHORT_CIRCUIT
 0

	)
21  
	#CLOCK_FREQ_SCALE
 1LL

	)
24  
	#EP_STAT
 0

	)
25  
	#EP_CLUSTER_SIZE
 4

	)
26  
	#EP_NODES
 16

	)
27  
	#MAX_EP_COUNT_RANGE
 8

	)
28  
	#MAX_EP_TIME_RANGE
 500

	)
29  
	#MAX_EP_COUNT_RANGE
 8

	)
30  
	#MAX_EP_TIME_RANGE
 500

	)
31  
	#EP_STAT_INTERVAL
 1000

	)
32  
	#EP_START_REC_INT
 0

	)
33  
	#EP_END_REC_INT
 9000

	)
38  
	#MAX_SET_SEGMENTS
 (
assoc
*
löesize
)/
SET_SEG_SIZE


	)
41  
	#SET_SEG_SIZE
 8

	)
42  
	#DECOMPRESSION_LATENCY
 1

	)
43  
	#COMPRESSION_LATENCY
 2

	)
44  
	#COMPACT_DELAY
 0

	)
45  
	#FLIT_SIZE_BYTES
 (
Êô_size_byãs
)

	)
46  
	#CADDR_SIZE
 1

	)
48  #deföê
	#CLINE_SIZE
 (
COMPRESS_NOX
 ? (((
å
->
noxlöesize
*
SET_SEG_SIZE
)/
FLIT_SIZE_BYTES
) ? ((tr->noxlinesize*SET_SEG_SIZE)/FLIT_SIZE_BYTES) : 1) :\

49 (((
å
->
löesize
*
SET_SEG_SIZE
)/
FLIT_SIZE_BYTES
Ë? (—r->löesize*SET_SEG_SIZE)/FLIT_SIZE_BYTESË: 1Ë)

	)
52  
	#DECODE_BANK
(
addr
, 
˝uid
Ë((((◊ddrË<< 
èg_shi·
Ë& (
Œc_b™k_powî_2
-1)Ë% 
Œc_b™k_m≠
[(cpuid)])\

53 + 
Œc_b™k_°¨t
[(
˝uid
)])

	)
	@flit.cpp

45 
	~<°dio.h
>

46 
	~<°dlib.h
>

47 
	~"rouãr.h
"

48 
	~"maö.h
"

49 
	~"Êô.h
"

50 
	~"sh¨ed.h
"

51 
	~"rouãr_comm⁄.h
"

54 
Êô_t
 * 
	$Êô_Æloc
()

56 
Êô_t
 *
ªtvÆ
;

58 
‰ì_li°_hód
 !
NULL
)

60 
ªtvÆ
 = 
‰ì_li°_hód
;

61 
‰ì_li°_hód
 = fªe_li°_hód->
√xt_‰ì
;

65 
ªtvÆ
 = 
NULL
;

66 
	`¥ötf
("Memállocation failed\n");

67 
	`fÊush
(
°dout
);

70 
‰ì_li°_hód
 =
NULL
)

71 
‰ì_li°_èû
 = 
NULL
;

73  
ªtvÆ
;

74 
	}
}

76 
	$Êô_‰ì
(
Êô_t
 *
Êô_±r
)

78 
Êô_±r
 =
NULL
)

80 
	`Ârötf
(
°dîr
, "Êô_‰ì: bad flô±∏%p\n", 
Êô_±r
);

81 
	`ab‹t
();

85 
Êô_±r
->
√xt_‰ì
 = 
NULL
;

87 
‰ì_li°_èû
 !
NULL
)

89 
‰ì_li°_èû
->
√xt_‰ì
 = 
Êô_±r
;

90 
‰ì_li°_èû
 = 
Êô_±r
;

93 
‰ì_li°_hód
 = 
‰ì_li°_èû
 = 
Êô_±r
;

97 
	}
}

99 
	$öô_‰ì_li°
()

101 
Êô_t
 *
Êô_°‹e
;

102 
i
;

105 
Êô_°‹e
 = (
Êô_t
 *)
	`ˇŒoc
(
FLIT_POOL_SZ
, (flit_t));

107 
Êô_°‹e
 =
NULL
)

109 
	`≥º‹
("init_free_list");

110 
	`exô
(1);

114 
‰ì_li°_hód
 = 
Êô_°‹e
;

115 
i
=0; i<
FLIT_POOL_SZ
; i++)

116 
Êô_°‹e
[
i
].
√xt_‰ì
 = (flit_store + i + 1);

118 
Êô_°‹e
[
FLIT_POOL_SZ
 - 1].
√xt_‰ì
 = 
NULL
;

119 
‰ì_li°_èû
 = 
Êô_°‹e
 + 
FLIT_POOL_SZ
 - 1;

123 
	}
}

125 
	$make_body_Êô
(
Êô_t
 *
Êô_±r
, flô_à*
§c_±r
)

128 
Êô_±r
->
öj_tm
 = 
§c_±r
->inj_tm;

129 
Êô_±r
->
msg_öj_tm
 = 
§c_±r
->msg_inj_tm;

130 
Êô_±r
->
vc_num
 = 
§c_±r
->vc_num;

131 
Êô_±r
->
îr‹
 = 
§c_±r
->error;

132 
Êô_±r
->
îr‹_≥«…y
 = 
§c_±r
->error_penalty;

133 
Êô_±r
->
e2e_≥«…y
 = 
§c_±r
->e2e_penalty;

134 
Êô_±r
->
blk_chk_d⁄e
 = 
§c_±r
->blk_chk_done;

135 
Êô_±r
->
pos
 = 
§c_±r
->pos+1;

136 
Êô_±r
->
Êô_num
 = 
§c_±r
->flit_num+1;

137 
Êô_±r
->
dñay_cy˛e
 = 
§c_±r
->delay_cycle;

138 
Êô_±r
->
íåy_time
 = 
§c_±r
->entry_time;

139 
Êô_±r
->
num_h›
 = 
§c_±r
->num_hop;

140 
Êô_±r
->
msgÀn
 = 
§c_±r
->msglen;

141 
Êô_±r
->
Œí
 = 
§c_±r
->llen;

142 
Êô_±r
->
msgty≥
 = 
§c_±r
->msgtype;

143 
Êô_±r
->
is_«ck
 = 
§c_±r
->is_nack;

144 
Êô_±r
->
d©a
.
öj_pc
 = 
§c_±r
->data.inj_pc;

145 #ifde‡
TR_INTEG


146 
Êô_±r
->
åid
 = 
§c_±r
->trid;

148 
Êô_±r
->
Êô_ty≥
 = 
MIDL
;

149 
Êô_±r
->
d©a
.
¢ode
 = 
§c_±r
->data.snode;

150 
Êô_±r
->
d©a
.
dnode
 = 
§c_±r
->data.dnode;

151 
Êô_±r
->
msgty≥
 = 
§c_±r
->msgtype;

152 
Êô_±r
->
is_sx_Àss_th™_dx
 = 
§c_±r
->is_sx_less_than_dx;

153 
Êô_±r
->
is_sy_Àss_th™_dy
 = 
§c_±r
->is_sy_less_than_dy;

154 
Êô_±r
->
d©a
.
ejt_pc
 = 
§c_±r
->data.ejt_pc;

155 
Êô_±r
->
sh‹t_Êô
 = (()(
	`ønd
(Ë/ ()
RAND_MAX
)Ë> 0.5 ? 
YES
:
NO
;

156 
	}
}

	@flit.h

44 #i‚de‡
FLIT_H


45  
	#FLIT_H


	)
47  
	#FLIT_POOL_SZ
 7000000L

	)
49  
	#HEAD
 0x1

	)
50  
	#MIDL
 0x2

	)
51  
	#TAIL
 0x4

	)
54  
	#HEAD_FLIT
 (
Êô_±r
->
Êô_ty≥
 & (()
HEAD
))

	)
55  
	#TAIL_FLIT
 (
Êô_±r
->
Êô_ty≥
 & (()
TAIL
))

	)
56  
	#MIDL_FLIT
 (
Êô_±r
->
Êô_ty≥
 & (()
MIDL
))

	)
58  
	#IS_HEAD_FLIT
(
±r
Ë(’å)->
Êô_ty≥
 & (()
HEAD
))

	)
59  
	#IS_TAIL_FLIT
(
±r
Ë(’å)->
Êô_ty≥
 & (()
TAIL
))

	)
60  
	#IS_MIDL_FLIT
(
±r
Ë(’å)->
Êô_ty≥
 & (()
MIDL
))

	)
72 
	e
{ 
	mCONTROL
 , 
	mDATA
 } 
	tmsg_ty≥_t
;

75 
	s
{

76 
	m¢ode
;

77 
	mdnode
;

78 
	mejt_pc
;

79 
	möj_pc
;

80 
	mde°
;

81 } 
	tÊô_d©a_t
;

83 
	sÊô_°ru˘
{

85 
	mÊô_ty≥
;

86 
Êô_d©a_t
 
	md©a
;

87 #ifde‡
TR_INTEG


88 
	möj_tm
;

89 
	mmsg_öj_tm
;

91 
	möj_tm
;

92 
	mmsg_öj_tm
;

94 
	mvc_num
;

95 
Êô_°ru˘
 *
	m√xt_‰ì
;

96 
	mÊô_num
;

97 
	míåy_time
;

98 
	mdñay_cy˛e
;

99 
	mnum_h›
;

100 
	mîr_chk_˙t
;

101 
	mîr‹
;

102 
	mîr‹_≥«…y
;

103 
	me2e_≥«…y
;

104 
	mpos
;

106 
	mblk_chk_d⁄e
 : 1;

107 
	mis_«ck
 : 1;

108 
	mis_sx_Àss_th™_dx
 : 1;

109 
	mis_sy_Àss_th™_dy
 : 1;

111 
	mmsgÀn
 ;

112 
	mŒí
 ;

113 
msg_ty≥_t
 
	mmsgty≥
;

114 #ifde‡
TR_INTEG


115 
	måid
;

117 
	msh‹t_Êô
;

118 } 
	tÊô_t
;

120 
Êô_t
* 
Êô_Æloc
();

121 
Êô_‰ì
(
Êô_t
 *
Êô_±r
);

122 
öô_‰ì_li°
();

123 
make_body_Êô
(
Êô_t
 *
Êô_±r
, flô_à*
§c_±r
);

	@flit_move.cpp

45 
	~<°dio.h
>

46 
	~<°dlib.h
>

47 
	~"rouãr.h
"

48 
	~"Êô_move.h
"

49 
	~"sh¨ed.h
"

56 
	$£nd_Êô
(
mbox_t
 *
de°
, 
Êô_t
 **
Êô_±r
)

58 
mbox_ôem_t
 *
√w_ôem
;

60 
Êô_±r
 =
NULL
Ë{ 
	`Ârötf
(
°dîr
,"NULL flô i†£¡.\n"); 
	`exô
(1); }

63 
√w_ôem
 = (
mbox_ôem_t
 *)
	`ˇŒoc
(1,(mbox_item_t));

64 
√w_ôem
 =
NULL
Ë{ 
	`Ârötf
(
°dîr
,"C™nŸáŒoˇã mem‹y f‹ mbox.\n"); 
	`exô
(1); }

65 
√w_ôem
->
±r
 = *
Êô_±r
;

66 
√w_ôem
->
√xt
 = 
NULL
;

69 
de°
->
num_diff
 += 1;

71 
de°
->
√xt
 =
NULL
)

73 
de°
->
√xt
 = 
√w_ôem
;

76 
de°
->
èû
->
√xt
 = 
√w_ôem
;

79 
de°
->
èû
 = 
√w_ôem
;

81 *
Êô_±r
 = 
NULL
;

82 
	}
}

85 
	$ªad_Êô
(
mbox_t
 *
§c
, 
Êô_t
 **
Êô_±r
)

87 *
Êô_±r
 = 
§c
->
√xt
->
±r
;

88 
	}
}

91 
	$ªcv_Êô
(
mbox_t
 *
§c
, 
Êô_t
 **
Êô_±r
)

93 
mbox_ôem_t
 *
tmp
;

95 *
Êô_±r
 = 
§c
->
√xt
->
±r
;

96 
tmp
 = 
§c
->
√xt
;

98 
§c
->
√xt
 = 
tmp
->next;

100 
§c
->
√xt
 =
NULL
)

101 
§c
->
èû
 = 
NULL
;

103 
§c
->
num_diff
 -= 1;

104 
	`‰ì
(
tmp
);

105 
	}
}

107 
	$¥öt_mbox
–
mbox_t
 *
mbox
)

110 
mbox_ôem_t
 *
tmp
;

111 
Êô_t
 *
Êô_±r
;

112 
tmp
 = 
mbox
->
√xt
;

113 
tmp
 !
NULL
)

115 
Êô_±r
 = 
tmp
->
±r
;

116 
	`¥ötf
("Êô:%d(%s)(T:%cË-->", 
Êô_±r
->
Êô_num
,

117 (
HEAD_FLIT
)?"HEAD":(
TAIL_FLIT
)?"TAIL":"MIDDLE",
Êô_±r
->
msgty≥
 =
CONTROL
 ? 'C':'D');

118 
	`fÊush
(
°dout
);

119 
tmp
 =Åmp->
√xt
;

120 
tmp
 =
NULL
)

121 
	`¥ötf
("Last wasÅail\n");

124 
	}
}

126 
	$msg_˙t
(
mbox_t
 *
mbox
)

128  
mbox
->
num_msg
;

129 
	}
}

131 
	$upd©e_˙t
(
mbox_t
 *
mbox
)

133 
mbox
->
num_msg
 +mbox->
num_diff
;

134 
mbox
->
num_diff
=0;

135 
	}
}

	@flit_move.h

44 #i‚de‡
FLIT_MOVE_H


45  
	#FLIT_MOVE_H


	)
47 
	~"Êô.h
"

49 
	smaû_box_ôem


51 
maû_box_ôem
 *
	m√xt
;

52 
Êô_t
 *
	m±r
;

53 } 
	tmbox_ôem_t
;

58 
	smaû_box


60 
maû_box_ôem
 *
	m√xt
;

61 
maû_box_ôem
 *
	mèû
;

62 
	mnum_msg
;

63 
	mnum_diff
;

64 } 
	tmbox_t
;

66 
£nd_Êô
(
mbox_t
 *
de°
, 
Êô_t
 **
Êô_±r
);

67 
ªcv_Êô
(
mbox_t
 *
§c
, 
Êô_t
 **
Êô_±r
);

68 
ªad_Êô
(
mbox_t
 *
§c
, 
Êô_t
 **
Êô_±r
);

69 
msg_˙t
(
mbox_t
 *
mbox
);

70 
upd©e_˙t
(
mbox_t
 *
mbox
);

71 
¥öt_mbox
(
mbox_t
 *
mbox
);

	@globals.h

1 #i‚de‡
__GLOBALS_H__


2  
	#__GLOBALS_H__


	)
4 
	~"ˇche.h
"

5 
	~"sim_ígöe.h
"

7 #i‡
SIMICS_INTEG


8 
œ°_po°ed_evít_cy˛e
;

12 
DEBUG
;

13 
INTERACTIVE
;

14 
STAT
;

15 
PRINT
;

16 
RECORD
;

17 
RECORD_NOC
;

18 
CACHE_QOS
;

19 
¥i_occ
[64];

20 
¥i_occ_limô
[64];

21 
¥i‹ôy_Àvñs
;

22 
¥i‹ôy_occ_limô
[64];

23 
Œc_sh¨ed
;

24 
thªad_≥r_¥oc
;

25 
num˝us
;

26 
num_Œc_b™ks
;

27 
Œc_b™k_m≠
[
MAX_CORES
];

28 
Œc_b™k_powî_2
;

29 
Œc_b™k_°¨t
[
MAX_CORES
];

30 
num˛evñs
;

31 
c‹e_øw_˝i
;

32 
˝us_≥r_node
;

34 
c‹e_å™s„r_time
;

35 
mlc_lookup_time
;

36 
h›_time
;

37 
Œc_å™s„r_time
;

38 
Œc_lookup_time
;

39 
mem‹y_ac˚ss_time
;

40 
mem_å™s„r_time
;

41 
Œc_vi˘im_lookup_time
;

42 
mlc_vi˘im_lookup_time
;

43 
å™ß˘i⁄_cou¡
;

44 
å_commôed
 ;

45 
thªads_≥r_¥oc
;

47 
ˇche_bq_size
[3] ;

48 
ˇche_rq_size
[3] ;

49 
nic_queue_size
;

51 
ouçut_fûe_«me
[100];

52 
ouçut_fûe_deföed
;

54 
°d
::
ve˘‹
<°d::
°rög
> 
åa˚_fûes
;

55 
°d
::
ve˘‹
<
CLEVEL
> 
˛evñ
;

56 
°d
::
ve˘‹
<
TRANSTYPE
> 
å_poﬁ
;

57 
°d
::
ve˘‹
<
nic_íåy_t
> 
nic_queue
[80];

58 
CACHE
 *
MEMORY
;

60 
globÆ_˛ock
;

61 
sim_°¨t_˛ock
;

62 
numªfs_f‹_ª∂
;

63 
gzFûe
 
mu…i_åa˚_Â
;

64 
gzFûe
 
out_Â
;

65 
gzFûe
 
ªc_noc_Â
;

67 
buf„r_t
 
buf„r
[
TRACE_BUFFER_SIZE
];

68 
íd
;

69 
buf„r_‰⁄t
, 
buf„r_ª¨
;

70 
commô_ödex
;

72 
èg_shi·
;

75 #i‡
EP_STAT


76 
EP_RECORD_NOC
;

77 
msgs_cou¡
[
EP_NODES
];

78 
cum_¨rivÆ_time
[
EP_NODES
];

79 
§c_d°_cou¡
[
EP_NODES
][EP_NODES];

80 
¨rivÆ_time
[
EP_NODES
];

81 
FILE
 *
¨riv_øã_Â
;

82 
FILE
 *
åaffic_Â
;

83 
msgs_ö_öãrvÆ
;

87 
˝u_√tw‹k_œyout
[64];

88 
ˇche_√tw‹k_œyout
[64];

89 
cmp_√tw‹k_nodes
;

90 
tŸÆ_i˙_œãncy
;

91 
boﬁ
 
i˙_evít_Êag
;

92 
tŸÆ_i˙_msgs
;

93 
mlc_busy_time
;

94 
Œc_busy_time
;

95 
ªads
;

96 
wrôes
;

97 
mlc_queue_waô
;

98 
mem_queue_waô
[64];

99 
i˙q_waô
;

100 
Œc_queue_waô
;

101 
¢o›_waô
;

102 
mlc_hôs
, 
mlc_mis£s
;

103 
c⁄Êi˘_¥i_mis£s
;

104 
tŸÆ_ª•_time
;

105 
Œc_hôs
, 
Œc_mis£s
;

106 
mis£s_≥r_c‹e
[64];

107 
mlc_occ
, 
Œc_occ
;

109 
ªfs
[64];

110 
commô_ªfs
[64];

111 
boﬁ
 
thªad_d⁄e
[64];

112 
boﬁ
 
íd_sim
;

113 
csim_öj_msgs
;

114 
Êô_size_byãs
;

115 
tŸÆ_csim_nic_qdñay
;

116 
com¥ess_cou¡
;

117 
com¥ess_löesize
;

118 
∑âîn_zîo
;

119 
∑âîn_4b_£
;

120 
∑âîn_8b_£
;

121 
∑âîn_16b_£
;

122 
∑âîn_16b_∑dded
;

123 
∑âîn_16b_£_hÆf
;

124 
∑âîn_8b_ªp
;

125 
∑âîn_32b
;

127 
Œc_löesize
;

128 
COMPRESS_NOX
;

129 
COMPRESS_CSIM
;

131 
addr_msgs
;

132 
d©a_msgs
;

133 
wb_msgs
;

134 
¢o›_msgs
;

136 
FILE
 *
Â_dbg
;

	@link.cpp

45 
	~<°dio.h
>

46 
	~<°dlib.h
>

47 
	~"maö.h
"

48 
	~"rouãr.h
"

49 
	~"nic.h
"

50 
	~"sh¨ed.h
"

53 
	$lök_°age
()

56 
node
, 
pc
, 
vc
, 
√xt_node
, 
√xt_pc
;

57 
Êô_t
 *
Êô_±r
;

58 
buf„r_tmp
 = 
PD_BUFFER
;

60 
node
=0;Çode<
NUM_NODES
;Çode++)

62 
hybrid_t›ﬁogy
 =
YES
 && 
node
 =
NUM_NODES
/2)

63 
PD_BUFFER
 = 0.0;

65 
pc
=0;Öc<
NUM_PC
;Öc++)

67 
hybrid_t›ﬁogy
 =
YES
 && 
node
 >
NUM_NODES
/2)

69 
pc
 < 
NUM_PC
 - 1)

74 
pc
 >
NUM_PC
 - 
NUM_NIC_PC
)

79 
√xt_node
 = 
√ighb‹
[
node
][
pc
];

81 
√xt_pc
 = 
√ighb‹_pc
[
node
][
pc
];

82 
vc
=0; vc<
NUM_VC
; vc++)

84  (
	`msg_˙t
(&(
lök_buf
[
node
][
pc
][
vc
]))) >= 1 )

86 
	`ªcv_Êô
(&(
lök_buf
[
node
][
pc
][
vc
]), &
Êô_±r
);

87 
lök_öfo
[
node
][
pc
] == 1)

89 
vîbo£
 =
YES
)

91 
	`¥ötf
("Link stage 1 [%d][%d][%d]-flit:%d(%s) \n",

92 
node
, 
pc
, 
vc
, 
Êô_±r
->
Êô_num
, (
HEAD_FLIT
)?

93 "HEAD":(
TAIL_FLIT
)?"TAIL":"MIDDLE");

94 
	`fÊush
(
°dout
);

97 
	`£nd_Êô
(&(
lök_buf2
[
node
][
pc
][
vc
]), &
Êô_±r
);

101 
vîbo£
 =
YES
)

103 
	`¥ötf
("[%d][%d][%d]Ñöbu‡:%d vc_°©:%s\n",
√xt_node
,
√xt_pc
,
vc
,
	`msg_˙t
(&(
rouãr_öput_buf
[next_node][next_pc][vc])),

104 
vc_°©e
[
vc_öfo
[
√xt_node
][
√xt_pc
][
vc
].
vc_°©
]);

105 
	`¥öt_mbox
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
vc
]));

108 
sql
 =
YES
)

109 
	`Ârötf
(
fsql
, "INSERT INTO FLOW VALUES(0, %d,%d,%d,%d,%d,%d);\n",

110 
Êô_±r
->
Êô_num
, 
node
, 
pc
, 
vc
, 4, 
sim_˛ock
);

111 
vîbo£
 =
YES
)

113 
	`¥ötf
("Link [%d][%d][%d]-flit:%d(%s)ÅoÑinbuf[%d][%d][%d]\n",

114 
node
, 
pc
, 
vc
, 
Êô_±r
->
Êô_num
, (
HEAD_FLIT
)?

115 "HEAD":(
TAIL_FLIT
)?"TAIL":"MIDDLE",

116 
√xt_node
, 
√xt_pc
, 
vc
);

117 
	`fÊush
(
°dout
);

123 
hybrid_t›ﬁogy
 =
YES
)

125 
node
 < 
NUM_NODES
/2)

126 
p_lök
 +
PD_LINK
;

129 
p_lök
 +
PD_LINK
;

132 
Êô_±r
->
íåy_time
 = 
sim_˛ock
;

134 
vîbo£
 =
YES
)

135 
	`¥ötf
("SëtögÉ¡ryÅimê[%d][%d][%d]-Êô:%d(%sË: %Œd\n",
node
, 
pc
, 
vc
,

136 
Êô_±r
->
Êô_num
, (
HEAD_FLIT
)? "HEAD":

137 (
TAIL_FLIT
)? "TAIL":"MIDDLE", ()
sim_˛ock
);

141 
Êô_±r
->
is_«ck
 =
NO
)

143 (()
	`ønd
()/()
RAND_MAX
 < 
lök_îr_øã
)? 1:0 )

145 
Êô_±r
->
îr‹
 |
ERROR_LINK
;

146 
num_lök_îr
++;

152 
p_buf„r
 +
PD_BUFCTR
 + 
PD_BUFFER
;

156 
lök_îr_øã
 + 
routög_îr_øã
 + 
sw¨bôî_îr_øã
 > 0)

157 
p_buf„r
 +
PD_BUFCTR
 + 
PD_BUFFER
;

163  (
óæy_eje˘i⁄
 =
YES
Ë&& (
Êô_±r
->
d©a
.
dnode
 =
√xt_node
))

168 
lök_îr_øã
 + 
routög_îr_øã
 + 
sw¨bôî_îr_øã
 > 0)

169 
p_buf„r
 -
PD_BUFCTR
 + 
PD_BUFFER
;

171 
	`£nd_Êô
(&(
nic_öput_buf
[
√xt_node
][0][
vc
]), &
Êô_±r
);

176 
loˇl_msg_Àn
 = 
Êô_±r
->
Œí
;

177 
globÆ_msg_Àn
 = 
Êô_±r
->
msgÀn
;

178  
hybrid_t›ﬁogy
 =
YES
 && 
node
 >
NUM_NODES
/2 && 
√xt_pc
 =
num_pc
 - 1

179 && (
TAIL_FLIT
Ë&& 
Êô_±r
->
msgty≥
 !
CONTROL
)

181 
is_ªady
[
√xt_node
][
√xt_pc
][
vc
].
röbuf
 <
globÆ_msg_Àn
 - 
loˇl_msg_Àn
 - 1)

185 
	`¥ötf
("Split_RT_BNA Link 1 --> [%d][%d][%d]-flit:%d(%s)ÅoÑinbuf[%d][%d][%d] %d\n",

186 
node
, 
pc
, 
vc
, 
Êô_±r
->
Êô_num
, (
HEAD_FLIT
)?

187 "HEAD":(
TAIL_FLIT
)?"TAIL":"MIDDLE",

188 
√xt_node
, 
√xt_pc
, 
vc
, 
is_ªady
[√xt_node][√xt_pc][vc].
röbuf
);

189 
	`¥öt_mbox
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
vc
]));

191 
	`£nd_Êô
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
vc
]), &
Êô_±r
);

192 
	`exô
(1);

196 
Êô_t
 *
body_Êô_±r
, *
tmp
;

197 
HEAD_FLIT
)

198 
Êô_±r
->
Êô_ty≥
 = 
HEAD
;

200 
Êô_±r
->
Êô_ty≥
 = 
MIDL
;

201 
tmp
 = 
Êô_±r
;

202 
	`£nd_Êô
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
vc
]), &
Êô_±r
);

203 
pos
 = 
loˇl_msg_Àn
;Öo†<
globÆ_msg_Àn
;Öos++)

205 
body_Êô_±r
 = 
	`Êô_Æloc
();

206 
	`make_body_Êô
(
body_Êô_±r
,
tmp
);

207 
pos
 =
globÆ_msg_Àn
 - 1)

208 
body_Êô_±r
->
Êô_ty≥
 = 
TAIL
;

209 
tmp
 = 
body_Êô_±r
;

210 
vîbo£
 =
YES
)

211 { 
	`¥ötf
("Inje˘Üoˇ»tÿglobÆ [%d][%d][%d]-Êô:%d, dnode:%d de°:%d\n", 
√xt_node
, 
√xt_pc
,

212 
vc
, 
body_Êô_±r
->
Êô_num
, body_Êô_±r->
d©a
.
dnode
, body_Êô_±r->d©a.
de°
); 
	`fÊush
(
°dout
);}

214 
	`£nd_Êô
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
vc
]), &
body_Êô_±r
);

216 
vîbo£
 =
YES
)

217 
	`¥öt_mbox
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
vc
]));

220 
hybrid_t›ﬁogy
 =
YES
 && 
node
 < 
NUM_NODES
/2 && 
pc
 =
NUM_PC
 - 1)

222 
loˇl_msg_Àn
 <= 1)

224 
HEAD_FLIT
)

226 
Êô_±r
->
Êô_ty≥
 = (
HEAD
 | 
TAIL
);

227 
	`£nd_Êô
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
vc
]), &
Êô_±r
);

229 
MIDL_FLIT
 || 
TAIL_FLIT
)

231 
vîbo£
 =
YES
)

232 { 
	`¥ötf
("Squashög globÆÅÿloˇ»[%d][%d][%d]-Êô:%d(%s), dnode:%d de°:%d\n", 
√xt_node
, 
√xt_pc
,

233 
vc
, 
Êô_±r
->
Êô_num
,"MT", flô_±r->
d©a
.
dnode
, flô_±r->d©a.
de°
); 
	`fÊush
(
°dout
);}

234 
	`Êô_‰ì
(
Êô_±r
);

240 
HEAD_FLIT
)

241 
	`£nd_Êô
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
vc
]), &
Êô_±r
);

242 
TAIL_FLIT
)

244 
Êô_±r
->
pos
 = 
loˇl_msg_Àn
 - 1;

245 
	`£nd_Êô
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
vc
]), &
Êô_±r
);

247 
MIDL_FLIT
)

249 
Êô_±r
->
pos
 < 
loˇl_msg_Àn
 - 1)

250 
	`£nd_Êô
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
vc
]), &
Êô_±r
);

253 
vîbo£
 =
YES
)

254 { 
	`¥ötf
("Squashög globÆÅÿloˇ»[%d][%d][%d]-Êô:%d(%s), dnode:%d de°:%d\n", 
√xt_node
, 
√xt_pc
,

255 
vc
, 
Êô_±r
->
Êô_num
,"MIDL", flô_±r->
d©a
.
dnode
, flô_±r->d©a.
de°
); 
	`fÊush
(
°dout
);}

256 
	`Êô_‰ì
(
Êô_±r
);

262 
	`£nd_Êô
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
vc
]), &
Êô_±r
);

266 
sim_˛ock
 > 
w¨mup_cy˛e
)

267 
tŸÆ_a˘ivôy
[
node
]++;

273 
PD_BUFFER
 = 
buf„r_tmp
;

274 
	}
}

276 
	$lök_°age2
()

279 
node
, 
pc
, 
vc
, 
√xt_node
, 
√xt_pc
;

280 
Êô_t
 *
Êô_±r
;

281 
buf„r_tmp
 = 
PD_BUFFER
;

283 
node
=0;Çode<
NUM_NODES
;Çode++)

285 
hybrid_t›ﬁogy
 =
YES
 && 
node
 =
NUM_NODES
/2)

286 
PD_BUFFER
 = 0.0;

288 
pc
=0;Öc<
NUM_PC
;Öc++)

290 
hybrid_t›ﬁogy
 =
YES
 && 
node
 >
NUM_NODES
/2)

292 
pc
 < 
NUM_PC
 - 1)

297 
pc
 >
NUM_PC
 - 
NUM_NIC_PC
)

302 
√xt_node
 = 
√ighb‹
[
node
][
pc
];

304 
√xt_pc
 = 
√ighb‹_pc
[
node
][
pc
];

305 
vc
=0; vc<
NUM_VC
; vc++)

307  (
	`msg_˙t
(&(
lök_buf2
[
node
][
pc
][
vc
]))) >= 1 )

309 
	`ªcv_Êô
(&(
lök_buf2
[
node
][
pc
][
vc
]), &
Êô_±r
);

311 
vîbo£
 =
YES
)

313 
	`¥ötf
("[%d][%d][%d]Ñöbu‡:%d vc_°©:%s\n",
√xt_node
,
√xt_pc
,
vc
,
	`msg_˙t
(&(
rouãr_öput_buf
[next_node][next_pc][vc])),

314 
vc_°©e
[
vc_öfo
[
√xt_node
][
√xt_pc
][
vc
].
vc_°©
]);

315 
	`¥öt_mbox
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
vc
]));

318 
sql
 =
YES
)

319 
	`Ârötf
(
fsql
, "INSERT INTO FLOW VALUES(0, %d,%d,%d,%d,%d,%d);\n",

320 
Êô_±r
->
Êô_num
, 
node
, 
pc
, 
vc
, 4, 
sim_˛ock
);

321 
vîbo£
 =
YES
)

323 
	`¥ötf
("Link [%d][%d][%d]-flit:%d(%s)ÅoÑinbuf[%d][%d][%d]\n",

324 
node
, 
pc
, 
vc
, 
Êô_±r
->
Êô_num
, (
HEAD_FLIT
)?

325 "HEAD":(
TAIL_FLIT
)?"TAIL":"MIDDLE",

326 
√xt_node
, 
√xt_pc
, 
vc
);

327 
	`fÊush
(
°dout
);

332 
hybrid_t›ﬁogy
 =
YES
 && 
node
 >
NUM_NODES
/2)

333 
p_lök
 +
PD_BUS_LINK
;

335 
p_lök
 +
PD_LINK
;

338 
Êô_±r
->
íåy_time
 = 
sim_˛ock
;

340 
vîbo£
 =
YES
)

341 
	`¥ötf
("SëtögÉ¡ryÅimê[%d][%d][%d]-Êô:%d(%sË: %Œd\n",
node
, 
pc
, 
vc
,

342 
Êô_±r
->
Êô_num
, (
HEAD_FLIT
)? "HEAD":

343 (
TAIL_FLIT
)? "TAIL":"MIDDLE", ()
sim_˛ock
);

347 
Êô_±r
->
is_«ck
 =
NO
)

349 (()
	`ønd
()/()
RAND_MAX
 < 
lök_îr_øã
)? 1:0 )

351 
Êô_±r
->
îr‹
 |
ERROR_LINK
;

352 
num_lök_îr
++;

358 
p_buf„r
 +
PD_BUFCTR
 + 
PD_BUFFER
;

362 
lök_îr_øã
 + 
routög_îr_øã
 + 
sw¨bôî_îr_øã
 > 0)

363 
p_buf„r
 +
PD_BUFCTR
 + 
PD_BUFFER
;

369  (
óæy_eje˘i⁄
 =
YES
Ë&& (
Êô_±r
->
d©a
.
dnode
 =
√xt_node
))

375 
p_buf„r
 -
PD_BUFCTR
 + 
PD_BUFFER
;

377 
	`£nd_Êô
(&(
nic_öput_buf
[
√xt_node
][0][
vc
]), &
Êô_±r
);

382 
loˇl_msg_Àn
 = 
Êô_±r
->
Œí
;

383 
globÆ_msg_Àn
 = 
Êô_±r
->
msgÀn
;

384  
hybrid_t›ﬁogy
 =
YES
 && 
node
 >
NUM_NODES
/2 && 
√xt_pc
 =
num_pc
 - 1

385 && (
TAIL_FLIT
Ë&& 
Êô_±r
->
msgty≥
 !
CONTROL
)

387 
is_ªady
[
√xt_node
][
√xt_pc
][
vc
].
röbuf
 <
globÆ_msg_Àn
 - 
loˇl_msg_Àn
 - 1)

391 
	`¥ötf
("Split_RT_BNA Link 2 ---> [%d][%d][%d]-flit:%d(%s)ÅoÑinbuf[%d][%d][%d] %d\n",

392 
node
, 
pc
, 
vc
, 
Êô_±r
->
Êô_num
, (
HEAD_FLIT
)?

393 "HEAD":(
TAIL_FLIT
)?"TAIL":"MIDDLE",

394 
√xt_node
, 
√xt_pc
, 
vc
, 
is_ªady
[√xt_node][√xt_pc][vc].
röbuf
);

395 
	`¥öt_mbox
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
vc
]));

397 
	`£nd_Êô
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
vc
]), &
Êô_±r
);

398 
	`exô
(1);

402 
Êô_t
 *
body_Êô_±r
, *
tmp
;

403 
HEAD_FLIT
)

404 
Êô_±r
->
Êô_ty≥
 = 
HEAD
;

406 
Êô_±r
->
Êô_ty≥
 = 
MIDL
;

407 
tmp
 = 
Êô_±r
;

408 
	`£nd_Êô
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
vc
]), &
Êô_±r
);

409 
pos
 = 
loˇl_msg_Àn
;Öo†<
globÆ_msg_Àn
;Öos++)

411 
body_Êô_±r
 = 
	`Êô_Æloc
();

412 
	`make_body_Êô
(
body_Êô_±r
,
tmp
);

413 
pos
 =
globÆ_msg_Àn
 - 1)

414 
body_Êô_±r
->
Êô_ty≥
 = 
TAIL
;

415 
tmp
 = 
body_Êô_±r
;

416 
vîbo£
 =
YES
)

417 { 
	`¥ötf
("Inje˘Üoˇ»tÿglobÆ [%d][%d][%d]-Êô:%d, dnode:%d de°:%d\n", 
√xt_node
, 
√xt_pc
,

418 
vc
, 
body_Êô_±r
->
Êô_num
, body_Êô_±r->
d©a
.
dnode
, body_Êô_±r->d©a.
de°
); 
	`fÊush
(
°dout
);}

420 
	`£nd_Êô
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
vc
]), &
body_Êô_±r
);

422 
vîbo£
 =
YES
)

423 
	`¥öt_mbox
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
vc
]));

426 
hybrid_t›ﬁogy
 =
YES
 && 
node
 < 
NUM_NODES
/2 && 
pc
 =
NUM_PC
 - 1)

428 
loˇl_msg_Àn
 <= 1)

430 
HEAD_FLIT
)

432 
Êô_±r
->
Êô_ty≥
 = (
HEAD
 | 
TAIL
);

433 
	`£nd_Êô
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
vc
]), &
Êô_±r
);

435 
MIDL_FLIT
 || 
TAIL_FLIT
)

437 
vîbo£
 =
YES
)

438 { 
	`¥ötf
("Squashög globÆÅÿloˇ»[%d][%d][%d]-Êô:%d(%s), dnode:%d de°:%d\n", 
√xt_node
, 
√xt_pc
,

439 
vc
, 
Êô_±r
->
Êô_num
,"MT", flô_±r->
d©a
.
dnode
, flô_±r->d©a.
de°
); 
	`fÊush
(
°dout
);}

440 
	`Êô_‰ì
(
Êô_±r
);

446 
HEAD_FLIT
)

447 
	`£nd_Êô
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
vc
]), &
Êô_±r
);

448 
TAIL_FLIT
)

450 
Êô_±r
->
pos
 = 
loˇl_msg_Àn
 - 1;

451 
	`£nd_Êô
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
vc
]), &
Êô_±r
);

453 
MIDL_FLIT
)

455 
Êô_±r
->
pos
 < 
loˇl_msg_Àn
 - 1)

456 
	`£nd_Êô
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
vc
]), &
Êô_±r
);

459 
vîbo£
 =
YES
)

460 { 
	`¥ötf
("Squashög globÆÅÿloˇ»[%d][%d][%d]-Êô:%d(%s), dnode:%d de°:%d\n", 
√xt_node
, 
√xt_pc
,

461 
vc
, 
Êô_±r
->
Êô_num
,"MIDL", flô_±r->
d©a
.
dnode
, flô_±r->d©a.
de°
); 
	`fÊush
(
°dout
);}

462 
	`Êô_‰ì
(
Êô_±r
);

469 
	`£nd_Êô
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
vc
]), &
Êô_±r
);

473 
sim_˛ock
 > 
w¨mup_cy˛e
)

474 
tŸÆ_a˘ivôy
[
node
]++;

480 
PD_BUFFER
 = 
buf„r_tmp
;

481 
	}
}

	@link.h

44 #i‚de‡
LINK_H


45  
	#LINK_H


	)
47 
mbox_t
 
lök_buf
[
MAX_NODES
][
MAX_PC
-
MAX_NIC_PC
][
MAX_VC
];

48 
lök_°age
();

49 
lök_°age2
();

	@main.cpp

45 
	~<°dio.h
>

46 
	~<°dlib.h
>

47 
	~<zlib.h
>

48 
	~"maö.h
"

49 
	~"rouãr.h
"

50 
	~"nic.h
"

51 
	~"lök.h
"

52 
	~"≠p.h
"

53 
	~"sim_ªsu….h
"

54 
	~"°rög.h
"

55 
	~"de˛¨©i⁄s.h
"

56 
	~"deföes.h
"

59  
	#BASE_CLOCK
 0

	)
60  
	#READ_MSG_SIZE
 0

	)
62 #ifde‡
TR_INTEG


63 
	~<ve˘‹
>

64 
	snic_íåy_t
 {

65 
	m§c
;

66 
	md°
;

67 
	mmsg_size
;

68 
	m˛ock
;

69 
	måid
;

72 
boﬁ
 
i˙_evít_Êag
;

73 
globÆ_˛ock
;

74 
°d
::
ve˘‹
<
nic_íåy_t
> 
nic_queue
[80];

75 
tŸÆ_csim_nic_qdñay
;

76 
csim_öj_msgs
;

77 
sim_°¨t_˛ock
;

78 
FILE
 *
Â_dbg
;

81 #i‚de‡
TR_INTEG


82 
	~<ve˘‹
>

83 
	snic_íåy_t
 {

84 
	m§c
;

85 
	md°
;

87 
	g°d
::
ve˘‹
<
nic_íåy_t
> 
nic_queue
;

90 #ifde‡
TRACE_READ


91 
	gåa˚_d°
, 
	gåa˚_§c
, 
	gåa˚_msg_Àn
;

92 
	gåa˚_˛ock
=0;

93 
	gåa˚_˛ock_°¨t
=0;

94 
	gfú°_ªad
 = 1;

95 
	gfú°_¥öt
 = 0;

96 
	gœ°_ªad
 = 1;

97 
	gåa˚_íd
 = 0;

98 
gzFûe
 
	gåa˚_Â
;

99 
	gbuff
[80];

100 
	gœ°_¥öt
 = 0;

101 
	gglobÆ_˛ock
=0;

102 
	gœ°_öãrvÆ
=0;

103 
	gnum_öãrvÆ
=0;

104 
	gœ°_√tw‹k_œãncy
=0.0;

105 
	gœ°_ejt_msg
=0;

106 
	gœ°_equÆ_msg
 = -1;

110 
nox_sim
();

114 #i‚de‡
TR_INTEG


115 
	$maö
(
¨gc
, *
¨gv
[])

119 #ifde‡
TRACE_READ


120 
åa˚_Â
 = 
	`gz›í
(
¨gv
[1], "r");

121 
åa˚_Â
 =
NULL
)

123 
	`¥ötf
("UnableÅo openÅrace file!!!\n");

124 
	`exô
(1);

126 
	`sim_öô
(
¨gc
-1, &(
¨gv
[1]));

128 
	`sim_öô
(
¨gc
, 
¨gv
);

131 
	`nox_sim
(1000000000);

133 
	}
}

136 
	$nox_sim
(
√xt_˛ock_evít
)

139 #ifde‡
TR_INTEG


140 
œ°_sim_˛ock
=0;

141 
ª≥©ed_nox_ˇŒs
=0;

142 
œ°_sim_˛ock
 =
sim_˛ock
 && sim_clock)

144 
ª≥©ed_nox_ˇŒs
++;

150 
œ°_sim_˛ock
 = 
sim_˛ock
;

154 #ifde‡
TRACE_READ


155 
sim_˛ock
 = 
BASE_CLOCK
;

160 
sim_íd_Êag
 = 
INVALID
;

161 #i‡
TR_INTEG


162 
i˙_evít_Êag
 = 
Ál£
;

172 
boﬁ
 
exô_sim
 = 
Ál£
;

173 
sim_íd_Êag
 !
VALID
 && 
sim_˛ock
 < 
√xt_˛ock_evít
 - 
CLOCK_FREQ_SCALE
)

177 
num_öj_msg
 > 
WARMUP_MSG
 && 
w¨mup_cy˛e
 == 0)

178 
w¨mup_cy˛e
 = 
sim_˛ock
-
sim_°¨t_˛ock
;

182 #ifde‡
TR_INTEG


186 
node
 = 0;Çodê< 
NUM_LOGICAL_NODES
;Çode++)

189 !
nic_queue
[
node
].
	`em±y
())

191 
nic_íåy_t
 
ãmp
;

193 
ãmp
 = 
nic_queue
[
node
].
	`back
();

194 
ãmp
.
˛ock
 <
sim_˛ock
 + 
CLOCK_FREQ_SCALE
)

204 !
	`≠p_to_nic_ouçut_buf_°age
(
ãmp
.
§c
,Åemp.
d°
, 
NO
,ãmp.
åid
,Åemp.
msg_size
))

211 
nic_queue
[
node
].
	`p›_back
();

212 
tŸÆ_csim_nic_qdñay
 +
sim_˛ock
 + 
CLOCK_FREQ_SCALE
 - 
ãmp
.
˛ock
;

219 
num_öj_msg
 =
num_ejt_msg
)

221 
sim_íd_Êag
 = 
VALID
;

223 
√xt_˛ock_evít
 !
globÆ_˛ock
 + 
INFINITE_CYCLE
)

224 
sim_˛ock
 = 
CLOCK_FREQ_SCALE
*(
√xt_˛ock_evít
/CLOCK_FREQ_SCALE);

226 
sim_˛ock
 < 
globÆ_˛ock
)

227 
sim_˛ock
 = 
CLOCK_FREQ_SCALE
*(
globÆ_˛ock
/CLOCK_FREQ_SCALE);

239 #ifde‡
TRACE_READ


241 
åa˚_íd
 && 
num_ejt_msg
 =
num_öj_msg
)

242 
sim_íd_Êag
 = 
VALID
;

244 
œ°_ªad
 =1 && !
åa˚_íd
)

246 !
	`gzeof
(
åa˚_Â
))

248 
	`gzgës
(
åa˚_Â
, 
buff
, 80);

249 #i‡
READ_MSG_SIZE


250 
	`ssˇnf
(
buff
,"%d %d %d %Œd",&
åa˚_§c
, &
åa˚_d°
, &
åa˚_msg_Àn
, &
åa˚_˛ock
) ;

252 
	`ssˇnf
(
buff
,"%d %d %Œd",&
åa˚_§c
, &
åa˚_d°
, &
åa˚_˛ock
) ;

253 
åa˚_msg_Àn
 = 
MSG_LEN
;

256 
	`¥ötf
("ªadÅø˚ fûêå™ßti⁄ : %s",
buff
);

257 
fú°_ªad
)

259 
åa˚_˛ock_°¨t
 = 
åa˚_˛ock
 - 
BASE_CLOCK
 ;

260 
fú°_ªad
 = 0;

261 
	`¥ötf
("Tø˚ clock sèπögáà%Œd\n", 
åa˚_˛ock_°¨t
);

263 
åa˚_˛ock
 -
åa˚_˛ock_°¨t
;

267 
åa˚_íd
 = 1;

268 
	`¥ötf
("settingÅraceÉnd here!\n");

272 !
åa˚_íd
)

274 
åa˚_˛ock
 <
sim_˛ock
)

276 
	`≠p_to_nic_ouçut_buf_°age
(
åa˚_§c
, 
åa˚_d°
, 
NO
, 
åa˚_msg_Àn
);

277 
	`¥ötf
("Inje˘ögÖackë %d %dáà˛ock %Œd\n",
åa˚_§c
, 
åa˚_d°
, 
åa˚_˛ock
);

278 
œ°_ªad
 = 1;

279 
fú°_¥öt
 = 1;

280 
globÆ_˛ock
 = 
åa˚_˛ock
 + 
åa˚_˛ock_°¨t
;

281  (
globÆ_˛ock
 / 100Ë% 1000 =0 && 
œ°_öãrvÆ
 != global_clock/100)

283 
num_öãrvÆ
++;

284 
œ°_öãrvÆ
 = 
globÆ_˛ock
 / 100;

301 
fú°_¥öt
)

302 
	`¥ötf
("WaôögÅÿInje˘ögÖackë %d %dáà˛ock %ŒdÇow clock %d\n",
åa˚_§c
, 
åa˚_d°
, 
åa˚_˛ock
, 
sim_˛ock
);

303 
œ°_ªad
 = 0;

304 
fú°_¥öt
 = 0;

308 
num_ejt_msg
 =
num_öj_msg
)

310 
sim_˛ock
+=
CLOCK_FREQ_SCALE
;

331 
RESP_RQ_TRAFFIC
)

333 
°d
::
ve˘‹
<
nic_íåy_t
> 
ãmp_queue
;

334 
i
=0; i< 
nic_queue
.
	`size
(); i++)

335 !
	`≠p_to_nic_ouçut_buf_°age
(
nic_queue
[
i
].
§c
,nic_queue[i].
d°
, 
NO
, 
MSG_LEN
))

336 
ãmp_queue
.
	`push_back
(
nic_queue
[
i
]);

338 
nic_queue
.
	`˛ór
();

339 
i
=0; i< 
ãmp_queue
.
	`size
() ; i++)

340 
nic_queue
.
	`push_back
(
ãmp_queue
[
i
]);

343 
num_öj_msg
 < 
MSG_TO_INJECT
)

346 
RESP_RQ_TRAFFIC
)

347 
	`≠p_to_nic_ouçut_buf_°age
(-1, -1, 
NO
, 1);

349 
	`≠p_to_nic_ouçut_buf_°age
(-1, -1, 
NO
, 
MSG_LEN
);

357 
	`nic_ouçut_buf_to_rouãr_öput_buf_°age
();

363 
	`°age1
();

365 
	`VA_°age
();

366 
	`SA_°age
();

369 
	`°age3
();

374 
	`lök_°age
();

375 
lök2
 == 1)

376 
	`lök_°age2
();

381 
	`nic_öput_buf_to_PE_°age
();

383 
	`upd©e_mbox_cou¡
();

384 
	`upd©e_vc_öfo_°©
();

385 
	`upd©e_is_ªady_Êag
();

388 
	`upd©e_lök_ußge
();

391 
sim_˛ock
+=
CLOCK_FREQ_SCALE
;

394 
exô_sim
)

396 
node
=0;Çode<
NUM_NODES
;Çode++)

397 
pc
=0;Öc<
NUM_PC
;Öc++)

398 
vc
=0; vc<
NUM_VC
; vc++)

401 
vîbo£
 =
YES
)

403 
	`¥ötf
("[%d][%d][%d] %s\n",
node
,
pc
,
vc
,
vc_°©e
[
vc_öfo
[node][pc][vc].
vc_°©
]);

404 
	`¥öt_mbox
(&(
rouãr_öput_buf
[
node
][
pc
][
vc
]));

408 
	`exô
(1);

411 
œ°_dódlock_chk_cy˛e
 = 0;

412 
dódlock_chk_ejt_msg
 = -1;

413  
	#DEADLOCK_PERIOD
 50000

	)
414 
sim_˛ock
/
DEADLOCK_PERIOD
 !
œ°_dódlock_chk_cy˛e
 && sim_clock > 1000)

416 
num_ejt_msg
 < 
num_öj_msg
-10 &&Çum_ejt_msg =
dódlock_chk_ejt_msg
)

418 
	`¥ötf
("DeadlockÑeached !!Çum_ejt_msg:%lld deadlock_chk_ejt_msg:%lldÜast_deadlock_chk_cycle:%lld sim_clock:%lld\n",

419 
num_ejt_msg
, 
dódlock_chk_ejt_msg
, 
œ°_dódlock_chk_cy˛e
, 
sim_˛ock
);

421 
exô_sim
 = 
åue
;

422 
vîbo£
 = 
YES
;

426 
œ°_dódlock_chk_cy˛e
 = 
sim_˛ock
/
DEADLOCK_PERIOD
;

427 
dódlock_chk_ejt_msg
 = 
num_ejt_msg
;

439 
vîbo£
 =
YES
)

441 
	`¥ötf
("%Œd-[%d/%d]***************************\n",()
sim_˛ock
, 
num_öj_msg
, 
num_ejt_msg
);

442 #ifde‡
TR_INTEG


443 
	`¥ötf
("csim_öj_msg†: %Œd\n",
csim_öj_msgs
);

445 
	`fÊush
(
°dout
);

449 
sim_˛ock
 % 50000 == 0)

451 
	`¥ötf
("%Œd-[%d/%d/%f/q:%f/%2.2f%%][L:%d/R:%d/A:%d][%d/%d][%Œd/%Œd][%.2lf]\n", ()
sim_˛ock
, 
num_ejt_msg
,

452 
num_öj_msg
, ()
tŸÆ_œãncy
/()(
num_ejt_Êô
),

453 ()
tŸÆ_queueög_œãncy
/()(
num_ejt_Êô
),

454 ()(
num_öj_msg
*100)/()(
NUM_LOGICAL_NODES
*(
sim_˛ock
-
sim_°¨t_˛ock
)),

455 
num_lök_îr
, 
num_routög_îr
, 
num_sw¨bôî_îr
, 
num_e2e_«ck
, 
num_e2e_ªå™s
,

456 ()
num_ejt_Êô
, ()
num_öj_Êô
, 
msg_comböe_ˇndid©e_øtio
);

458 
RESP_RQ_TRAFFIC
)

459 
	`¥ötf
("ni¯queuêsizê: %d c⁄åﬁ msg†:%d d©®msg†:%d\n", 
nic_queue
.
	`size
(), 
c⁄åﬁ_ejt_msg
, 
d©a_ejt_msg
);

461 
	`¥ötf
("c⁄åﬁ msg†:%d d©®msg†:%d\n", 
c⁄åﬁ_ejt_msg
, 
d©a_ejt_msg
);

463 
	`fÊush
(
°dout
);

464 #ifde‡
TRACE_READ


466 
num_ejt_msg
 % 10000 =0 &&Çum_ejt_msg && 
œ°_¥öt
 !=Çum_ejt_msg / 10000)

469 
œ°_¥öt
 = 
num_ejt_msg
 / 10000;

472 #i‚de‡
TR_INTEG


473 
sim_˛ock
 % 1000000 == 0)

474 
	`sim_ªsu…
();

481 #i‚de‡
TR_INTEG


483 
	`sim_ªsu…
();

485 
	}
}

487 
	$upd©e_mbox_cou¡
()

489 
node
, 
pc
, 
vc
;

491 
node
=0;Çode<
NUM_NODES
;Çode++)

492 
pc
=0;Öc<
NUM_PC
;Öc++)

493 
vc
=0; vc<
NUM_VC
; vc++)

495 
	`upd©e_˙t
(&(
rouãr_öput_buf
[
node
][
pc
][
vc
]));

496 
	`upd©e_˙t
(&(
xb¨_buf
 [
node
][
pc
][
vc
]));

498 
pc
 < 
NUM_PC
-
NUM_NIC_PC
)

500 
	`upd©e_˙t
(&(
lök_buf
[
node
][
pc
][
vc
]));

501 
	`upd©e_˙t
(&(
lök_buf2
[
node
][
pc
][
vc
]));

505 
	`upd©e_˙t
(&(
nic_öput_buf
 [
node
][
pc
-(
NUM_PC
-
NUM_NIC_PC
)][
vc
]));

506 
	`upd©e_˙t
(&(
nic_ouçut_buf
[
node
][
pc
-(
NUM_PC
-
NUM_NIC_PC
)][
vc
]));

509 
hybrid_t›ﬁogy
 =
YES
 && 
node
 >
NUM_NODES
/2 && 
pc
 =
NUM_PC
 - 1)

511 
	`upd©e_˙t
(&(
lök_buf
[
node
][
pc
][
vc
]));

512 
	`upd©e_˙t
(&(
lök_buf2
[
node
][
pc
][
vc
]));

515 
hybrid_t›ﬁogy
 =
YES
 && 
pc
 =
NUM_PC
-1 && 
node
 < 
NUM_NODES
/2)

516 
ROUTER_INPUT_BUF_SIZE
 = ROUTER_INPUT_BUF_SIZE*
HYB_VC_RATIO
;

519 
vîbo£
 =
YES
)

520 
	`msg_˙t
(&
rouãr_öput_buf
[
node
][
pc
][
vc
]Ë> 
ROUTER_INPUT_BUF_SIZE
 + 
lök2
 + 1)

522 
	`¥ötf
("BAD!! Buf„∏OvîÊowáà[%d,%d,%d,%d] bd:%d\n", 
node
,
pc
,
vc
,
	`msg_˙t
(&
rouãr_öput_buf
[node][pc][vc]),
ROUTER_INPUT_BUF_SIZE
);

523 
	`¥öt_mbox
(&(
rouãr_öput_buf
[
node
][
pc
][
vc
]));

526 
hybrid_t›ﬁogy
 =
YES
 && 
pc
 =
NUM_PC
-1 && 
node
 < 
NUM_NODES
/2)

527 
ROUTER_INPUT_BUF_SIZE
 = ROUTER_INPUT_BUF_SIZE/
HYB_VC_RATIO
;

530 
sim_˛ock
 > 
w¨mup_cy˛e
)

531 
tŸÆ_buf_ußge
[
node
] +=

532 (
	`msg_˙t
(&(
rouãr_öput_buf
[
node
][
pc
][
vc
])));

542 
	}
}

544 
	$upd©e_vc_öfo_°©
()

546 
node
, 
pc
, 
vc
;

548 
node
=0;Çode<
NUM_NODES
;Çode++)

549 
pc
=0;Öc<
NUM_PC
;Öc++)

550 
vc
=0; vc<
NUM_VC
; vc++)

552 
out_pc
 = 
vc_öfo
[
node
][
pc
][
vc
].out_pc;

553 
vc_öfo
[
node
][
pc
][
vc
].
vc_°©
)

555 
VC_IDLE_TMP
 :{ 
vc_öfo
[
node
][
pc
][
vc
].
vc_°©
 = 
VC_IDLE
; ; }

556 
VC_ROUTING_TMP
 :{ 
vc_öfo
[
node
][
pc
][
vc
].
vc_°©
 = 
VC_ROUTING
; ; }

557 
VC_VA_DONE_TMP
 :{ 
vc_öfo
[
node
][
pc
][
vc
].
vc_°©
 = 
VC_VA_DONE
; ; }

559 
VC_SA_DONE_TMP
 : {

560 
mu…i_cy˛e_SA
 > 1 && 
node
>
NUM_NODES
/2 && 
out_pc
 =
NUM_PC
 - 1)

561 
vc_öfo
[
node
][
pc
][
vc
].
vc_°©
 = 
VC_SA_DONE_TMP1
;

563 
vc_öfo
[
node
][
pc
][
vc
].
vc_°©
 = 
VC_SA_DONE
;

566 
VC_SA_DONE_TMP1
 : {

567 
mu…i_cy˛e_SA
 > 2 && 
node
>
NUM_NODES
/2 && 
out_pc
 =
NUM_PC
 - 1)

568 
vc_öfo
[
node
][
pc
][
vc
].
vc_°©
 = 
VC_SA_DONE_TMP2
;

570 
vc_öfo
[
node
][
pc
][
vc
].
vc_°©
 = 
VC_SA_DONE
;

574 
VC_SA_DONE_TMP2
 : {

575 
mu…i_cy˛e_SA
 > 3 && 
node
>
NUM_NODES
/2 && 
out_pc
 =
NUM_PC
 - 1)

576 
vc_öfo
[
node
][
pc
][
vc
].
vc_°©
 = 
VC_SA_DONE_TMP3
;

578 
vc_öfo
[
node
][
pc
][
vc
].
vc_°©
 = 
VC_SA_DONE
;

582 
VC_SA_DONE_TMP3
 :{ 
vc_öfo
[
node
][
pc
][
vc
].
vc_°©
 = 
VC_SA_DONE
; ; }

591 
	}
}

593 
	$upd©e_is_ªady_Êag
()

595 
node
, 
pc
, 
vc
, 
√xt_node
, 
√xt_pc
, 
pc_ödex
;

596 
«rbôî_Êô
, 
nxb¨_Êô
, 
∆ök_Êô
, 
¬ic_Êô
;

597 
Êô_t
 *
Êô_±r
;

599 
node
=0;Çode<
NUM_NODES
;Çode++)

600 
pc
=0;Öc<
NUM_PC
;Öc++)

601 
vc
=0; vc<
NUM_VC
; vc++)

603 
pc
 >
NUM_PC
-
NUM_NIC_PC
)

610 
«rbôî_Êô
 = (
has_Êô
[
node
][
pc
][
vc
].
¨bôî
 =
YES
)? 1:0;

613 
pc_ödex
 = 
pc
 - (
NUM_PC
-
NUM_NIC_PC
);

619 
is_ªady
[
node
][
pc
][
vc
].
nöbuf
 =

621 (
	`msg_˙t
(&
nic_öput_buf
[
node
][
pc_ödex
][
vc
]Ë=
NIC_INPUT_BUF_SIZE
)?

622 
NO
:
YES
;

629 
is_ªady
[
node
][
pc
][
vc
].
noutbuf
 =

630 (
	`msg_˙t
(&(
nic_ouçut_buf
[
node
][
pc_ödex
][
vc
])Ë<
NIC_OUTPUT_BUF_SIZE
 - 
MSG_LEN
)?

631 
YES
:
NO
;

641 
pc
 < 
NUM_PC
-
NUM_NIC_PC
 || (
hybrid_t›ﬁogy
 =
YES
 &&Ö¯=NUM_PC - 1 && 
node
 >
NUM_NODES
/2))

643 
hybrid_t›ﬁogy
 =
YES
 && 
pc
 =
NUM_PC
-1 && 
node
 < 
NUM_NODES
/2)

644 
ROUTER_INPUT_BUF_SIZE
 = ROUTER_INPUT_BUF_SIZE*
HYB_VC_RATIO
;

649 
√xt_node
 = 
√ighb‹
[
node
][
pc
];

651 
√xt_node
 =
EDGE
)

654 
is_ªady
[
node
][
pc
][
vc
].
röbuf
 = 0;

659 
√xt_pc
 = 
√ighb‹_pc
[
node
][
pc
];

665 
«rbôî_Êô
 = (
has_Êô
[
√xt_node
][
√xt_pc
][
vc
].
¨bôî
 =
YES
)? 1:0;

666 
nxb¨_Êô
 = (
has_Êô
[
√xt_node
][
√xt_pc
][
vc
].
xb¨
 =
YES
)? 1:0;

670 
has_Êô
[
√xt_node
][
√xt_pc
][
vc
].
¨bôî
 = 
NO
;

671 
has_Êô
[
√xt_node
][
√xt_pc
][
vc
].
xb¨
 = 
NO
;

674 #i‡
VC_SET


675 #i‡
ROUTER_INPUT_BUF_NON_UNIFORM


676 
vc
 >=0 && v¯< 
NUM_VC
/2)

677 
is_ªady
[
node
][
pc
][
vc
].
röbuf
 = 
ROUTER_INPUT_BUF_SIZE
/2 -

678 
	`msg_˙t
(&
rouãr_öput_buf
[
node
][
pc
][
vc
]Ë- 
«rbôî_Êô
 - 
nxb¨_Êô
;

680 
is_ªady
[
node
][
pc
][
vc
].
röbuf
 = 
ROUTER_INPUT_BUF_SIZE
 -

681 
	`msg_˙t
(&
rouãr_öput_buf
[
node
][
pc
][
vc
]Ë- 
«rbôî_Êô
 - 
nxb¨_Êô
;

684 
is_ªady
[
node
][
pc
][
vc
].
röbuf
 = 
ROUTER_INPUT_BUF_SIZE
 -

685 
	`msg_˙t
(&
rouãr_öput_buf
[
node
][
pc
][
vc
]Ë- 
«rbôî_Êô
 - 
nxb¨_Êô
;

688 
is_ªady
[
node
][
pc
][
vc
].
röbuf
 = 
ROUTER_INPUT_BUF_SIZE
 -

689 
	`msg_˙t
(&
rouãr_öput_buf
[
node
][
pc
][
vc
]Ë- 
«rbôî_Êô
 - 
nxb¨_Êô
;

697 
hybrid_t›ﬁogy
 =
YES
 && 
pc
 =
NUM_PC
-1 && 
node
 < 
NUM_NODES
/2)

698 
ROUTER_INPUT_BUF_SIZE
 = ROUTER_INPUT_BUF_SIZE/
HYB_VC_RATIO
;

703 
pc_ödex
 = 
pc
 - (
NUM_PC
-
NUM_NIC_PC
);

704 
¬ic_Êô
 = (
has_Êô
[
node
][
pc
][
vc
].
nic
 =
YES
)? 1:0;

708 
is_ªady
[
node
][
pc
][
vc
].
röbuf
 =

709 (
	`msg_˙t
(&
rouãr_öput_buf
[
node
][
pc
][
vc
]Ë< 
ROUTER_INPUT_BUF_SIZE
 )? 
YES
:
NO
;

727 
	}
}

729 
	$upd©e_lök_ußge
()

731 
node
, 
pc
, 
vc
;

733 
num_ejt_msg
 < 
WARMUP_MSG
)

738 
node
=0;Çode<
NUM_NODES
;Çode++)

739 
pc
=0;Öc<
NUM_PC
-
NUM_NIC_PC
;Öc++)

740 
vc
=0; vc<
NUM_VC
; vc++)

741 
lök_ußge
[
node
][
pc
] +
	`msg_˙t
(&
lök_buf
[node][pc][
vc
]);

742 
	}
}

	@main.h

44 #i‚de‡
MAIN_H


45  
	#MAIN_H


	)
47 
	~"°dio.h
"

48 
	~"rouãr.h
"

55  
	#VALID
 0

	)
56  
	#INVALID
 1

	)
57  
	#YES
 0

	)
58  
	#NO
 1

	)
68  
	#CYCLE_TIME2
 500.0

	)
69  
	#CYCLE_TIME3
 500.0

	)
72  
	#DT
 0

	)
73  
	#AD
 1

	)
74  
	#PA
 2

	)
75  
	#SF
 3

	)
76  
	#WF
 4

	)
79  
	#MESH
 0

	)
80  
	#TORUS
 1

	)
81  
	#BFLY
 2

	)
82  
	#BUS
 3

	)
83  
	#XBAR
 4

	)
84  
	#FTREE
 5

	)
85  
	#TTREE
 6

	)
88  
	#FEC
 0

	)
89  
	#HFEC
 1

	)
90  
	#E2E
 2

	)
91  
	#HE2E
 3

	)
92  
	#HBH
 4

	)
93  
	#NONE
 5

	)
96  
	#NR
 0

	)
97  
	#TP
 1

	)
98  
	#TN
 2

	)
99  
	#BC
 3

	)
100  
	#NB
 4

	)
103  
	#UNIFORM
 0

	)
104  
	#MULTIMEDIA
 1

	)
105  
	#SSIMILAR
 2

	)
108  
	#ERROR_NONE
 0

	)
109  
	#ERROR_LINK
 1

	)
110  
	#ERROR_ROUTING
 2

	)
111  
	#ERROR_SW_ARB
 4

	)
112 
sim_öô
(
¨gc
, **
¨gv
);

113 
node_öô
();

114 
upd©e_mbox_cou¡
();

115 
upd©e_vc_öfo_°©
();

116 
upd©e_is_ªady_Êag
();

117 
upd©e_xb¨_ª£rve_°©us
();

118 
upd©e_lök_ußge
();

119 
powî_öô
(
ãch
, 
Êô_width
, 
pc
);

	@multimedia.cpp

45 
	~<°dlib.h
>

46 
	~<m©h.h
>

47 
	~"maö.h
"

48 
	~"rouãr.h
"

49 
	~"mu…imedü.h
"

50 
	~"sh¨ed.h
"

53 
gaussün
(
món
, c⁄° 
sd
)

55 
	gx
, 
	gy
, 
	gr2
;

61 
	gx
 = -1 + 2 * ()(
ønd
())/(
RAND_MAX
);

62 
	gy
 = -1 + 2 * ()(
ønd
())/(
RAND_MAX
);

65 
	gr2
 = 
x
 * x + 
y
 * y;

67 
	gr2
 > 1.0 ||Ñ2 == 0);

70  
	gmón
 + 
sd
 * 
y
 * 
sqπ
 (-2.0 * 
log
 (
r2
) /Ñ2);

74 
m≥g_gíî©e
(
åa˚_num
, 
f_num
)

77 
	g‰ame_món
, 
	g‰ame_sd
;

78 
	g‰ame_Àngth
, 
	g‰ame_cy˛es
;

79 
	gcy˛e_time
 = ((
¨ch
 =2)? 
CYCLE_TIME2
 : 
CYCLE_TIME3
) * 1E-9;

80 
	gg›
[
GOP_SIZE
] = {'I', 'B', 'B', 'P', 'B', 'B', 'P', 'B', 'B', 

84 
	gåa˚_num
) {

86 
g›
[
f_num
%
GOP_SIZE
]) {

88 
‰ame_món
 = 
AYER_I_MEAN
;

89 
	g‰ame_sd
 = 
AYER_I_SD
;

92 
‰ame_món
 = 
AYER_P_MEAN
;

93 
	g‰ame_sd
 = 
AYER_P_SD
;

96 
‰ame_món
 = 
AYER_B_MEAN
;

97 
	g‰ame_sd
 = 
AYER_B_SD
;

103 
g›
[
f_num
%
GOP_SIZE
]) {

105 
‰ame_món
 = 
FLOWER_I_MEAN
;

106 
	g‰ame_sd
 = 
FLOWER_I_SD
;

109 
‰ame_món
 = 
FLOWER_P_MEAN
;

110 
	g‰ame_sd
 = 
FLOWER_P_SD
;

113 
‰ame_món
 = 
FLOWER_B_MEAN
;

114 
	g‰ame_sd
 = 
FLOWER_B_SD
;

120 
g›
[
f_num
%
GOP_SIZE
]) {

122 
‰ame_món
 = 
FOOT_I_MEAN
;

123 
	g‰ame_sd
 = 
FOOT_I_SD
;

126 
‰ame_món
 = 
FOOT_P_MEAN
;

127 
	g‰ame_sd
 = 
FOOT_P_SD
;

130 
‰ame_món
 = 
FOOT_B_MEAN
;

131 
	g‰ame_sd
 = 
FOOT_B_SD
;

137 
g›
[
f_num
%
GOP_SIZE
]) {

139 
‰ame_món
 = 
HOOK_I_MEAN
;

140 
	g‰ame_sd
 = 
HOOK_I_SD
;

143 
‰ame_món
 = 
HOOK_P_MEAN
;

144 
	g‰ame_sd
 = 
HOOK_P_SD
;

147 
‰ame_món
 = 
HOOK_B_MEAN
;

148 
	g‰ame_sd
 = 
HOOK_B_SD
;

154 
g›
[
f_num
%
GOP_SIZE
]) {

156 
‰ame_món
 = 
MARTIN_I_MEAN
;

157 
	g‰ame_sd
 = 
MARTIN_I_SD
;

160 
‰ame_món
 = 
MARTIN_P_MEAN
;

161 
	g‰ame_sd
 = 
MARTIN_P_SD
;

164 
‰ame_món
 = 
MARTIN_B_MEAN
;

165 
	g‰ame_sd
 = 
MARTIN_B_SD
;

171 
g›
[
f_num
%
GOP_SIZE
]) {

173 
‰ame_món
 = 
MOBILE_I_MEAN
;

174 
	g‰ame_sd
 = 
MOBILE_I_SD
;

177 
‰ame_món
 = 
MOBILE_P_MEAN
;

178 
	g‰ame_sd
 = 
MOBILE_P_SD
;

181 
‰ame_món
 = 
MOBILE_B_MEAN
;

182 
	g‰ame_sd
 = 
MOBILE_B_SD
;

188 
g›
[
f_num
%
GOP_SIZE
]) {

190 
‰ame_món
 = 
TENNIS_I_MEAN
;

191 
	g‰ame_sd
 = 
TENNIS_I_SD
;

194 
‰ame_món
 = 
TENNIS_P_MEAN
;

195 
	g‰ame_sd
 = 
TENNIS_P_SD
;

198 
‰ame_món
 = 
TENNIS_B_MEAN
;

199 
	g‰ame_sd
 = 
TENNIS_B_SD
;

205 
	g‰ame_Àngth
 = 
gaussün
(
‰ame_món
, 
‰ame_sd
);

207 
	g‰ame_cy˛es
 = (1.0/
cy˛e_time
)/60000.0;

211  (Ë(
	g‰ame_cy˛es
 / ((
	g‰ame_Àngth
 / ()(
	gMSG_LEN
 - 1)) + 1.0));

	@multimedia.h

44 #i‚de‡
MULTIMEDIA_H


45  
	#MULTIMEDIA_H


	)
47  
	#ONE_FLIT
 128.0 

	)
48  
	#ONE_CYCLE
 0.0000001024 

	)
51  
	#FRAME_TIME
 (1.0/
ONE_CYCLE
)/30.0

	)
54  
	#GOP_SIZE
 15

	)
58  
	#MPEG_VIDEO_NUM
 7 

	)
61  
	#AYER_BANDWIDTH
 237940.8*30.0/
ONE_FLIT


	)
63  
	#AYER_I_MEAN
 430238.1/
ONE_FLIT


	)
64  
	#AYER_I_SD
 69087.7/
ONE_FLIT


	)
66  
	#AYER_P_MEAN
 295554.0/
ONE_FLIT


	)
67  
	#AYER_P_SD
 36318.3/
ONE_FLIT


	)
69  
	#AYER_B_MEAN
 194190.5/
ONE_FLIT


	)
70  
	#AYER_B_SD
 30231.7/
ONE_FLIT


	)
73  
	#FLOWER_BANDWIDTH
 507714.6*30.0/
ONE_FLIT


	)
75  
	#FLOWER_I_MEAN
 839354.2/
ONE_FLIT


	)
76  
	#FLOWER_I_SD
 57415.8/
ONE_FLIT


	)
78  
	#FLOWER_P_MEAN
 680582.4/
ONE_FLIT


	)
79  
	#FLOWER_P_SD
 41021.2/
ONE_FLIT


	)
81  
	#FLOWER_B_MEAN
 401020.1/
ONE_FLIT


	)
82  
	#FLOWER_B_SD
 55604.6/
ONE_FLIT


	)
85  
	#FOOT_BANDWIDTH
 450880.0*30.0/
ONE_FLIT


	)
87  
	#FOOT_I_MEAN
 534656.0/
ONE_FLIT


	)
88  
	#FOOT_I_SD
 29512.8/
ONE_FLIT


	)
90  
	#FOOT_P_MEAN
 569376.0/
ONE_FLIT


	)
91  
	#FOOT_P_SD
 27796.1/
ONE_FLIT


	)
93  
	#FOOT_B_MEAN
 387759.2/
ONE_FLIT


	)
94  
	#FOOT_B_SD
 16277.7/
ONE_FLIT


	)
97  
	#HOOK_BANDWIDTH
 278548.8*30.0/
ONE_FLIT


	)
99  
	#HOOK_I_MEAN
 393283.8/
ONE_FLIT


	)
100  
	#HOOK_I_SD
 20583.3/
ONE_FLIT


	)
102  
	#HOOK_P_MEAN
 340284.0/
ONE_FLIT


	)
103  
	#HOOK_P_SD
 73974.7/
ONE_FLIT


	)
105  
	#HOOK_B_MEAN
 241432.2/
ONE_FLIT


	)
106  
	#HOOK_B_SD
 55917.3/
ONE_FLIT


	)
109  
	#MARTIN_BANDWIDTH
 204140.8*30.0/
ONE_FLIT


	)
111  
	#MARTIN_I_MEAN
 350637.2/
ONE_FLIT


	)
112  
	#MARTIN_I_SD
 58344.8/
ONE_FLIT


	)
114  
	#MARTIN_P_MEAN
 242928.0/
ONE_FLIT


	)
115  
	#MARTIN_P_SD
 44433.3/
ONE_FLIT


	)
117  
	#MARTIN_B_MEAN
 172865.2/
ONE_FLIT


	)
118  
	#MARTIN_B_SD
 27696.5/
ONE_FLIT


	)
121  
	#MOBILE_BANDWIDTH
 613534.7*30.0/
ONE_FLIT


	)
123  
	#MOBILE_I_MEAN
 974731.6/
ONE_FLIT


	)
124  
	#MOBILE_I_SD
 13125.9/
ONE_FLIT


	)
126  
	#MOBILE_P_MEAN
 721939.2/
ONE_FLIT


	)
127  
	#MOBILE_P_SD
 73986.8/
ONE_FLIT


	)
129  
	#MOBILE_B_MEAN
 529601.9/
ONE_FLIT


	)
130  
	#MOBILE_B_SD
 56172.3/
ONE_FLIT


	)
133  
	#TENNIS_BANDWIDTH
 449930.2*30.0/
ONE_FLIT


	)
135  
	#TENNIS_I_MEAN
 637579.6/
ONE_FLIT


	)
136  
	#TENNIS_I_SD
 134875.0/
ONE_FLIT


	)
138  
	#TENNIS_P_MEAN
 535996.8/
ONE_FLIT


	)
139  
	#TENNIS_P_SD
 190843.9/
ONE_FLIT


	)
141  
	#TENNIS_B_MEAN
 394305.9/
ONE_FLIT


	)
142  
	#TENNIS_B_SD
 128459.2/
ONE_FLIT


	)
146 
m≥g_gíî©e
(
åa˚_num
, 
f_num
);

	@nic.cpp

45 
	~<°dio.h
>

46 
	~<°dlib.h
>

47 
	~"maö.h
"

48 
	~"rouãr.h
"

49 
	~"Êô.h
"

50 
	~"Êô_move.h
"

51 
	~"≠p.h
"

52 
	~"nic.h
"

53 
	~"sh¨ed.h
"

55 #ifde‡
TR_INTEG


57 #unde‡
INVALID


59 
	~"deföes.h
"

60 
	~"å™ß˘i⁄.h
"

61 
	~"globÆs.h
"

63 #unde‡
INVALID


64  
	#INVALID
 1

	)
68 #i‚de‡
TR_INTEG


69 
	~<ve˘‹
>

70 
	snic_íåy_t
 {

71 
	m§c
;

72 
	md°
;

74 
°d
::
ve˘‹
<
nic_íåy_t
> 
nic_queue
;

78 
	$nic_ouçut_buf_to_rouãr_öput_buf_°age
()

81 
œ°_£À˘ed_vc
[
MAX_NODES
][
MAX_NIC_PC
]={0};

82 
node
, 
pc
, 
pc_ödex
, 
i
, 
vc_ˇndid©e
;

83 
Êô_t
 *
Êô_±r
;

85 
node
=0;Çode<
NUM_NODES
;Çode++)

87 
pc
=0;Öc<
NUM_NIC_PC
;Öc++)

94 
pc_ödex
 = 
pc
 + 
NUM_PC
 - 
NUM_NIC_PC
;

95 
i
=1; i<=
NUM_VC
; i++)

97 
vc_ˇndid©e
 = (
œ°_£À˘ed_vc
[
node
][
pc
] + 
i
Ë% 
NUM_VC
;

99  
	`msg_˙t
(&(
nic_ouçut_buf
[
node
][
pc
][
vc_ˇndid©e
])) > 0 &&

100 
is_ªady
[
node
][
pc_ödex
][
vc_ˇndid©e
].
röbuf
 =
YES
 )

105 
	`ªcv_Êô
(&(
nic_ouçut_buf
[
node
][
pc
][
vc_ˇndid©e
]), &
Êô_±r
);

107 
sql
 =
YES
)

108 
	`Ârötf
(
fsql
, "INSERT INTO FLOW VALUES(0, %d,%d,%d,%d,%d,%d);\n",

109 
Êô_±r
->
Êô_num
, 
node
, 
pc_ödex
, 
vc_ˇndid©e
, 0, 
sim_˛ock
);

111 
vîbo£
 =
YES
)

113 
	`¥ötf
("röbu‡ [%d][%d][%d]-Êô:%d(%sËqueuêdñay :%d\n", 
node
, 
pc_ödex
, 
vc_ˇndid©e
,

114 
Êô_±r
->
Êô_num
, (
HEAD_FLIT
)? "HEAD":

115 (
TAIL_FLIT
)? "TAIL":"MIDDLE", 
sim_˛ock
 - 
Êô_±r
->
msg_öj_tm
);

116 
	`fÊush
(
°dout
);

120 
Êô_±r
->
öj_tm
 = 
sim_˛ock
;

121 
Êô_±r
->
íåy_time
 = 
sim_˛ock
;

122 
vîbo£
 =
YES
)

123 
	`¥ötf
("SëtögÉ¡ryÅimê[%d][%d][%d]-Êô:%d(%sË: %Œd\n",
node
, 
pc_ödex
, 
vc_ˇndid©e
,

124 
Êô_±r
->
Êô_num
, (
HEAD_FLIT
)? "HEAD":

125 (
TAIL_FLIT
)? "TAIL":"MIDDLE", ()
sim_˛ock
);

126 
p_buf„r
 +
PD_BUFFER
;

131 
lök_îr_øã
 + 
routög_îr_øã
 + 
sw¨bôî_îr_øã
 > 0)

132 
p_buf„r
 +
PD_BUFCTR
 + 
PD_BUFFER
;

134 
	`£nd_Êô
(&(
rouãr_öput_buf
[
node
][
pc_ödex
][
vc_ˇndid©e
]), &
Êô_±r
);

135 
œ°_£À˘ed_vc
[
node
][
pc
] = 
vc_ˇndid©e
;

138 
sim_˛ock
 > 
w¨mup_cy˛e
)

139 
tŸÆ_a˘ivôy
[
node
]++;

142 
p_buf„r
 +
PD_BUFCTR
 + 
PD_BUFFER
;

149 
	}
}

151 
	$nic_öput_buf_to_PE_°age
()

155 
œ°_£À˘ed_vc
[
MAX_NODES
][
MAX_NIC_PC
] = {0};

156 
îr‹
[
MAX_NODES
][
MAX_NIC_PC
][
MAX_VC
] = {0};

157 
œ°_vc
, 
node
, 
pc
, 
i
, 
vc_ˇndid©e
, 
dñay
;

158 
Êô_t
 *
Êô_±r
;

160 
node
=0;Çode<
NUM_NODES
;Çode++)

162 
pc
=0;Öc<
NUM_NIC_PC
;Öc++)

164 
œ°_vc
 = 
œ°_£À˘ed_vc
[
node
][
pc
];

165 
i
=1; i<=
NUM_VC
; i++)

167 
vc_ˇndid©e
 = (
œ°_vc
 + 
i
Ë% 
NUM_VC
;

169  
	`msg_˙t
(&(
nic_öput_buf
[
node
][
pc
][
vc_ˇndid©e
])) > 0 )

171 
	`ªad_Êô
(&(
nic_öput_buf
[
node
][
pc
][
vc_ˇndid©e
]), &
Êô_±r
);

175 
Êô_±r
->
blk_chk_d⁄e
 =
NO
)

179 
ªå™s_ty≥
 !
NONE
)

182 
ªå™s_ty≥
 =
FEC
 ||Ñëøns_ty≥ =
HFEC
Ë{ 
p_îr_chk
 +
PD_SECDED
; }

185 
ªå™s_ty≥
 !
FEC
)

187 
p_îr_chk
 +
PD_CRCCHK
;

190  (
Êô_±r
->
îr‹
 & 
ERROR_LINK
) > 0 )

192 
ªå™s_ty≥
 =
E2E
 ||

193 (
ªå™s_ty≥
 =
HE2E
 && !
HEAD_FLIT
))

195 
îr‹
[
node
][
pc
][
vc_ˇndid©e
] = 
YES
;

196 
dñay
 = 0;

203  
ªå™s_ty≥
 =
HBH
 ||

204 (
ªå™s_ty≥
 =
HFEC
 && 
HEAD_FLIT
) ||

205 (
ªå™s_ty≥
 =
HE2E
 && 
HEAD_FLIT
) )

207 
HEAD_FLIT
)

208 
dñay
=3;

209 
TAIL_FLIT
)

210 
dñay
=3;

212 
dñay
=(
Êô_±r
->
pos
 =Êô_±r->
msgÀn
-1)? 3:2;

215 
p_ªå™s
 +
PD_BUFFER
 + 
PD_HBHCTR
;

218 
Êô_±r
->
îr‹
 &~
ERROR_LINK
;

222 
dñay
 = 0;

225 
Êô_±r
->
îr‹_≥«…y
 = 
dñay
;

233 
Êô_±r
->
îr‹_≥«…y
 >0)

235 
Êô_±r
->
blk_chk_d⁄e
 = 
YES
;

236 
Êô_±r
->
îr‹_≥«…y
--;

241 
Êô_±r
->
blk_chk_d⁄e
 = 
NO
;

245 
ªå™s_ty≥
 =
E2E
 || (ªå™s_ty≥ =
HE2E
 && !
HEAD_FLIT
))

247 
TAIL_FLIT
 && 
îr‹
[
node
][
pc
][
vc_ˇndid©e
] =
YES
)

250 #ifde‡
TR_INTEG


251 
	`≠p_to_nic_ouçut_buf_°age
(
Êô_±r
->
d©a
.
dnode
, flô_±r->d©a.
¢ode
 , 
YES
, flô_±r->
åid
, flô_±r->
msgÀn
);

253 #ifde‡
TRACE_READ


254 
	`≠p_to_nic_ouçut_buf_°age
(
Êô_±r
->
d©a
.
dnode
, flô_±r->d©a.
¢ode
 , 
YES
, flô_±r->
msgÀn
);

256 
	`≠p_to_nic_ouçut_buf_°age
(
Êô_±r
->
d©a
.
dnode
, flô_±r->d©a.
¢ode
 , 
YES
, 
MSG_LEN
);

259 
num_e2e_«ck
++;

260 
îr‹
[
node
][
pc
][
vc_ˇndid©e
] = 
NO
;

264 
TAIL_FLIT
 && 
Êô_±r
->
is_«ck
 =
YES
)

266 #ifde‡
TR_INTEG


267 
	`≠p_to_nic_ouçut_buf_°age
(
Êô_±r
->
d©a
.
dnode
, flô_±r->d©a.
¢ode
 , 
NO
, flô_±r->
åid
, flô_±r->
msgÀn
);

269 #ifde‡
TRACE_READ


270 
	`≠p_to_nic_ouçut_buf_°age
(
Êô_±r
->
d©a
.
dnode
, flô_±r->d©a.
¢ode
 , 
NO
, flô_±r->
msgÀn
);

272 
	`≠p_to_nic_ouçut_buf_°age
(
Êô_±r
->
d©a
.
dnode
, flô_±r->d©a.
¢ode
 , 
NO
, 
MSG_LEN
);

275 
num_e2e_ªå™s
++;

280 
	`ªcv_Êô
(&(
nic_öput_buf
[
node
][
pc
][
vc_ˇndid©e
]), &
Êô_±r
);

281 
œ°_£À˘ed_vc
[
node
][
pc
] = 
vc_ˇndid©e
;

283 
num_ejt_Êô
++;

284 
Êô_±r
->
sh‹t_Êô
 =
YES
)

285 
sh‹t_Êôs_sum
++;

288 
Êô_±r
->
msgty≥
 =
CONTROL
)

289 
c⁄åﬁ_ejt_Êô
++;

291 
d©a_ejt_Êô
++;

293 
TAIL_FLIT
)

296 
Êô_±r
->
msgty≥
 =
CONTROL
)

298 
RESP_RQ_TRAFFIC
)

300 
nic_íåy_t
 
tmp
;

301 
vîbo£
 =
YES
)

302 
	`¥ötf
("öje˘Ñe•⁄£ [%d -> %d :Üí %dáà%d ]\n",
Êô_±r
->
d©a
.
dnode
,Êô_±r->d©a.
¢ode
,
MSG_LEN
,
sim_˛ock
);

303 !
	`≠p_to_nic_ouçut_buf_°age
(
Êô_±r
->
d©a
.
dnode
,Êô_±r->d©a.
¢ode
, 
NO
, 
MSG_LEN
))

305 
tmp
.
§c
 = 
Êô_±r
->
d©a
.
dnode
;

306 
tmp
.
d°
 = 
Êô_±r
->
d©a
.
¢ode
;

307 
nic_queue
.
	`push_back
(
tmp
);

308 
vîbo£
 =
YES
)

309 
	`¥ötf
("droppedÑesponse\n");

312 
c⁄åﬁ_ejt_msg
++;

317 
RESP_RQ_TRAFFIC
)

320 
£lf_thrŸéög_åaffic
 =
YES
)

321 
is_waôög
[
Êô_±r
->
d©a
.
de°
]=
Ál£
;

324 
hybrid_t›ﬁogy
 =
YES
)

326 
num_ejt_Êô
 +
Êô_±r
->
msgÀn
 - flô_±r->
Œí
;

328 
d©a_ejt_msg
++;

330 
tŸÆ_∑ckë_dñay_cy˛e
 +
sim_˛ock
 - 
Êô_±r
->
msg_öj_tm
;

331 
num_ejt_msg
++;

332 #ifde‡
TR_INTEG


334 
TRANSTYPE
 *
å
 = 
	`m≠_å™ß˘i⁄
(
Êô_±r
->
åid
);

335 
vîbo£
 =
YES
)

337 
	`¥ötf
("Inf‹mögÅønß˘i⁄ :%d\n",
å
->
å_id
);

338 
å
->
	`¥öt
();

340 
å
->
i˙_å™s_comp
 = 
åue
;

341 
sim_íd_Êag
 = 
VALID
;

342 
i˙_evít_Êag
 = 
åue
;

350 
tŸÆ_dñay_cy˛e
 +(
Êô_±r
->
dñay_cy˛e
);

351 #ifde‡
TR_INTEG


352 
Êô_±r
->
öj_tm
 - flô_±r->
msg_öj_tm
 - flô_±r->
pos
>0)

354 
tŸÆ_queueög_œãncy
 +(
Êô_±r
->
öj_tm
 - flô_±r->
msg_öj_tm
 );

355 
tŸÆ_√tw‹k_œãncy
 +(
sim_˛ock
 - 
Êô_±r
->
öj_tm
 + flô_±r->
e2e_≥«…y
);

358 
tŸÆ_num_h›
 +
Êô_±r
->
num_h›
;

361 
Êô_±r
->
num_h›
 <= 1)

362 
Êôs_⁄e_h›
++;

363 
Êô_±r
->
num_h›
 <= 2)

364 
Êôs_two_h›
++;

365 
Êô_±r
->
num_h›
 <= 3)

366 
Êôs_thªe_h›
++;

368 
Êôs_thªe_∂us_h›
++;

371 
tŸÆ_œãncy
 = 
tŸÆ_queueög_œãncy
 + 
tŸÆ_√tw‹k_œãncy
;

373 
Êô_±r
->
dñay_cy˛e
 > 20)

374 
tŸÆ_aged_Êô20
++;

375 
Êô_±r
->
dñay_cy˛e
 > 10)

376 
tŸÆ_aged_Êô10
++;

378 
Êô_±r
->
msgty≥
 =
CONTROL
)

380 
cmsg_tŸÆ_dñay_cy˛e
 +(
Êô_±r
->
dñay_cy˛e
);

381 
cmsg_tŸÆ_queueög_œãncy
 +(
Êô_±r
->
öj_tm
 - flô_±r->
msg_öj_tm
 );

382 
cmsg_tŸÆ_√tw‹k_œãncy
 +(
sim_˛ock
 - 
Êô_±r
->
öj_tm
 + flô_±r->
e2e_≥«…y
);

383 
cmsg_tŸÆ_œãncy
 = 
cmsg_tŸÆ_queueög_œãncy
 + 
cmsg_tŸÆ_√tw‹k_œãncy
;

387 
dmsg_tŸÆ_dñay_cy˛e
 +(
Êô_±r
->
dñay_cy˛e
);

388 
dmsg_tŸÆ_queueög_œãncy
 +(
Êô_±r
->
öj_tm
 - flô_±r->
msg_öj_tm
 );

389 
dmsg_tŸÆ_√tw‹k_œãncy
 +(
sim_˛ock
 - 
Êô_±r
->
öj_tm
 + flô_±r->
e2e_≥«…y
);

390 
dmsg_tŸÆ_œãncy
 = 
cmsg_tŸÆ_queueög_œãncy
 + 
cmsg_tŸÆ_√tw‹k_œãncy
;

393 (
sim_˛ock
 - 
Êô_±r
->
öj_tm
 - flô_±r->
dñay_cy˛e
Ë< 3*(Êô_±r->
num_h›
) + 3)

395 
	`¥ötf
("ERR WEIRDÉjectingát clock %lld flit_num:%d [%d][%d][%d] src %d, hops %d,Åime %d, delay %d\n",

396 
sim_˛ock
,
Êô_±r
->
Êô_num
, 
node
, 
pc
, 
i
,Êô_±r->
d©a
.
¢ode
, flô_±r->
num_h›
,

397 (
sim_˛ock
 - 
Êô_±r
->
öj_tm
), flô_±r->
dñay_cy˛e
);

399 
	`gëch¨
();

402 
sql
 =
YES
)

403 
	`Ârötf
(
fsql
, "INSERT INTO FLOW VALUES(0, %d,%d,%d,%d,%d,%d);\n",

404 
Êô_±r
->
Êô_num
, 
node
, 
pc
, 
vc_ˇndid©e
, 5, 
sim_˛ock
);

406 
vîbo£
 =
YES
)

409 
	`¥ötf
("nic->PE [%d][%d][%d]-Êô:%d(%sËejàmsg:%dÉjàÊô:%d inj msg:%d\n", 
node
, 
pc
, 
vc_ˇndid©e
,

410 
Êô_±r
->
Êô_num
, (
HEAD_FLIT
)? "HEAD":

411 (
TAIL_FLIT
)? "TAIL":"MIDDLE",
num_ejt_msg
,
num_ejt_Êô
,
num_öj_msg
);

412 
	`fÊush
(
°dout
);

416 
	`Êô_‰ì
(
Êô_±r
);

418 #i‚de‡
TR_INTEG


419 #i‚de‡
TRACE_READ


420 
num_ejt_msg
 >
MSG_TO_EJECT
 + 
WARMUP_MSG
)

422 
sim_íd_Êag
 = 
VALID
;

431 
	}
}

	@nic.h

44 #i‚de‡
NIC_H


45  
	#NIC_H


	)
47 
	~"rouãr.h
"

48 
	~"Êô_move.h
"

51  
	#NIC_INPUT_BUF_SIZE
 32

	)
52  
	#NIC_OUTPUT_BUF_SIZE
 32

	)
54 
mbox_t
 
nic_öput_buf
 [
MAX_NODES
][
MAX_NIC_PC
][
MAX_VC
];

55 
mbox_t
 
nic_ouçut_buf
[
MAX_NODES
][
MAX_NIC_PC
][
MAX_VC
];

57 
nic_ouçut_buf_to_rouãr_öput_buf_°age
();

58 
nic_öput_buf_to_PE_°age
();

	@node_init.cpp

45 
	~<m©h.h
>

46 
	~"maö.h
"

47 
	~"rouãr.h
"

48 
	~"sh¨ed.h
"

50 
	$node_öô
()

52 
row
, 
cﬁ
;

53 
cuºít_node
;

54 
 
, 
∫
, 
un
, 
dn
;

55 
i
,
node
 = 0;

57 
nc
 = 
NUM_COLS
, 
ƒ
 = 
NUM_ROWS
;

58 
d
, 
m
;

59 
num_nodes
 = 
NUM_NODES
;

60 
hybrid_t›ﬁogy
 =
YES
)

61 
num_nodes
 = 
NUM_NODES
/2;

63 
t›ﬁogy
 =
XBAR
)

65 
node
=0;Çode<
NUM_LOGICAL_NODES
;Çode++)

66 
√ighb‹
[0][
node
 + 
NUM_PC
 - 
NUM_NIC_PC
] =Çode;

68 
t›ﬁogy
 =
BUS
)

70 
node
=0;Çode<
NUM_LOGICAL_NODES
;Çode++)

71 
√ighb‹
[0][
node
 + 
NUM_PC
 - 
NUM_NIC_PC
] = 1;

73 
t›ﬁogy
 =
BFLY
)

75 
dimc⁄°
=0;

76 
node
=0;Çodê< ()
	`pow
(
bÊy
.
k
,bÊy.
n
-1);Çode++)

77 
d
=0; d< 
bÊy
.
n
 - 1 ; d++)

79 
dimc⁄°
 = ()(
	`Êo‹
(
node
/
	`pow
(
bÊy
.
k
, 
d
))) % bfly.k;

80 
m
=0,
p‹t
=0; m< 
bÊy
.
k
 ; m++)

82 
tmp
;

83 
tmp
 = 
node
 + (
m
 - 
dimc⁄°
)*()
	`pow
(
bÊy
.
k
,
d
);

84 
tmp
 !
node
)

86 
√ighb‹
[
node
][
p‹t
 + 
d
*(
bÊy
.
k
-1)] = 
tmp
;

87 
vîbo£
 =
YES
)

88 
	`¥ötf
("nodê:Ö¯: d :Çeighb‹ %d :%d :%d :%d\n",
node
, 
p‹t
 + 
d
*(
bÊy
.
k
-1), d,
tmp
);

89 
p‹t
++;

96 
row
=0;Ñow<
ƒ
;Ñow++)

98 
cﬁ
=0; cﬁ<
nc
; col++)

100 
cuºít_node
 = 
row
 * 
nc
 + 
cﬁ
;

102 
t›ﬁogy
 =
MESH
)

104 
dn
 = (
row
 =0)? 
EDGE
 : (row-1)*
nc
+
cﬁ
;

105 
un
 = (
row
 =
ƒ
-1)? 
EDGE
 : (row+1)*
nc
+
cﬁ
;

106 
 
 = (
cﬁ
 =0)? 
EDGE
 : (
row
*
nc
)+col-1;

107 
∫
 = (
cﬁ
 =
nc
-1)? 
EDGE
 : (
row
*nc)+col+1;

108 
bÆ™˚d_edge
 =
YES
)

110 
un
 =
EDGE
 && 
cﬁ
 < 
nc
/2)

111 
un
 = (
row
)*
nc
+
cﬁ
+2;

112 
un
 =
EDGE
 && 
cﬁ
 >
nc
/2)

113 
un
 = (
row
)*
nc
+
cﬁ
-2;

115 
dn
 =
EDGE
 && 
cﬁ
 < 
nc
/2)

116 
dn
 = 
cﬁ
+2;

117 
dn
 =
EDGE
 && 
cﬁ
 >
nc
/2)

118 
dn
 = 
cﬁ
-2;

120 
 
 =
EDGE
 && 
row
 < 
ƒ
/2)

121 
 
 = (
row
+2)*
nc
+
cﬁ
;

122 
 
 =
EDGE
 && 
row
 >
ƒ
/2)

123 
 
 = (
row
-2)*
nc
+
cﬁ
;

125 
∫
 =
EDGE
 && 
row
 < 
ƒ
/2)

126 
∫
 = (
row
+2)*
nc
+
cﬁ
;

127 
∫
 =
EDGE
 && 
row
 >
ƒ
/2)

128 
∫
 = (
row
-2)*
nc
+
cﬁ
;

131 
t›ﬁogy
 =
TORUS
)

133 
dn
 = (
row
-1>=0)? (‘ow-1)%
ƒ
)*
nc
+
cﬁ
 : ((row+(nr-1))%nr)*nc+col;

134 
un
 = ((
row
+1)%
ƒ
)*
nc
+
cﬁ
;

135 
 
 = (
cﬁ
-1>=0)? (
row
*
nc
)+(col-1)%nc : (row*nc)+(col+(nc-1))%nc;

136 
∫
 = (
row
*
nc
)+(
cﬁ
+1)%nc;

139 
√ighb‹
[
cuºít_node
][
LEFT
] = 
 
;

140 
√ighb‹
[
cuºít_node
][
RIGHT
] = 
∫
;

141 
√ighb‹
[
cuºít_node
][
UP
] = 
un
;

142 
√ighb‹
[
cuºít_node
][
DOWN
] = 
dn
;

143 
vîbo£
 =
YES
)

145 
	`¥ötf
("√ighb‹Çode:%dÖc:%dÇext_node:%d\n",
cuºít_node
,
LEFT
,
√ighb‹
[current_node][LEFT]);

146 
	`¥ötf
("√ighb‹Çode:%dÖc:%dÇext_node:%d\n",
cuºít_node
,
RIGHT
,
√ighb‹
[current_node][RIGHT]);

147 
	`¥ötf
("√ighb‹Çode:%dÖc:%dÇext_node:%d\n",
cuºít_node
,
UP
,
√ighb‹
[current_node][UP]);

148 
	`¥ötf
("√ighb‹Çode:%dÖc:%dÇext_node:%d\n",
cuºít_node
,
DOWN
,
√ighb‹
[current_node][DOWN]);

158 
t›ﬁogy
 =
BFLY
)

160 
node
=0;Çodê< 
NUM_NODES
;Çode++)

161 
pc
=0;Ö¯< 
NUM_PC
-
NUM_NIC_PC
;Öc++)

163 
dnode
=
√ighb‹
[
node
][
pc
];

164 
≈c
=0;Çp¯< 
NUM_PC
-
NUM_NIC_PC
;Çpc++)

165 
√ighb‹
[
dnode
][
≈c
] =
node
)

167 
√ighb‹_pc
[
node
][
pc
]=
≈c
;

170 
vîbo£
 =
YES
)

171 
	`¥ötf
("√ighb‹ (%d : %dË---> (%d : %d)\n",
node
,
pc
,
√ighb‹
[node][pc],
√ighb‹_pc
[node][pc]);

178 
hybrid_t›ﬁogy
 =
YES
)

179 
num_nic_pc
 = 1;

181 
node
=0;Çodê< 
num_nodes
;Çode++)

182 
pc
=0;Ö¯< 
num_pc
 - 
num_nic_pc
;Öc++)

184 
√ighb‹_pc
[
node
][
pc
] = (p¯+ (
num_pc
 - 
num_nic_pc
)/2) %(num_pc -Çum_nic_pc);

185 
bÆ™˚d_edge
 =
YES
)

187 
cx
 = 
node
/
NUM_COLS
;

188 
cy
 = 
node
%
NUM_COLS
;

189 (
cx
 =0 && 
pc
 =
DOWN
Ë|| (cx =
NUM_ROWS
-1 &&Ö¯=
UP
) ||

190 (
cy
 =
NUM_COLS
-1 && 
pc
 =
RIGHT
Ë|| (cy==0 &&Ö¯=
LEFT
))

191 
√ighb‹_pc
[
node
][
pc
]=pc;

193 
vîbo£
 =
YES
)

194 
	`¥ötf
("√ighb‹_p¯node:%dÖc:%dÇext_pc:%d\n",
node
,
pc
,
√ighb‹_pc
[node][pc]);

197 
hybrid_t›ﬁogy
 =
YES
)

198 
num_nic_pc
 = 0;

201 
hybrid_t›ﬁogy
 =
YES
)

205 
node
=0;Çodê< 
num_nodes
;Çode++)

207 
√ighb‹
[
node
][
NUM_PC
 - 1] =Çodê+ 
NUM_NODES
/2;

208 
√ighb‹_pc
[
node
][
NUM_PC
 - 1] = 
c⁄˚¡øti⁄_degªe
;

209 
vîbo£
 =
YES
)

211 
	`¥ötf
("√ighb‹Çode:%dÖc:%dÇext_node:%d\n",
node
,
NUM_PC
 - 1,
√ighb‹
[node][NUM_PC -1]);

212 
	`¥ötf
("√ighb‹Çode:%dÖc:%dÇext_pc:%d\n",
node
,
NUM_PC
 - 1,
√ighb‹_pc
[node][NUM_PC -1]);

215 
node
=
num_nodes
;Çodê< 
NUM_NODES
;Çode++)

217 
√ighb‹
[
node
][
NUM_PC
 - 1] =Çodê- 
NUM_NODES
/2;

218 
√ighb‹_pc
[
node
][
NUM_PC
 - 1] = 
num_pc
 - 1;

219 
vîbo£
 =
YES
)

221 
	`¥ötf
("√ighb‹Çode:%dÖc:%dÇext_node:%d\n",
node
,
NUM_PC
 - 1,
√ighb‹
[node][NUM_PC -1]);

222 
	`¥ötf
("√ighb‹Çode:%dÖc:%dÇext_pc:%d\n",
node
,
NUM_PC
 - 1,
√ighb‹_pc
[node][NUM_PC -1]);

228 
	}
}

	@node_marking.cpp

47 
	~<°dlib.h
>

48 
	~"maö.h
"

49 
	~"rouãr.h
"

50 
	~"node_m¨kög.h
"

51 
	~"sh¨ed.h
"

53 
	$hó…h_öô
()

55 
i
,
À·
,
right
,
up
,
down
;

56 
cﬁ
, 
row
, 
hv
, 
röd
, 
cöd
, 
Êag
;

59 
node_°©us_m≠
 [
MAX_ROWS
][
MAX_COLS
];

60 
hlök_°©us_m≠
[
MAX_ROWS
][
MAX_COLS
];

61 
vlök_°©us_m≠
[
MAX_ROWS
][
MAX_COLS
];

68 
cﬁ
=0; cﬁ<
NUM_COLS
; col++)

69 
row
=0;Ñow<
NUM_ROWS
;Ñow++)

70 
node_°©us_m≠
[
row
][
cﬁ
] = 'H';

72 
num_Áûed_node
 > 0)

75 
i
=0; i<
num_Áûed_node
; i++)

79 
röd
 = ()(()((
NUM_ROWS
-1)*
	`ønd
())/()
RAND_MAX
);

80 
cöd
 = ()(()((
NUM_COLS
-1)*
	`ønd
())/()
RAND_MAX
);

81 } 
node_°©us_m≠
[
röd
][
cöd
] == 'F');

83 
node_°©us_m≠
[
röd
][
cöd
] = 'F';

96 
Êag
 = (
t›ﬁogy
 =
MESH
)? 1:0;

101 
cﬁ
=0; cﬁ<
NUM_COLS
; col++)

102 
row
=0;Ñow<
NUM_ROWS
;Ñow++)

104 
hlök_°©us_m≠
[
row
][
cﬁ
] = (
Êag
 =1 && cﬁ =
NUM_COLS
-1)? 'F':'H';

105 
vlök_°©us_m≠
[
row
][
cﬁ
] = (
Êag
 =1 &&Ñow =
NUM_ROWS
-1)? 'F':'H';

108 
num_Áûed_lök
 > 0)

111 
i
=0; i<
num_Áûed_lök
; i++)

113 
hv
 = (()
	`ønd
()/()
RAND_MAX
 > 0.5)? 0:1;

114 
hv
 == 0)

118 
röd
 = ()(()((
NUM_ROWS
-1 )*
	`ønd
())/()
RAND_MAX
);

119 
cöd
 = ()(()((
NUM_COLS
-1-
Êag
)*
	`ønd
())/()
RAND_MAX
);

120 } 
hlök_°©us_m≠
[
röd
][
cöd
] == 'F');

122 
hlök_°©us_m≠
[
röd
][
cöd
] = 'F';

129 
röd
 = ()(()((
NUM_ROWS
-1-
Êag
)*
	`ønd
())/()
RAND_MAX
);

130 
cöd
 = ()(()((
NUM_COLS
-1 )*
	`ønd
())/()
RAND_MAX
);

131 } 
vlök_°©us_m≠
[
röd
][
cöd
] == 'F');

133 
vlök_°©us_m≠
[
röd
][
cöd
] = 'F';

141 
i
=0; i < 
NUM_NODES
; i++)

143 
i
 >
NUM_NODES
/2 && 
hybrid_t›ﬁogy
 =
YES
)

145 
rouãr
[
i
].
hó…h_°©us
 = 
HEALTHY
;

150 
rouãr
[
i
].
hó…h_°©us
 =

151 (
node_°©us_m≠
[
i
/
NUM_COLS
][i%NUM_COLS] ='H')? 
HEALTHY
:
FAIL
;

155 
À·
 = 
i
%
NUM_COLS
-1;

156 
right
 = 
i
%
NUM_COLS
;

159 
À·
<0)

160 
rouãr
[
i
].
FA_lök_öfo
[
LEFT
]=

161 (
hlök_°©us_m≠
[
i
/
NUM_ROWS
][
NUM_COLS
-1 ] ='H')? 
HEALTHY
:
FAIL
;

163 
rouãr
[
i
].
FA_lök_öfo
[
LEFT
]=

164 (
hlök_°©us_m≠
[
i
/
NUM_ROWS
][
À·
 ] ='H')? 
HEALTHY
:
FAIL
;

167 
rouãr
[
i
].
FA_lök_öfo
[
RIGHT
]=

168 (
hlök_°©us_m≠
[
i
/
NUM_ROWS
][
right
 ] ='H')? 
HEALTHY
:
FAIL
;

171 
down
 = 
i
/
NUM_ROWS
-1;

172 
up
 = 
i
/
NUM_ROWS
;

175 
down
<0)

176 
rouãr
[
i
].
FA_lök_öfo
[
DOWN
]=

177 (
vlök_°©us_m≠
[
NUM_ROWS
-1 ][
i
%
NUM_COLS
] ='H')? 
HEALTHY
:
FAIL
;

179 
rouãr
[
i
].
FA_lök_öfo
[
DOWN
]=

180 (
vlök_°©us_m≠
[
down
 ][
i
%
NUM_COLS
] ='H')? 
HEALTHY
:
FAIL
;

183 
rouãr
[
i
].
FA_lök_öfo
[
UP
]=

184 (
vlök_°©us_m≠
[
up
 ][
i
%
NUM_COLS
] ='H')? 
HEALTHY
:
FAIL
;

186 
	}
}

	@node_marking.h

44 #i‚de‡
_node_m¨kög_h_


45  
	#_node_m¨kög_h_


	)
47 
hó…h_öô
();

	@parameters.h

2 
	gxb¨_powî
[6] = {

	@power.h

44 #i‚de‡
POWER_H


45  
	#POWER_H


	)
53  
	#PD_BUS_LINK
 (
BUS_WIDTH
*
pd_lök_bus_1bô
)

	)
55  
	#E2E_SRC_BUF_SIZE
 10*
MSG_LEN


	)
61  
	#PD_LINK
 (
pd_lök_1bô
 * 
FLIT_WIDTH
Ë

	)
63  
	#SWITCH_ACTIVITY
 0.1

	)
64  
	#LINK_LENGTH
 2

	)
72  
	#PD_ROUTER_45nm
 (0.087 * 
SWITCH_ACTIVITY
)

	)
75  
	#PD_LINK_1B_45nm
 0.27 * 2

	)
77  
	#PD_2_1_45nm
 (0.085* 
SWITCH_ACTIVITY
)

	)
80  
	#PD_BUFFER_64_45nm
 10.78 

	)
82  
	#PD_5_1_45nm
 0.225 * 
SWITCH_ACTIVITY


	)
83  
	#PD_10_1_45nm
 0.401 * 
SWITCH_ACTIVITY


	)
85  
	#PD_XBAR_F_5P_64_45nm
 8.39

	)
89  
	#PD_BUFFER_128_45nm
 21.54

	)
91  
	#PD_8_1_45nm
 0.331* 
SWITCH_ACTIVITY


	)
92  
	#PD_16_1_45nm
 0.271 * 
SWITCH_ACTIVITY


	)
94  
	#PD_XBAR_F_8P_128_45nm
 46.5

	)
98  
	#PD_BUFFER_256_45nm
 43.05 

	)
99  
	#PD_BUS_LINK_1B_45nm
 0.0265

	)
101  
	#PD_3_1_45nm
 0.155* 
SWITCH_ACTIVITY


	)
102  
	#PD_6_1_45nm
 0.26* 
SWITCH_ACTIVITY


	)
106  
	#PD_XBAR_F_3P_256_45nm
 65.8

	)
110  
	#PD_BUFFER_42_45nm
 7.08 

	)
113  
	#PD_20_1_45nm
 0.332 * 
SWITCH_ACTIVITY


	)
115  
	#PD_XBAR_F_10P_42_45nm
 7.96

	)
124  
	#PD_ROUTER_32nm
 0.087 * 
SWITCH_ACTIVITY


	)
126  
	#PD_LINK_1B_32nm
 0.22 * 1.5

	)
128  
	#PD_2_1_32nm
 0.069* 
SWITCH_ACTIVITY


	)
131  
	#PD_BUFFER_64_32nm
 9.448 

	)
133  
	#PD_5_1_32nm
 0.182* 
SWITCH_ACTIVITY


	)
134  
	#PD_10_1_32nm
 0.325* 
SWITCH_ACTIVITY


	)
136  
	#PD_XBAR_F_5P_64_32nm
 6.8

	)
140  
	#PD_BUFFER_128_32nm
 18.89 

	)
142  
	#PD_8_1_32nm
 0.0268* 
SWITCH_ACTIVITY


	)
143  
	#PD_16_1_32nm
 0.219 * 
SWITCH_ACTIVITY


	)
145  
	#PD_XBAR_F_8P_128_32nm
 37.6

	)
148  
	#PD_BUFFER_256_32nm
 37.75 

	)
150  
	#PD_BUS_LINK_1B_32nm
 0.0171

	)
151  
	#PD_3_1_32nm
 0.125* 
SWITCH_ACTIVITY


	)
152  
	#PD_6_1_32nm
 0.211* 
SWITCH_ACTIVITY


	)
156  
	#PD_XBAR_F_3P_256_32nm
 53.3

	)
159  
	#PD_BUFFER_42_32nm
 6.203 

	)
162  
	#PD_20_1_32nm
 0.269* 
SWITCH_ACTIVITY


	)
164  
	#PD_XBAR_F_10P_42_32nm
 64.5 

	)
171  
	#PD_ROUTER_22nm
 0.087 * 
SWITCH_ACTIVITY


	)
173  
	#PD_LINK_1B_22nm
 0.154 * 1.2

	)
175  
	#PD_2_1_22nm
 0.048* 
SWITCH_ACTIVITY


	)
178  
	#PD_BUFFER_64_22nm
 6.613 

	)
180  
	#PD_5_1_22nm
 0.128* 
SWITCH_ACTIVITY


	)
181  
	#PD_10_1_22nm
 0.228* 
SWITCH_ACTIVITY


	)
183  
	#PD_XBAR_F_5P_64_22nm
 4.76

	)
187  
	#PD_BUFFER_128_22nm
 13.22 

	)
189  
	#PD_8_1_22nm
 0.188* 
SWITCH_ACTIVITY


	)
190  
	#PD_16_1_22nm
 0.153 * 
SWITCH_ACTIVITY


	)
192  
	#PD_XBAR_F_8P_128_22nm
 26.4

	)
196  
	#PD_BUFFER_256_22nm
 26.43 

	)
197  
	#PD_BUS_LINK_1B_22nm
 0.0119

	)
199  
	#PD_3_1_22nm
 0.088* 
SWITCH_ACTIVITY


	)
200  
	#PD_6_1_22nm
 0.148* 
SWITCH_ACTIVITY


	)
204  
	#PD_XBAR_F_3P_256_22nm
 37.3 

	)
208  
	#PD_BUFFER_42_22nm
 4.342 

	)
211  
	#PD_20_1_22nm
 0.188* 
SWITCH_ACTIVITY


	)
213  
	#PD_XBAR_F_10P_42_22nm
 4.51 

	)
219  
	#PD_PFA_LOGIC
 2.83

	)
220  
	#PD_PFA_COUNTER
 0.01

	)
221  
	#PD_PFA_PFT
 0.33

	)
233  
	#PD_SW_ARB
 2.6725

	)
234  
	#PD_VC_ARB
 4.2777

	)
235  
	#PD_BUFCTR
 0.00 

	)
237  
	#PD_CRCCHK
 0.00

	)
238  
	#PD_SECDED
 0.00

	)
239  
	#PD_E2ECTR
 0.00

	)
240  
	#PD_E2EBUF
 0.00

	)
241  
	#PD_HBHCTR
 0.00

	)
242  
	#PD_HBHBUF
 0.00

	)
247  
	#PL_ROUTER
 0

	)
248  
	#PL_BUFCTR
 0

	)
249  
	#PL_BUFFER
 0

	)
250  
	#PL_CRCCHK
 0

	)
251  
	#PL_SECDED
 0

	)
252  
	#PL_E2ECTR
 0

	)
253  
	#PL_E2EBUF
 0

	)
254  
	#PL_HBHCTR
 0

	)
255  
	#PL_HBHBUF
 0

	)
256  
	#PL_LINK
 0

	)
259  
	#PL_SW_ARB
 0

	)
260  
	#PL_VC_ARB
 0

	)
261  
	#PL_XBAR_F
 0

	)
269  
	#PL_20_1
 0

	)
270  
	#PL_5_1
 0

	)
271  
	#PL_4_1
 0

	)
274  
	#PR_PL_20_1
 0

	)
275  
	#PR_PL_5_1
 0

	)
276  
	#PR_PL_4_1
 0

	)
	@route_adaptive.cpp

45 
	~"maö.h
"

46 
	~"rouãr_comm⁄.h
"

47 
	~"rouã_ad≠tive.h
"

48 
	~"sh¨ed.h
"

50 
	$ad≠tive_rouã
(
˙
, 
dn
, 
pc
, 
vc
, *
de°_pc
, *
de°_vc
)

53 
¸edô
[
MAX_PC
-
MAX_NIC_PC
], 
be°_vc
[MAX_PC-MAX_NIC_PC];

54 
is_blocked
[4];

55 
cx
, 
cy
, 
dx
, 
dy
, 
hx
, 
hy
;

56 
xdú
, 
ydú
, 
xdi°
, 
ydi°
, 
cur_dú
;

59 
	`ˇlc_co‹d
(
˙
, &
cx
, &
cy
);

60 
	`ˇlc_co‹d
(
dn
, &
dx
, &
dy
);

61 
hx
 = 
NUM_COLS
 / 2; 
hy
 = 
NUM_ROWS
 / 2;

62 
	`gë_be°_¸edô
(
˙
, 
¸edô
, 
be°_vc
);

63 
	`gë_blocked
(
˙
, 
is_blocked
);

64 
cur_dú
 = -1;

67 
t›ﬁogy
 =
MESH
)

69 
xdú
 = (
dx
 > 
cx
)? 
RIGHT
 : 
LEFT
; 
ydú
 = (
dy
 > 
cy
)? 
UP
 : 
DOWN
;

70 
xdi°
 = (
dx
 > 
cx
)? dx-cx : cx-dx; 
ydi°
 = (
dy
 > 
cy
)? dy-cy : cy-dy;

72 
t›ﬁogy
 =
TORUS
)

74 
xdú
 = (
dx
 > 
cx
)? ((dx-cx <
hx
)? 
RIGHT
 : 
LEFT
) : ((cx-dx< hx)? LEFT : RIGHT);

75 
ydú
 = (
dy
 > 
cy
)? ((dy-cy <
hy
)? 
UP
 : 
DOWN
) : ((cy-dy< hy)? DOWN : UP );

76 
xdi°
 = (
dx
 > 
cx
)? ((dx-cx <
hx
)? dx-cx : 
NUM_COLS
-(dx-cx)) : ((cx-dx< hx)? cx-dx : NUM_COLS-(cx-dx) );

77 
ydi°
 = (
dy
 > 
cy
)? ((dy-cy <
hy
)? dy-cy : 
NUM_ROWS
-(dy-cy)) : ((cy-dy< hy)? cy-dy : NUM_ROWS-(cy-dy) );

82 
dn
 =
˙
Ë{ *
de°_pc
 = 
THIS
; *
de°_vc
 = 
vc
; ; }

91 
t›ﬁogy
 =
MESH
)

93 
vc
 == 0)

95 *
de°_pc
 = (
xdi°
 > 0)? 
xdú
 : 
ydú
;

96 *
de°_vc
 = 
vc
;

100 
t›ﬁogy
 =
TORUS
)

102 
vc
 < 2)

104 *
de°_pc
 = (
xdi°
 > 0)? 
xdú
 : 
ydú
;

105 *
de°_vc
 = 
vc
;

114 
xdi°
 == 0)

116 
cur_dú
 = 
ydú
;

123 
ydi°
 == 0)

125 
cur_dú
 = 
xdú
;

134 
xdi°
 > 
ydi°
)

136 
¸edô
[
xdú
] > 0Ë 
cur_dú
 = xdir;

137 
¸edô
[
ydú
] > 0Ë
cur_dú
 = ydir;

138 
cur_dú
 = 
xdú
;

140 
xdi°
 < 
ydi°
)

142 
¸edô
[
ydú
] > 0Ë 
cur_dú
 = ydir;

143 
¸edô
[
xdú
] > 0Ë
cur_dú
 = xdir;

144 
cur_dú
 = 
ydú
;

147 
cur_dú
 = (
¸edô
[
xdú
] >¸edô[
ydú
])? xdir:ydir;

153 *
de°_pc
 = 
cur_dú
;

154 *
de°_vc
 = (
be°_vc
[
cur_dú
] !-1)? be°_vc[cur_dú] : 
vc
;

157 
	}
}

	@route_adaptive.h

48 #i‚de‡
_ad≠tive_rouãr_h


49  
	#_ad≠tive_rouãr_h


	)
51 
	~"rouãr.h
"

53 
ad≠tive_rouã
(
˙
, 
dn
, 
pc
, 
vc
, *
de°_pc
, *
de°_vc
);

	@route_deterministic.cpp

46 
	~<m©h.h
>

47 
	~"maö.h
"

48 
	~"rouãr.h
"

49 
	~"rouãr_comm⁄.h
"

50 
	~"sh¨ed.h
"

51 
	~"Êô.h
"

53 
	$dëîmöi°ic_rouã
(
˙
, 
dn
, 
pc
, 
vc
, * 
de°_pc
, * 
de°_vc
, 
Êô_t
 *
Êô_±r
)

59 
cx
, 
cy
, 
dx
, 
dy
;

60 
i
, 
hx
, 
hy
;

61 
¸edô
[
MAX_PC
-
MAX_NIC_PC
], 
be°_vc
[MAX_PC-MAX_NIC_PC];

62 
¢
 = 
Êô_±r
->
d©a
.
¢ode
;

63 
node
 = 
˙
;

67 
hybrid_t›ﬁogy
 =
YES
 && 
˙
 >
NUM_NODES
/2)

69 *
de°_pc
 = 
NUM_PC
 - 1;

70 *
de°_vc
 = 
vc
;

71 
vîbo£
 =
YES
)

72 
	`¥ötf
("Routing dn :%d cn:%d dest:%d destÖc :%d dest vc:%d chosen\n",

73 
dn
,
˙
,
Êô_±r
->
d©a
.
de°
,*
de°_pc
,*
de°_vc
);

77 
	`ˇlc_co‹d
(
˙
, &
cx
, &
cy
);

78 
	`ˇlc_co‹d
(
dn
, &
dx
, &
dy
);

81 
	`gë_be°_¸edô
(
˙
, 
¸edô
, 
be°_vc
);

82 
hx
 = 
NUM_COLS
 / 2;

83 
hy
 = 
NUM_ROWS
 / 2;

89 
t›ﬁogy
 =
MESH
)

91 
dx
 > 
cx
Ë*
de°_pc
 = 
RIGHT
;

92 
dx
 < 
cx
Ë*
de°_pc
 = 
LEFT
;

93 
dy
 > 
cy
Ë*
de°_pc
 = 
UP
;

94 
dy
 < 
cy
Ë*
de°_pc
 = 
DOWN
;

95 
dn
 =
˙
Ë*
de°_pc
 = 
THIS
;

97 
bÆ™˚d_edge
 =
YES
)

99 *
de°_pc
 =
UP
)

101 
dy
 >
cy
 + 2 && 
cx
 =0Ë*
de°_pc
 = 
LEFT
;

102 
dy
 >
cy
 + 2 && 
cx
 =
NUM_COLS
-1Ë*
de°_pc
 = 
RIGHT
;

104 *
de°_pc
 =
DOWN
)

106 
dy
 <
cy
 - 2 && 
cx
 =0Ë*
de°_pc
 = 
LEFT
;

107 
dy
 <
cy
 - 2 && 
cx
 =
NUM_COLS
-1Ë*
de°_pc
 = 
RIGHT
;

109 *
de°_pc
 =
LEFT
)

111 
dx
 <
cx
 - 2 && 
cy
 =0Ë*
de°_pc
 = 
DOWN
;

112 
dx
 <
cx
 - 2 && 
cy
 =
NUM_ROWS
-1Ë*
de°_pc
 = 
UP
;

114 *
de°_pc
 =
RIGHT
)

116 
dx
 >
cx
 + 2 && 
cy
 =0Ë*
de°_pc
 = 
DOWN
;

117 
dx
 >
cx
 + 2 && 
cy
 =
NUM_ROWS
-1Ë*
de°_pc
 = 
UP
;

124 
t›ﬁogy
 =
TORUS
)

126 
dx
 > 
cx
Ë*
de°_pc
 = (dx-cx <
hx
)? 
RIGHT
 : 
LEFT
 ;

127 
dx
 < 
cx
Ë*
de°_pc
 = (cx-dx < 
hx
)? 
LEFT
 : 
RIGHT
;

128 
dy
 > 
cy
Ë*
de°_pc
 = (dy-cy <
hy
)? 
UP
 : 
DOWN
 ;

129 
dy
 < 
cy
Ë*
de°_pc
 = (cy-dy < 
hy
)? 
DOWN
 : 
UP
 ;

130 
dn
 =
˙
Ë*
de°_pc
 = 
THIS
;

133 
t›ﬁogy
 =
XBAR
)

135 *
de°_pc
 = 
dn
 + (
NUM_PC
 - 
NUM_NIC_PC
);

137 
t›ﬁogy
 =
BUS
)

139 *
de°_pc
 = (
NUM_PC
 - 1);

141 
t›ﬁogy
 =
BFLY
)

143 
vîbo£
 =
YES
)

144 
	`¥ötf
("Routög d¿:%d cn:%d de°:%d\n", 
dn
,
˙
,
Êô_±r
->
d©a
.
de°
);

146 
dn
 =
˙
)

149 *
de°_pc
 = 
NUM_PC
 - 
NUM_NIC_PC
 + (
Êô_±r
->
d©a
.
de°
 % 
bÊy
.
k
);

155 
daddr
[20], 
ˇddr
[20], 
˙_ãmp
=
˙
*
bÊy
.
k
, 
dn_ãmp
=
Êô_±r
->
d©a
.
de°
;

157 
i
 = 
bÊy
.
n
-1; i>=0 ; i--)

159 
daddr
[
i
] = 
dn_ãmp
/()
	`pow
(
bÊy
.
k
,i);

160 
ˇddr
[
i
] = 
˙_ãmp
/()
	`pow
(
bÊy
.
k
,i);

161 
dn_ãmp
 = dn_ãmp%()
	`pow
(
bÊy
.
k
,
i
);

162 
˙_ãmp
 = cn_ãmp%()
	`pow
(
bÊy
.
k
,
i
);

163 
vîbo£
 =
YES
)

164 
	`¥ötf
("bô :%d [daddr/ˇddr] [%d/%d] \n",
i
,
daddr
[i],
ˇddr
[i]);

169 
dimc⁄°
[10]={0};

170 
i
 = 1; i <
bÊy
.
n
-1; i++)

171 
dimc⁄°
[
i
] = ()(
	`Êo‹
(
˙
/
	`pow
(
bÊy
.
k
,i-1))) % bfly.k;

172 
i
 = 1; i <
bÊy
.
n
-1; i++)

174 
vîbo£
 =
YES
)

175 
	`¥ötf
("i:%d dimc⁄°:%d\n",
i
,
dimc⁄°
[i]);

177 
daddr
[
i
] !
dimc⁄°
[i])

178 
daddr
[
i
] !
ˇddr
[i])

182 
vîbo£
 =
YES
)

183 
	`¥ötf
("Cho£Åhêdime¢i⁄ :%dÅÿrouã\n",
i
);

185 
daddr
[
i
] > 
dimc⁄°
[i])

186 *
de°_pc
 = (
i
-1)*(
bÊy
.
k
-1Ë+ 
daddr
[i] - 1;

188 *
de°_pc
 = (
i
-1)*(
bÊy
.
k
-1Ë+ 
daddr
[i];

193 
c⁄˚¡øãd
 =
YES
 && 
dn
 =
˙
)

195 *
de°_pc
 = 
Êô_±r
->
d©a
.
de°
 % 
c⁄˚¡øti⁄_degªe
 + 
THIS
;

198 
hybrid_t›ﬁogy
 =
YES
 && 
˙
 =
dn
)

200 *
de°_pc
 = 
NUM_PC
 - 1;

209 *
de°_pc
 >(
NUM_PC
 - 
NUM_NIC_PC
))

211 *
de°_vc
 = 
vc
;

212 
c⁄˚¡øãd
 =
YES
 )

213 *
de°_vc
 = 0;

216 *
de°_vc
 = (
be°_vc
[*
de°_pc
] !-1)? be°_vc[*de°_pc] : 
vc
;

218 
vîbo£
 =
YES
)

219 
	`¥ötf
("Routing dn :%d cn:%d dest:%d destÖc :%d dest vc:%d chosen\n",

220 
dn
,
˙
,
Êô_±r
->
d©a
.
de°
,*
de°_pc
,*
de°_vc
);

221 
	}
}

	@route_proximity_aware.cpp

45 
	~<°dlib.h
>

46 
	~"maö.h
"

47 
	~"rouãr_comm⁄.h
"

48 
	~"rouã_¥oximôy_aw¨e.h
"

49 
	~"sh¨ed.h
"

51 
	$öô_FA_rouã_öfo
()

53 
row
, 
cﬁ
;

54 
cuºít_node
;

55 
¬eighb‹
[4];

56 
n_Áûed_√ighb‹
;

57 
n_edge_√ighb‹
;

58 
i
,
j
;

59 
°©us
;

72 
row
=0;Ñow < 
NUM_ROWS
;Ñow++)

74 
cﬁ
=0; cﬁ < 
NUM_COLS
; col++)

76 
n_edge_√ighb‹
=0;

77 
n_Áûed_√ighb‹
=0;

78 
cuºít_node
 = (
row
 * 
NUM_COLS
Ë+ 
cﬁ
;

79  
rouãr
[
cuºít_node
].
hó…h_°©us
 !
FAIL
 )

82 
i
=
LEFT
; i<=
DOWN
; i++)

84 
¬eighb‹
[
i
] = 
√ighb‹
[
cuºít_node
][i];

85 
rouãr
[
cuºít_node
].
FA_blocked_öfo
[
i
] = 
NOBLOCK
;

90 
i
=
LEFT
; i<
DOWN
; i++)

91 
¬eighb‹
[
i
] =
EDGE
)

93 
rouãr
[
cuºít_node
].
FA_blocked_öfo
[
i
] = 
BLOCK
;

94 
n_edge_√ighb‹
++;

101 
i
=
LEFT
; i<
DOWN
; i++)

102  
¬eighb‹
[
i
] !
EDGE
 )

103 
rouãr
[
¬eighb‹
[
i
]].
hó…h_°©us
 =
FAIL
 ||

104 
rouãr
[
cuºít_node
].
FA_lök_öfo
[
i
] =
FAIL
 )

106 
rouãr
[
cuºít_node
].
FA_blocked_öfo
[
i
] = 
BLOCK
;

107 
n_Áûed_√ighb‹
++;

115 
n_Áûed_√ighb‹
 + 
n_edge_√ighb‹
 == 4)

117 
rouãr
[
cuºít_node
].
hó…h_°©us
 = 
TRAPPED
;

124 
i
=
LEFT
; i<=
DOWN
; i++)

127 
¬eighb‹
[
i
] =
EDGE
)

130 
n_Áûed_√ighb‹
 = 0;

131 
n_edge_√ighb‹
 = 0;

133 
j
=
LEFT
; j<
DOWN
; j++)

137 
i
 =
j
)

139 
¬eighb‹
[
j
] =
EDGE
)

141 
n_edge_√ighb‹
++;

148 
rouãr
[
¬eighb‹
[
j
]].
hó…h_°©us
 =
FAIL
 ||

149 
rouãr
[
cuºít_node
].
FA_lök_öfo
[
j
] =
FAIL
)

150 
n_Áûed_√ighb‹
++;

158 
n_edge_√ighb‹
)

161 
n_Áûed_√ighb‹
)

163 0:{
°©us
 = 
HEALTHY
; ;}

164 1:{
°©us
 = 
GOOD
; ;}

165 2:{
°©us
 = 
BAD
; ;}

166 3:{
°©us
 = 
WORSE
; ;}

172 
n_Áûed_√ighb‹
)

174 0:{
°©us
 = 
GOOD
; ;}

175 1:{
°©us
 = 
BAD
; ;}

176 2:{
°©us
 = 
WORSE
; ;}

181 
n_Áûed_√ighb‹
)

183 0:{
°©us
 = 
BAD
; ;}

184 1:{
°©us
 = 
WORSE
; ;}

189 
rouãr
[
cuºít_node
].
FA_rouã_öfo
[
i
] = 
°©us
;

195 
i
=
LEFT
; i<=
DOWN
; i++)

196 
rouãr
[
cuºít_node
].
FA_rouã_öfo
[
i
] = 
FAIL
;

200 
	}
}

202 
	$öô_FA_√ighb‹_öfo
()

204 
row
, 
cﬁ
;

205 
cuºít_node
;

206 
¬eighb‹
[4];

207 
i
;

208 
°©us
;

210 
row
=0;Ñow < 
NUM_ROWS
;Ñow++)

212 
cﬁ
=0; cﬁ < 
NUM_COLS
; col++)

214 
cuºít_node
 = (
row
 * 
NUM_COLS
Ë+ 
cﬁ
;

218 
°©us
 = 
rouãr
[
cuºít_node
].
hó…h_°©us
;

219  
°©us
 =
FAIL
 || sètu†=
TRAPPED
 )

221 
i
=
LEFT
; i<=
DOWN
; i++)

222 
rouãr
[
cuºít_node
].
FA_√ighb‹_öfo
[
i
] = 
FAIL
;

227 
i
=
LEFT
; i<=
DOWN
; i++)

228 
¬eighb‹
[
i
] = 
√ighb‹
[
cuºít_node
][i];

230 
i
=
LEFT
; i<=
DOWN
; i++)

238 
°©us
 = 
rouãr
[
¬eighb‹
[
i
]].
hó…h_°©us
;

239  
¬eighb‹
[
i
] =
EDGE
 || 
°©us
 =
FAIL
 || sètu†=
TRAPPED
 ||

240 
rouãr
[
cuºít_node
].
FA_lök_öfo
[
i
] =
FAIL
)

241 
rouãr
[
cuºít_node
].
FA_√ighb‹_öfo
[
i
] = 
FAIL
;

256 
rouãr
[
cuºít_node
].
FA_√ighb‹_öfo
[
i
] =Ñouãr[
¬eighb‹
[i]].
FA_rouã_öfo
[(i+2)%4];

261 
	}
}

263 
	$öô_FA_dúe˘i⁄_öfo
()

265 
row
, 
cﬁ
;

266 
cuºít_node
;

267 
¬eighb‹
[4];

268 
i
,
j
;

269 
°©us
;

270 
rs
, 
ns
;

272 
row
=0;Ñow < 
NUM_ROWS
;Ñow++)

274 
cﬁ
=0; cﬁ < 
NUM_COLS
; col++)

276 
cuºít_node
 = (
row
 * 
NUM_COLS
Ë+ 
cﬁ
;

279 
i
=
LEFT
; i<=
DOWN
; i++)

280 
¬eighb‹
[
i
] = 
√ighb‹
[
cuºít_node
][i];

308 
i
=
LEFT
; i<=
DOWN
; i++)

311 
rs
 = 
rouãr
[
cuºít_node
].
FA_√ighb‹_öfo
[
i
];

312 
j
=
LEFT
; j<=
DOWN
; j++)

315 
rouãr
[
cuºít_node
].
FA_blocked_öfo
[
j
] =
BLOCK
)

316 
°©us
 = 3;

320 
ns
 = 
rouãr
[
¬eighb‹
[
i
]].
FA_√ighb‹_öfo
[
j
];

321  
rs
 =
HEALTHY
 && 
ns
 =HEALTHY ) 
°©us
 = 0;

322  
rs
 =
GOOD
 && 
ns
 =
HEALTHY
 ) 
°©us
 = 0;

323  
rs
 =
BAD
 && 
ns
 =
HEALTHY
 ) 
°©us
 = 0;

324  
rs
 =
HEALTHY
 && 
ns
 =
GOOD
 ) 
°©us
 = 1;

325  
rs
 =
GOOD
 && 
ns
 =GOOD ) 
°©us
 = 1;

326  
rs
 =
BAD
 && 
ns
 =
GOOD
 ) 
°©us
 = 1;

327  
rs
 =
HEALTHY
 && 
ns
 =
BAD
 ) 
°©us
 = 2;

328  
rs
 =
GOOD
 && 
ns
 =
BAD
 ) 
°©us
 = 2;

329  
rs
 =
BAD
 && 
ns
 =BAD ) 
°©us
 = 2;

330 
°©us
 = 3;

351 
rouãr
[
cuºít_node
].
FA_dúe˘i⁄_öfo
[
i
][
j
] = 
°©us
;

356 
	}
}

359 
	$de°_ö_°øight
(
dú
, 
˙
, 
pc
, 
vc
, 
dx
, 
dy
, *
de°_pc
, *
de°_vc
, *
is_blocked
, *
¸edô
)

361 
rouãr_t
 *
cur_rouãr
 = &(
rouãr
[
˙
]);

362 
rs
;

363 
i
, 
p1
, 
p2
;

364 
DN1
 = (
dú
+3)%4;

365 
DN2
 = (
dú
+1)%4;

366 
bdú
 = (
dú
+2)%4;

367 
IN1
[3] = {
dú
, 
DN1
, 
bdú
};

368 
IN2
[3] = {
dú
, 
DN2
, 
bdú
};

369 
dú_avaû
[4];

376 
is_√xt_node_de°
 = (

377 (
dx
 = 1 && 
dy
 = 0 && 
dú
 =
EAST
) ||

378 (
dx
 =-1 && 
dy
 = 0 && 
dú
 =
WEST
) ||

379 (
dx
 = 0 && 
dy
 = 1 && 
dú
 =
NORTH
) ||

380 (
dx
 = 0 && 
dy
 =-1 && 
dú
 =
SOUTH
)

381 )? 
YES
:
NO
;

383 
i
=
LEFT
; i<
SOUTH
; i++)

384 
dú_avaû
[
i
] = 
NO
;

387 
rs
 = 
rouãr
[
˙
].
FA_√ighb‹_öfo
[
dú
];

389  (
rs
 !
FAIL
 &&Ñ†!
WORSE
Ë|| (r†=WORSE && 
is_√xt_node_de°
 =
YES
) )

391 { 
dú_avaû
[
dú
] = 
YES
; }

398 
i
=0; i<3; i++)

401 
p1
 = 
rouãr
[
˙
].
FA_dúe˘i⁄_öfo
[
DN1
][
IN1
[
i
]];

402 
p2
 = 
rouãr
[
˙
].
FA_dúe˘i⁄_öfo
[
DN2
][
IN2
[
i
]];

406 
p1
 =3 && 
p2
 == 3)

411 
p1
 < 
p2
Ë { 
dú_avaû
[
DN1
] = 
YES
; ;}

414 
p1
 > 
p2
Ë{ 
dú_avaû
[
DN2
] = 
YES
; ;}

424 { 
dú_avaû
[(
¸edô
[
DN1
] >¸edô[
DN2
])? DN1 : DN2] = 
YES
; ;}

428 
dú_avaû
[
dú
] =
YES
 ) *
de°_pc
 = dir;

429 
dú_avaû
[
DN1
] =
YES
Ë*
de°_pc
 = DN1;

430 
dú_avaû
[
DN2
] =
YES
Ë*
de°_pc
 = DN2;

445 
rs
 = 
rouãr
[
˙
].
FA_√ighb‹_öfo
[
bdú
];

446 
bdú
 !
pc
 && 
rs
 !
FAIL
 &&Ñ†!
WORSE
Ë*
de°_pc
 = bdir;

447 *
de°_pc
 = 
pc
;

451 
	}
}

453 
	$de°_ö_düg⁄Æ
(
DN1
, 
DN2
, 
˙
, 
pc
, 
vc
, 
dx
, 
dy
, *
de°_pc
, *
de°_vc
, *
is_blocked
, *
¸edô
)

455 
°age
;

456 
node
 = 
˙
;

457 
r1
, 
r2
;

458 
i
, 
p1
, 
p2
, 
di°1
, 
di°2
;

459 
blocked1
, 
blocked2
;

460 
BDN1
 = (
DN1
+(
NUM_PC
-
NUM_NIC_PC
)/2) % (NUM_PC-NUM_NIC_PC);

461 
BDN2
 = (
DN2
+(
NUM_PC
-
NUM_NIC_PC
)/2) % (NUM_PC-NUM_NIC_PC);

462 
IN1
[2][3] = { {
DN2
, 
DN1
, 
BDN2
}, {DN2, 
BDN1
, BDN2}};

463 
IN2
[2][3] = { {
DN1
, 
DN2
, 
BDN1
}, {DN1, 
BDN2
, BDN1}};

464 
dú_avaû
[4];

466 
i
=
LEFT
; i<
SOUTH
; i++)

467 
dú_avaû
[
i
] = 
NO
;

469 
rouãr_t
 *
cur_rouãr
 = &(
rouãr
[
˙
]);

471 
°age
=0; stage<2; stage++)

473 
i
=0; i<3; i++)

475 
p1
 = 
rouãr
[
˙
].
FA_dúe˘i⁄_öfo
[
DN1
][
IN1
[
°age
][
i
]];

476 
p2
 = 
rouãr
[
˙
].
FA_dúe˘i⁄_öfo
[
DN2
][
IN2
[
°age
][
i
]];

480 
p1
 =3 && 
p2
 == 3)

485 
p1
 < 
p2
Ë { 
dú_avaû
[
DN1
] = 
YES
; ;}

489 
p1
 > 
p2
Ë{ 
dú_avaû
[
DN2
] = 
YES
; ;}

500 
¸edô
[
DN1
] > cªdô[
DN2
]Ë{ 
dú_avaû
[DN1] = 
YES
; }

502 
¸edô
[
DN1
] < cªdô[
DN2
]Ë{ 
dú_avaû
[DN2] = 
YES
; }

505 
DN1
)

507 
WEST
 : {
di°1
 = -
dx
; ;}

508 
NORTH
: {
di°1
 = 
dy
; ;}

509 
EAST
 : {
di°1
 = 
dx
; ;}

510 
SOUTH
: {
di°1
 = -
dy
; ;}

512 
DN2
)

514 
WEST
 : {
di°2
 = -
dx
; ;}

515 
NORTH
: {
di°2
 = 
dy
; ;}

516 
EAST
 : {
di°2
 = 
dx
; ;}

517 
SOUTH
: {
di°2
 = -
dy
; ;}

522 
°age
 == 0)

524 
dú_avaû
[(
di°1
 >
di°2
)? 
DN1
:
DN2
] = 
YES
;

529 
dú_avaû
[(
di°1
 <
di°2
)? 
DN1
:
DN2
] = 
YES
;

540 
dú_avaû
[
DN1
] =
YES
 ) {*
de°_pc
 = DN1; ;}

541 
dú_avaû
[
DN2
] =
YES
 ) {*
de°_pc
 = DN2; ;}

544 
DN1
 = 
BDN1
; 
DN2
 = 
BDN2
;

550 *
de°_pc
 = 
pc
;

552 
	}
}

554 
	$¥oximôy_aw¨e_rouã
(
˙
, 
dn
, 
pc
, 
vc
, *
de°_pc
, *
de°_vc
)

556 
cur_x
, 
cur_y
, 
de°_x
, 
de°_y
, 
dx
, 
dy
;

557 
¸edô
[
MAX_PC
-
MAX_NIC_PC
], 
be°_vc
[MAX_PC-MAX_NIC_PC];

558 
is_blocked
[4];

559 
xdú
, 
ydú
;

562 
	`ˇlc_co‹d
(
˙
, &
cur_x
, &
cur_y
);

563 
	`ˇlc_co‹d
(
dn
, &
de°_x
, &
de°_y
);

564 
dx
 = 
de°_x
 - 
cur_x
;

565 
dy
 = 
de°_y
 - 
cur_y
;

573 
	`gë_be°_¸edô
(
˙
, 
¸edô
, 
be°_vc
);

575 
	`gë_blocked
(
˙
, 
is_blocked
);

583 
t›ﬁogy
 =
MESH
)

585 
xdú
 = (
dx
 > 0)? 
RIGHT
 : 
LEFT
; 
ydú
 = (
dy
 > 0)? 
UP
 : 
DOWN
;

587 
vc
 =0 && (
dx
 !=0 || 
dy
 !=0))

589 *
de°_pc
 = (
dx
 !0)? 
xdú
 : 
ydú
;

590 *
de°_vc
 = 
vc
;

594 
t›ﬁogy
 =
TORUS
)

596 
vc
 < 2)

598 *
de°_pc
 = (
dx
 !0)? 
xdú
 : 
ydú
;

599 *
de°_vc
 = 
vc
;

608 
dx
 =0 && 
dy
 == 0)

609 *
de°_pc
 = 
THIS
;

612 
dx
 =0 && 
dy
 > 0Ë 
	`de°_ö_°øight
(
NORTH
, 
˙
, 
pc
, 
vc
, dx, dy, 
de°_pc
, 
de°_vc
, 
is_blocked
, 
¸edô
);

613 
dx
 > 0 && 
dy
 > 0) 
	`de°_ö_düg⁄Æ
(
NORTH
, 
EAST
, 
˙
, 
pc
, 
vc
, dx, dy, 
de°_pc
, 
de°_vc
, 
is_blocked
, 
¸edô
);

614 
dx
 > 0 && 
dy
 =0) 
	`de°_ö_°øight
(
EAST
, 
˙
, 
pc
, 
vc
, dx, dy, 
de°_pc
, 
de°_vc
, 
is_blocked
, 
¸edô
);

615 
dx
 > 0 && 
dy
 < 0) 
	`de°_ö_düg⁄Æ
(
EAST
, 
SOUTH
, 
˙
, 
pc
, 
vc
, dx, dy, 
de°_pc
, 
de°_vc
, 
is_blocked
, 
¸edô
);

616 
dx
 =0 && 
dy
 < 0) 
	`de°_ö_°øight
(
SOUTH
, 
˙
, 
pc
, 
vc
, dx, dy, 
de°_pc
, 
de°_vc
, 
is_blocked
, 
¸edô
);

617 
dx
 < 0 && 
dy
 < 0) 
	`de°_ö_düg⁄Æ
(
SOUTH
, 
WEST
, 
˙
, 
pc
, 
vc
, dx, dy, 
de°_pc
, 
de°_vc
, 
is_blocked
, 
¸edô
);

618 
dx
 < 0 && 
dy
 =0) 
	`de°_ö_°øight
(
WEST
, 
˙
, 
pc
, 
vc
, dx, dy, 
de°_pc
, 
de°_vc
, 
is_blocked
, 
¸edô
);

619 
	`de°_ö_düg⁄Æ
(
WEST
, 
NORTH
, 
˙
, 
pc
, 
vc
, 
dx
, 
dy
, 
de°_pc
, 
de°_vc
, 
is_blocked
, 
¸edô
);

622 *
de°_vc
 = (
be°_vc
[*
de°_pc
] !-1)? be°_vc[*de°_pc] : 
vc
;

624 
	}
}

	@route_proximity_aware.h

48 #i‚de‡
_¥oximôy_aw¨e_rouãr_h


49  
	#_¥oximôy_aw¨e_rouãr_h


	)
51 
	~"rouãr.h
"

53  
	#NORTH_EAST
 0

	)
54  
	#SOUTH_EAST
 1

	)
55  
	#SOUTH_WEST
 2

	)
56  
	#NORTH_WEST
 3

	)
58  
	#WW
 0

	)
59  
	#WN
 1

	)
60  
	#WE
 2

	)
61  
	#WS
 3

	)
63  
	#NW
 4

	)
64  
	#NN
 5

	)
65  
	#NE
 6

	)
66  
	#NS
 7

	)
68  
	#EW
 8

	)
69  
	#EN
 9

	)
70  
	#EE
 10

	)
71  
	#ES
 11

	)
73  
	#SW
 12

	)
74  
	#SN
 13

	)
75  
	#SE
 14

	)
76  
	#SS
 15

	)
78 
öô_FA_rouã_öfo
();

79 
öô_FA_√ighb‹_öfo
();

80 
öô_FA_dúe˘i⁄_öfo
();

82 
de°_ö_°øight
(
dú
, 
˙
, 
pc
, 
vc
, 
dx
, 
dy
, *
de°_pc
, *
de°_vc
, *
is_blocked
, *
nbuf
);

83 
de°_ö_düg⁄Æ
(
dú1
, 
dú2
, 
˙
, 
pc
, 
vc
, 
dx
, 
dy
, *
de°_pc
, *
de°_vc
, *
is_blocked
, *
nbuf
);

84 
¥oximôy_aw¨e_rouã
(
˙
, 
dn
, 
pc
, 
vc
, *
de°_pc
, *
de°_vc
);

	@route_simple_ft.cpp

45 
	~<°dlib.h
>

46 
	~"maö.h
"

47 
	~"rouãr_comm⁄.h
"

48 
	~"rouã_sim∂e_·.h
"

49 
	~"sh¨ed.h
"

51 
	$de°_ö_°øight_·
(
dú
, 
˙
, 
pc
, 
vc
, 
dx
, 
dy
, *
de°_pc
, *
de°_vc
, *
is_blocked
, *
¸edô
)

53 
node
 = 
˙
;

54 
rouãr_t
 *
cur_rouãr
 = &(
rouãr
[
˙
]);

55 
rs
;

56 
i
, 
p1
, 
p2
;

57 
DN1
 = (
dú
+3)%4;

58 
DN2
 = (
dú
+1)%4;

59 
bdú
 = (
dú
+2)%4;

60 
IN1
[3] = {
dú
, 
DN1
, 
bdú
};

61 
IN2
[3] = {
dú
, 
DN2
, 
bdú
};

68 
is_√xt_node_de°
 = (

69 (
dx
 = 1 && 
dy
 = 0 && 
dú
 =
EAST
) ||

70 (
dx
 =-1 && 
dy
 = 0 && 
dú
 =
WEST
) ||

71 (
dx
 = 0 && 
dy
 = 1 && 
dú
 =
NORTH
) ||

72 (
dx
 = 0 && 
dy
 =-1 && 
dú
 =
SOUTH
)

73 )? 
YES
:
NO
;

76 
rs
 = (
√ighb‹
[
˙
][
dú
] =
EDGE
)? 
FAIL
: (
rouãr
[√ighb‹[˙][dú]].
hó…h_°©us
);

78 
rs
 !
FAIL
)

79 { *
de°_pc
 = 
dú
; ; }

87 
p1
 = (
√ighb‹
[
˙
][
DN1
] =
EDGE
)? 
FAIL
: (
rouãr
[√ighb‹[˙][DN1]].
hó…h_°©us
);

88 
p2
 = (
√ighb‹
[
˙
][
DN2
] =
EDGE
)? 
FAIL
: (
rouãr
[√ighb‹[˙][DN2]].
hó…h_°©us
);

91 
p1
 =
HEALTHY
 || 
p2
 == HEALTHY)

94 
p1
 =
HEALTHY
 && 
p2
 =
FAIL
Ë { *
de°_pc
 = 
DN1
; ; }

97 
p1
 =
FAIL
 && 
p2
 =
HEALTHY
Ë{ *
de°_pc
 = 
DN2
; ; }

106 { *
de°_pc
 = (
¸edô
[
DN1
] >¸edô[
DN2
])? DN1 : DN2; ; }

117 *
de°_pc
 = 
bdú
;

120 
	}
}

122 
	$de°_ö_düg⁄Æ_·
(
DN1
, 
DN2
, 
˙
, 
pc
, 
vc
, 
dx
, 
dy
, *
de°_pc
, *
de°_vc
, *
is_blocked
, *
¸edô
)

124 
°age
;

125 
node
 = 
˙
;

126 
r1
, 
r2
;

127 
i
, 
p1
, 
p2
, 
di°1
, 
di°2
;

128 
blocked1
, 
blocked2
;

129 
BDN1
 = (
DN1
+(
NUM_PC
-
NUM_NIC_PC
)/2) % (NUM_PC-NUM_NIC_PC);

130 
BDN2
 = (
DN2
+(
NUM_PC
-
NUM_NIC_PC
)/2) % (NUM_PC-NUM_NIC_PC);

131 
IN1
[2][3] = { {
DN2
, 
DN1
, 
BDN2
}, {DN2, 
BDN1
, BDN2}};

132 
IN2
[2][3] = { {
DN1
, 
DN2
, 
BDN1
}, {DN1, 
BDN2
, BDN1}};

134 
rouãr_t
 *
cur_rouãr
 = &(
rouãr
[
˙
]);

136 
°age
=0; stage<2; stage++)

138 
p1
 = (
√ighb‹
[
˙
][
DN1
] =
EDGE
)? 
FAIL
: (
rouãr
[√ighb‹[˙][DN1]].
hó…h_°©us
);

139 
p2
 = (
√ighb‹
[
˙
][
DN2
] =
EDGE
)? 
FAIL
: (
rouãr
[√ighb‹[˙][DN2]].
hó…h_°©us
);

142 
p1
 =
FAIL
 && 
p2
 == FAIL)

145 
DN1
 = 
BDN1
; 
DN2
 = 
BDN2
;

150 
p1
 =
HEALTHY
 && 
p2
 =
FAIL
Ë { *
de°_pc
 = 
DN1
; ; }

153 
p1
 =
FAIL
 && 
p2
 =
HEALTHY
Ë{ *
de°_pc
 = 
DN2
; ; }

163 
¸edô
[
DN1
] > cªdô[
DN2
]Ë*
de°_pc
 = DN1;

164 
¸edô
[
DN1
] < cªdô[
DN2
]Ë*
de°_pc
 = DN2;

167 
DN1
)

169 
WEST
 : {
di°1
 = -
dx
; ;}

170 
NORTH
: {
di°1
 = 
dy
; ;}

171 
EAST
 : {
di°1
 = 
dx
; ;}

172 
SOUTH
: {
di°1
 = -
dy
; ;}

174 
DN2
)

176 
WEST
 : {
di°2
 = -
dx
; ;}

177 
NORTH
: {
di°2
 = 
dy
; ;}

178 
EAST
 : {
di°2
 = 
dx
; ;}

179 
SOUTH
: {
di°2
 = -
dy
; ;}

184 
°age
 == 0)

185 *
de°_pc
 = (
di°1
 >
di°2
)? 
DN1
:
DN2
;

189 *
de°_pc
 = (
di°1
 <
di°2
)? 
DN1
:
DN2
;

196 
	}
}

198 
	$sim∂e_·_rouã
(
˙
, 
dn
, 
pc
, 
vc
, *
de°_pc
, *
de°_vc
)

200 
cur_x
, 
cur_y
, 
de°_x
, 
de°_y
, 
dx
, 
dy
;

201 
¸edô
[
MAX_PC
-
MAX_NIC_PC
], 
be°_vc
[MAX_PC-MAX_NIC_PC];

202 
is_blocked
[4];

203 
xdú
, 
ydú
;

206 
	`ˇlc_co‹d
(
˙
, &
cur_x
, &
cur_y
);

207 
	`ˇlc_co‹d
(
dn
, &
de°_x
, &
de°_y
);

208 
dx
 = 
de°_x
 - 
cur_x
;

209 
dy
 = 
de°_y
 - 
cur_y
;

217 
	`gë_be°_¸edô
(
˙
, 
¸edô
, 
be°_vc
);

219 
	`gë_blocked
(
˙
, 
is_blocked
);

251 
dx
 =0 && 
dy
 == 0)

252 *
de°_pc
 = 
THIS
;

255 
dx
 =0 && 
dy
 > 0Ë 
	`de°_ö_°øight_·
(
NORTH
, 
˙
, 
pc
, 
vc
, dx, dy, 
de°_pc
, 
de°_vc
, 
is_blocked
, 
¸edô
);

256 
dx
 > 0 && 
dy
 > 0) 
	`de°_ö_düg⁄Æ_·
(
NORTH
, 
EAST
, 
˙
, 
pc
, 
vc
, dx, dy, 
de°_pc
, 
de°_vc
, 
is_blocked
, 
¸edô
);

257 
dx
 > 0 && 
dy
 =0) 
	`de°_ö_°øight_·
(
EAST
, 
˙
, 
pc
, 
vc
, dx, dy, 
de°_pc
, 
de°_vc
, 
is_blocked
, 
¸edô
);

258 
dx
 > 0 && 
dy
 < 0) 
	`de°_ö_düg⁄Æ_·
(
EAST
, 
SOUTH
, 
˙
, 
pc
, 
vc
, dx, dy, 
de°_pc
, 
de°_vc
, 
is_blocked
, 
¸edô
);

259 
dx
 =0 && 
dy
 < 0) 
	`de°_ö_°øight_·
(
SOUTH
, 
˙
, 
pc
, 
vc
, dx, dy, 
de°_pc
, 
de°_vc
, 
is_blocked
, 
¸edô
);

260 
dx
 < 0 && 
dy
 < 0) 
	`de°_ö_düg⁄Æ_·
(
SOUTH
, 
WEST
, 
˙
, 
pc
, 
vc
, dx, dy, 
de°_pc
, 
de°_vc
, 
is_blocked
, 
¸edô
);

261 
dx
 < 0 && 
dy
 =0) 
	`de°_ö_°øight_·
(
WEST
, 
˙
, 
pc
, 
vc
, dx, dy, 
de°_pc
, 
de°_vc
, 
is_blocked
, 
¸edô
);

262 
	`de°_ö_düg⁄Æ_·
(
WEST
, 
NORTH
, 
˙
, 
pc
, 
vc
, 
dx
, 
dy
, 
de°_pc
, 
de°_vc
, 
is_blocked
, 
¸edô
);

265 *
de°_vc
 = (
be°_vc
[*
de°_pc
] !-1)? be°_vc[*de°_pc] : 
vc
;

266 
	}
}

	@route_simple_ft.h

48 #i‚de‡
_sim∂e_·_rouãr_h


49  
	#_sim∂e_·_rouãr_h


	)
51 
	~"rouãr.h
"

53 
de°_ö_°øight_·
(
dú
, 
˙
, 
pc
, 
vc
, 
dx
, 
dy
, *
de°_pc
, *
de°_vc
, *
is_blocked
, *
nbuf
);

54 
de°_ö_düg⁄Æ_·
(
dú1
, 
dú2
, 
˙
, 
pc
, 
vc
, 
dx
, 
dy
, *
de°_pc
, *
de°_vc
, *
is_blocked
, *
nbuf
);

55 
sim∂e_·_rouã
(
˙
, 
dn
, 
pc
, 
vc
, *
de°_pc
, *
de°_vc
);

	@route_west_first.cpp

46 
	~"maö.h
"

47 
	~"rouãr_comm⁄.h
"

48 
	~"rouã_we°_fú°.h
"

49 
	~"sh¨ed.h
"

51 
	$we°_fú°_rouã
(
˙
, 
dn
, 
pc
, 
vc
, *
de°_pc
, *
de°_vc
)

54 
¸edô
[
MAX_PC
-
MAX_NIC_PC
], 
be°_vc
[MAX_PC-MAX_NIC_PC];

55 
is_blocked
[4];

56 
cx
, 
cy
, 
dx
, 
dy
, 
hx
, 
hy
;

57 
xdú
, 
ydú
, 
xdi°
, 
ydi°
, 
cur_dú
;

60 
	`ˇlc_co‹d
(
˙
, &
cx
, &
cy
);

61 
	`ˇlc_co‹d
(
dn
, &
dx
, &
dy
);

62 
hx
 = 
NUM_COLS
 / 2; 
hy
 = 
NUM_ROWS
 / 2;

63 
	`gë_be°_¸edô
(
˙
, 
¸edô
, 
be°_vc
);

64 
	`gë_blocked
(
˙
, 
is_blocked
);

65 
cur_dú
 = -1;

68 
t›ﬁogy
 =
MESH
)

70 
xdú
 = (
dx
 > 
cx
)? 
RIGHT
 : 
LEFT
; 
ydú
 = (
dy
 > 
cy
)? 
UP
 : 
DOWN
;

71 
xdi°
 = (
dx
 > 
cx
)? dx-cx : cx-dx; 
ydi°
 = (
dy
 > 
cy
)? dy-cy : cy-dy;

73 
t›ﬁogy
 =
TORUS
)

75 
xdú
 = (
dx
 > 
cx
)? ((dx-cx <
hx
)? 
RIGHT
 : 
LEFT
) : ((cx-dx< hx)? LEFT : RIGHT);

76 
ydú
 = (
dy
 > 
cy
)? ((dy-cy <
hy
)? 
UP
 : 
DOWN
) : ((cy-dy< hy)? DOWN : UP );

77 
xdi°
 = (
dx
 > 
cx
)? ((dx-cx <
hx
)? dx-cx : 
NUM_COLS
-(dx-cx)) : ((cx-dx< hx)? cx-dx : NUM_COLS-(cx-dx) );

78 
ydi°
 = (
dy
 > 
cy
)? ((dy-cy <
hy
)? dy-cy : 
NUM_COLS
-(dy-cy)) : ((cy-dy< hy)? cy-dy : NUM_COLS-(cy-dy) );

83 
dn
 =
˙
Ë{ *
de°_pc
 = 
THIS
; *
de°_vc
 = 
vc
; ; }

85 
xdú
 =
LEFT
 && 
xdi°
 > 0Ë{ *
de°_pc
 = LEFT; *
de°_vc
 = 
vc
; ; }

86 
ydi°
 =0Ë { *
de°_pc
 = 
RIGHT
; *
de°_vc
 = 
vc
; ; }

87 
xdi°
 =0Ë { *
de°_pc
 = 
ydú
; *
de°_vc
 = 
vc
; ; }

90 
xdi°
 > 
ydi°
)

92 
¸edô
[
xdú
] > 0Ë 
cur_dú
 = xdir;

93 
¸edô
[
ydú
] > 0Ë
cur_dú
 = ydir;

94 
cur_dú
 = 
xdú
;

96 
xdi°
 < 
ydi°
)

98 
¸edô
[
ydú
] > 0Ë 
cur_dú
 = ydir;

99 
¸edô
[
xdú
] > 0Ë
cur_dú
 = xdir;

100 
cur_dú
 = 
ydú
;

103 
cur_dú
 = (
¸edô
[
xdú
] >¸edô[
ydú
])? xdir:ydir;

105 *
de°_pc
 = 
cur_dú
;

106 *
de°_vc
 = 
vc
;

110 
	}
}

	@route_west_first.h

48 #i‚de‡
_we°_fú°_rouãr_h


49  
	#_we°_fú°_rouãr_h


	)
51 
	~"rouãr.h
"

53 
we°_fú°_rouã
(
˙
, 
dn
, 
pc
, 
vc
, *
de°_pc
, *
de°_vc
);

	@router.cpp

46 
	~<°dio.h
>

47 
	~<°dlib.h
>

48 
	~<°rög.h
>

49 
	~"maö.h
"

50 
	~"nic.h
"

51 
	~"lök.h
"

52 
	~"rouãr.h
"

53 
	~"rouãr_comm⁄.h
"

54 
	~"rouã_ad≠tive.h
"

55 
	~"rouã_¥oximôy_aw¨e.h
"

56 
	~"rouã_sim∂e_·.h
"

57 
	~"sh¨ed.h
"

59 
	$öô_¨øy2
(
dim1
, 
dim2
, 
d1
, 
d2
, *
¨r
)

61 
i
,
j
;

62 
i
 = 0; i< 
d1
; i++)

63 
j
 = 0; j< 
d2
; j++)

64 *(
¨r
 + 
i
*
dim2
 + 
j
) = 0;

65 
	}
}

67 
	$öô_¨øy3
(
dim1
, 
dim2
, 
dim3
, 
d1
, 
d2
, 
d3
, *
¨r
)

69 
i
,
j
,
k
;

70 
i
 = 0; i< 
d1
; i++)

71 
j
 = 0; j< 
d2
; j++)

72 
k
 = 0; k< 
d3
; k++)

73 *(
¨r
 + 
i
*
dim2
*
dim3
 + 
j
*dim3 + 
k
) = 0;

74 
	}
}

76 
	$öô_¨øy4
(
dim1
, 
dim2
, 
dim3
, 
dim4
, 
d1
, 
d2
, 
d3
, 
d4
, *
¨r
)

78 
i
,
j
,
k
,
l
;

79 
i
 = 0; i< 
d1
; i++)

80 
j
 = 0; j< 
d2
; j++)

81 
k
 = 0; k< 
d3
; k++)

82 
l
 = 0;Ü< 
d4
;Ü++)

83 *(
¨r
 + 
i
*
dim2
*
dim3
*
dim4
 + 
j
*dim3*dim4 + 
k
*dim4 + 
l
) = 0;

84 
	}
}

86 
	$¥öt_¨øy3
(
dim1
, 
dim2
, 
dim3
, *
¨r
)

88 
i
 = 0; i< 
dim1
; i++)

89 
j
 = 0; j< 
dim2
; j++)

91 
k
 = 0; k< 
dim3
; k++)

92 
	`¥ötf
("%d ", *(
¨r
 + 
i
*
dim2
*
dim3
 + 
j
*dim3 + 
k
));

93 
	`¥ötf
("\n");

95 
	}
}

98 
	$°age1
()

101 
node
, 
pc
, 
vc
;

102 
de°_node
, 
de°_pc
, 
de°_vc
;

103 
buf
[5];

104 
chk_îr‹
=0;

105 
dñay
;

106 
œ°_u£d_vc
[
MAX_NODES
][
MAX_PC
-
MAX_NIC_PC
] = {0};

108 
Êô_t
 *
Êô_±r
;

110 
node
=0;Çode<
NUM_NODES
;Çode++)

112 
rouãr
[
node
].
hó…h_°©us
 =
FAIL
 ||Ñouãr[node].hó…h_°©u†=
TRAPPED
)

115 
pc
=0;Öc<
NUM_PC
;Öc++)

117 
vc
=0; vc<
NUM_VC
; vc++)

119  
vc_öfo
[
node
][
pc
][
vc
].
vc_°©
 =
VC_IDLE
 &&

120 
	`msg_˙t
(&(
rouãr_öput_buf
[
node
][
pc
][
vc
])) > 0 )

123 
vîbo£
 =
YES
)

125 
	`¥ötf
("[%d][%d][%d]Ñöbu‡:%d vc_°©:%†f‹ cuºíànode\n",
node
,
pc
,
vc
,
	`msg_˙t
(&(
rouãr_öput_buf
[node][pc][vc])),

126 
vc_°©e
[
vc_öfo
[
node
][
pc
][
vc
].
vc_°©
]);

127 
	`¥öt_mbox
(&(
rouãr_öput_buf
[
node
][
pc
][
vc
]));

130 
	`ªad_Êô
(&(
rouãr_öput_buf
[
node
][
pc
][
vc
]), &
Êô_±r
);

214 
sql
 =
YES
)

215 
	`Ârötf
(
fsql
, "INSERT INTO FLOW VALUES(0, %d,%d,%d,%d,%d,%d);\n",

216 
Êô_±r
->
Êô_num
, 
node
, 
pc
, 
vc
, 1, 
sim_˛ock
);

218 
vîbo£
 =
YES
)

220 
	`¥ötf
("Dec/RT [%d][%d][%d]-Êô:%d(%sË© %Œd\n", 
node
, 
pc
, 
vc
, 
Êô_±r
->
Êô_num
,

221 (
HEAD_FLIT
)?"HEAD":(
TAIL_FLIT
)?"TAIL":"MIDDLE", ()
sim_˛ock
);

222 
	`fÊush
(
°dout
);

226 
HEAD_FLIT
)

229 
de°_node
 = 
Êô_±r
->
d©a
.
dnode
;

233 
p_routög
 +
PD_ROUTER
;

234 
routög_Æg‹ôhm
)

240 
DT
 : {

241 
mö_ønge
, 
max_ønge
, 
tmp_max
, 
i
, 
Êag
, 
√xt_node
, 
√xt_pc
;

243 
	`dëîmöi°ic_rouã
(
node
, 
de°_node
, 
pc
, 
vc
, &
de°_pc
, &
de°_vc
, 
Êô_±r
);

247 
t›ﬁogy
 =
TORUS
)

256 –((
de°_pc
 =
LEFT
 || de°_p¯=
RIGHT
Ë&& 
Êô_±r
->
is_sx_Àss_th™_dx
 =
YES
) ||

257 ((
de°_pc
 =
UP
 || de°_p¯=
DOWN
 ) && 
Êô_±r
->
is_sy_Àss_th™_dy
 =
YES
) )

258 { 
mö_ønge
 = (
NUM_VC
/2); 
max_ønge
 = NUM_VC; }

260 –((
de°_pc
 =
LEFT
 || de°_p¯=
RIGHT
Ë&& 
Êô_±r
->
is_sx_Àss_th™_dx
 =
NO
 ) ||

261 ((
de°_pc
 =
UP
 || de°_p¯=
DOWN
 ) && 
Êô_±r
->
is_sy_Àss_th™_dy
 =
NO
 ) )

262 { 
mö_ønge
 = 0; 
max_ønge
 = (
NUM_VC
/2); }

263 
de°_pc
 =
THIS
)

264 { 
mö_ønge
 = 0; 
max_ønge
 = 
NUM_VC
; }

269 #i‡
VC_SET


270 
Êô_±r
->
msgty≥
 =
CONTROL
)

271 { 
mö_ønge
 = 0; 
max_ønge
 = 
NUM_VC
/2;}

272 
Êô_±r
->
msgty≥
 =
DATA
)

273 { 
mö_ønge
 = 
NUM_VC
/2; 
max_ønge
 = NUM_VC;}

275 { 
mö_ønge
 = 0; 
max_ønge
 = 
NUM_VC
;}

280 
hybrid_t›ﬁogy
 =
YES
 && 
node
 >
NUM_NODES
/2 && 
Êô_±r
->
d©a
.
dnode
 ==Çode - NUM_NODES/2)

281 {
mö_ønge
 = 0; 
max_ønge
 = 
NUM_VC
/2;}

287 
hybrid_t›ﬁogy
 =
YES
 && 
node
 >
NUM_NODES
/2 && 
Êô_±r
->
d©a
.
dnode
 !=Çode - NUM_NODES/2)

288 {
mö_ønge
 = 
NUM_VC
/2; 
max_ønge
 = NUM_VC;}

295 
hybrid_t›ﬁogy
 =
YES
 && 
node
 < 
NUM_NODES
/2 && 
de°_pc
 =
NUM_PC
-1)

297 {
mö_ønge
 = 0; 
max_ønge
 = 
NUM_VC
;}

300 
de°_pc
 < 
NUM_PC
 - 
NUM_NIC_PC
 ||

302 (
hybrid_t›ﬁogy
 =
YES
 && 
node
 >
NUM_NODES
/2 && 
Êô_±r
->
d©a
.
dnode
 !nodê- NUM_NODES/2 && 
de°_pc
 =
NUM_PC
 - 1))

307 
tmp_max
 = -1;

308 
Êag
 = -1;

309 
√xt_node
 = 
√ighb‹
[
node
][
de°_pc
];

311 
√xt_pc
 = 
√ighb‹_pc
[
node
][
pc
];

313 
vc_ödex
=1; vc_ödex<=
NUM_VC
; vc_index++)

316 
i
 = (
œ°_u£d_vc
[
node
][
pc
] + 
vc_ödex
Ë% 
NUM_VC
;

317  
is_ªady
[
√xt_node
][
√xt_pc
][
i
].
röbuf
 > 
tmp_max
 &&

318 
is_ªady
[
node
][
pc
][
vc
].
xb¨ö
 =
YES
 &&

319 
i
 >
mö_ønge
 && i < 
max_ønge
)

321 
tmp_max
 = 
is_ªady
[
√xt_node
][
√xt_pc
][
i
].
röbuf
;

322 
de°_vc
 = 
i
;

323 
Êag
 = 1;

327 
Êag
 == -1)

328 
de°_vc
 = 
mö_ønge
 + ()–()((
max_ønge
 - mö_øngê- 1Ë* 
	`ønd
()Ë/ ()(
RAND_MAX
));

329 
œ°_u£d_vc
[
node
][
pc
] = 
de°_vc
;

334 
hybrid_t›ﬁogy
 =
YES
 && 
node
 >
NUM_NODES
/2 && 
Êô_±r
->
d©a
.
dnode
 ==Çode - NUM_NODES/2)

335 
de°_vc
 = 
mö_ønge
 + ()–()((
max_ønge
 - mö_øngê- 1Ë* 
	`ønd
()Ë/ ()(
RAND_MAX
));

341 
hybrid_t›ﬁogy
 =
YES
 && 
node
 < 
NUM_NODES
/2 && 
de°_pc
 =
NUM_PC
-1)

342 
de°_vc
 = 
mö_ønge
 + ()–()((
max_ønge
 - mö_øngê- 1Ë* 
	`ønd
()Ë/ ()(
RAND_MAX
));

344 
vîbo£
 =
YES
)

345 
hybrid_t›ﬁogy
 =
YES
 && 
node
 >
NUM_NODES
/2 && 
Êô_±r
->
d©a
.
dnode
 =nodê- NUM_NODES/2 && 
de°_pc
 =
NUM_PC
 - 1)

346 
	`¥ötf
("Thi†i†®loˇ»Êô:%d vc:%d should bêzîo!\n",
Êô_±r
->
Êô_num
,
de°_vc
);

351 
WF
 : {

353 
	`we°_fú°_rouã
(
node
, 
de°_node
, 
pc
, 
vc
, &
de°_pc
, &
de°_vc
);

357 
AD
 : {

365  (
sim_˛ock
 - 
Êô_±r
->
íåy_time
Ë% 
ADAP_THRES
 == 0)

367 
t›ﬁogy
 =
MESH
)

368 
	`ad≠tive_rouã
(
node
, 
de°_node
, 
pc
, 0, &
de°_pc
, &
de°_vc
);

370 
t›ﬁogy
 =
TORUS
)

372 
sx
, 
sy
, 
dx
, 
dy
, 
tmp_vc
;

373 
	`ˇlc_co‹d
(
node
, &
sx
, &
sy
);

374 
	`ˇlc_co‹d
(
Êô_±r
->
d©a
.
dnode
, &
dx
, &
dy
);

375 
tmp_vc
 = (
sx
 =
dx
)? ((
Êô_±r
->
is_sy_Àss_th™_dy
 =
YES
)? 1:0) :

376 ((
Êô_±r
->
is_sx_Àss_th™_dx
 =
YES
)? 1:0);

377 
	`ad≠tive_rouã
(
node
, 
de°_node
, 
pc
, 
tmp_vc
, &
de°_pc
, &
de°_vc
);

385 
t›ﬁogy
 =
MESH
)

386 
	`ad≠tive_rouã
(
node
, 
de°_node
, 
pc
, 
vc
, &
de°_pc
, &
de°_vc
);

387 
t›ﬁogy
 =
TORUS
)

389 
vc
 >= 2)

390 
	`ad≠tive_rouã
(
node
, 
de°_node
, 
pc
, 
vc
, &
de°_pc
, &
de°_vc
);

394 
cx
, 
cy
, 
dx
, 
dy
, 
tmp_vc
;

395 
	`ˇlc_co‹d
(
node
, &
cx
, &
cy
);

396 
	`ˇlc_co‹d
(
Êô_±r
->
d©a
.
dnode
, &
dx
, &
dy
);

397 
tmp_vc
 = (
cx
 =
dx
)? ((
Êô_±r
->
is_sy_Àss_th™_dy
 =
YES
)? 1:0Ë: 
vc
;

398 
	`ad≠tive_rouã
(
node
, 
de°_node
, 
pc
, 
tmp_vc
, &
de°_pc
, &
de°_vc
);

404 
PA
 : {

407  (
sim_˛ock
 - 
Êô_±r
->
íåy_time
Ë% 
ADAP_THRES
 == 0)

408 
	`¥oximôy_aw¨e_rouã
(
node
, 
de°_node
, 
pc
, 0, &
de°_pc
, &
de°_vc
);

410 
	`¥oximôy_aw¨e_rouã
(
node
, 
de°_node
, 
pc
, 
vc
, &
de°_pc
, &
de°_vc
);

413 
SF
 : {

416  (
sim_˛ock
 - 
Êô_±r
->
íåy_time
Ë% 
ADAP_THRES
 == 0)

417 
	`sim∂e_·_rouã
(
node
, 
de°_node
, 
pc
, 0, &
de°_pc
, &
de°_vc
);

419 
	`sim∂e_·_rouã
(
node
, 
de°_node
, 
pc
, 
vc
, &
de°_pc
, &
de°_vc
);

457 
vc_öfo
[
node
][
pc
][
vc
].
vc_°©
 = (
¨ch
 <2)? 
VC_ROUTING
 : 
VC_ROUTING_TMP
;

464 
vc_öfo
[
node
][
pc
][
vc
].
out_pc
=
de°_pc
;

465 
vc_öfo
[
node
][
pc
][
vc
].
out_vc
=
de°_vc
;

466 
vîbo£
 =
YES
)

468 
de°_pc
 < 
NUM_PC
-
NUM_NIC_PC
 || (
hybrid_t›ﬁogy
 =
YES
 && 
node
 >
NUM_NODES
/2 && dest_pc == NUM_PC - 1))

470 
	`¥ötf
("Dec/RT D⁄êf‹ [%d][%d][%d]-Êô:%d(%sËtÿde°Çode:%d de°Öc:%d de° vc:%dáà%Œd\n", 
node
, 
pc
, 
vc
, 
Êô_±r
->
Êô_num
,

471 (
HEAD_FLIT
)?"HEAD":(
TAIL_FLIT
)?"TAIL":"MIDDLE", 
√ighb‹
[
node
][
de°_pc
], de°_pc,
de°_vc
,()
sim_˛ock
);

472 
	`¥ötf
("[%d][%d][%d] \n",
√ighb‹
[
node
][
de°_pc
],
√ighb‹_pc
[node][de°_pc],
de°_vc
);

473 
	`¥öt_mbox
(&(
rouãr_öput_buf
[
√ighb‹
[
node
][
de°_pc
]][
√ighb‹_pc
[node][de°_pc]][
de°_vc
]));

476 
	`¥ötf
("Dec/RT D⁄êf‹ [%d][%d][%d]-Êô:%d(%sËtÿde°Çode:%d de°Öc:%d de° vc:%dáà%Œd\n", 
node
, 
pc
, 
vc
, 
Êô_±r
->
Êô_num
,

477 (
HEAD_FLIT
)?"HEAD":(
TAIL_FLIT
)?"TAIL":"MIDDLE", 
node
, 
de°_pc
,
de°_vc
,()
sim_˛ock
);

479 
	`fÊush
(
°dout
);

510 
	}
}

513 
	g√ed_°age1_¨b
[
MAX_NODES
][
MAX_PC
][
MAX_VC
]={0};

514 
	g√ed_°age2_¨b
[
MAX_NODES
][
MAX_PC
][
MAX_VC
]={0};

515 
	gVA_°age1_ªq
[
MAX_NODES
][
MAX_PC
][
MAX_VC
][MAX_VC]={0};

516 
	gVA_°age2_ªq
[
MAX_NODES
][
MAX_PC
][
MAX_VC
][MAX_PC*MAX_VC]={0};

519 
	$VA_°age
()

541 
node
, 
ö_pc
, 
ö_vc
, 
out_pc
, 
out_vc
, 
out_pc_ˇnd
[
MAX_PC
], 
out_vc_ˇnd
[MAX_PC];

542 
√xt_node
, 
√xt_pc
, 
i
, 
j
;

544 
VA_°age1_wö
[
MAX_NODES
][
MAX_PC
][
MAX_VC
][MAX_VC]={0};

545 
VA_°age2_wö
[
MAX_NODES
][
MAX_PC
][
MAX_VC
][MAX_PC*MAX_VC]={0};

547 
node
 = 0;

548 
≈c
;

549 
hybrid_t›ﬁogy
 =
YES
)

550 
≈c
 = 
	`max
(
num_pc
, 
c⁄˚¡øti⁄_degªe
 + 1);

552 
≈c
 = 
NUM_PC
;

554 
	`öô_¨øy3
(
MAX_NODES
,
MAX_PC
,
MAX_VC
,

555 
NUM_NODES
, 
≈c
, 
NUM_VC
,

556 &(
√ed_°age1_¨b
[0][0][0]));

557 
	`öô_¨øy3
(
MAX_NODES
,
MAX_PC
,
MAX_VC
,

558 
NUM_NODES
,
≈c
,
NUM_VC
,

559 &(
√ed_°age2_¨b
[0][0][0]));

560 
	`öô_¨øy4
(
MAX_NODES
,
MAX_PC
,
MAX_VC
,MAX_VC,

561 
NUM_NODES
,
≈c
,
NUM_VC
,NUM_VC,

562 &(
VA_°age1_ªq
[0][0][0][0]));

563 
	`öô_¨øy4
(
MAX_NODES
,
MAX_PC
,
MAX_VC
,MAX_PC*MAX_VC,

564 
NUM_NODES
,
≈c
,
NUM_VC
,
NUM_PC
*NUM_VC,

565 &(
VA_°age2_ªq
[0][0][0][0]));

567 
Êô_t
 *
Êô_±r
;

569 
RT_ty≥
 = 
R_V
;

570 
VA_ty≥1
 = 
RR
;

571 
VA_ty≥2
 = 
RR
;

573 
RT_ty≥
 =
R_V
)

578 
node
=0;Çode<
NUM_NODES
;Çode++)

579 
ö_pc
=0; in_pc<
NUM_PC
; in_pc++)

580 
ö_vc
=0; in_vc<
NUM_VC
; in_vc++)

581 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].
vc_°©
 =
VC_ROUTING
)

583 
out_pc
 = 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].out_pc;

584 
out_vc
 = 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].out_vc;

585 
VA_°age2_ªq
[
node
][
out_pc
][
out_vc
][
ö_pc
*
NUM_VC
+
ö_vc
] = 1;

586 
√ed_°age2_¨b
[
node
][
out_pc
][
out_vc
] = 1;

592 
node
=0;Çode<
NUM_NODES
;Çode++)

593 
out_pc
=0; out_pc<
NUM_PC
; out_pc++)

594 
out_vc
=0; out_vc<
NUM_VC
; out_vc++)

595 
√ed_°age2_¨b
[
node
][
out_pc
][
out_vc
] == 1)

597 
VA_ty≥2
 =
RR
)

598 
	`RR_¨bôî
 (
VA_°age2_ªq
[
node
][
out_pc
][
out_vc
],

599 
VA_°age2_wö
[
node
][
out_pc
][
out_vc
], 
NUM_PC
, 
NUM_VC
);

600 
VA_ty≥2
 =
LRU
)

601 
	`LRU_¨bôî
(
VA_°age2_ªq
[
node
][
out_pc
][
out_vc
],

602 
VA_°age2_wö
[
node
][
out_pc
][
out_vc
], 
NUM_PC
, 
NUM_VC
);

609 
hybrid_t›ﬁogy
 =
NO
)

611 
p_vc_¨b
 +
NUM_NODES
 * ( 
NUM_PC
*
NUM_VC
*
PD_V_1_ARB
 + NUM_PC*NUM_VC*
PD_PV_1_ARB
);

612 
p_vc_¨b
 +
NUM_NODES
 * ( 
NUM_PC
*
NUM_VC
*
PL_V_1_ARB
 + NUM_PC*NUM_VC*
PL_PV_1_ARB
);

616 
node
 = 0;

617 
p_vc_¨b
 +
NUM_NODES
/2 * ( 
NUM_PC
*
NUM_VC
*
PD_V_1_ARB
 + NUM_PC*NUM_VC*
PD_PV_1_ARB
);

618 
p_vc_¨b
 +
NUM_NODES
/2 * ( 
NUM_PC
*
NUM_VC
*
PL_V_1_ARB
 + NUM_PC*NUM_VC*
PL_PV_1_ARB
);

620 
p_vc_¨b
 +
NUM_NODES
/2 * ( 
c⁄˚¡øti⁄_degªe
*
NUM_VC
*
pd_v_1_bus


621 + 
c⁄˚¡øti⁄_degªe
*
NUM_VC
*
pd_pv_1_bus
);

626 
RT_ty≥
 =
R_P
)

631 
node
=0;Çode<
NUM_NODES
;Çode++)

632 
ö_pc
=0; in_pc<
NUM_PC
; in_pc++)

633 
ö_vc
=0; in_vc<
NUM_VC
; in_vc++)

634 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].
vc_°©
 =
VC_ROUTING
)

635 
i
=0; i<
NUM_VC
; i++)

637 
out_vc_ˇnd
[
i
] = 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].out_vc_cand[i];

639 
out_vc
 = 
out_vc_ˇnd
[
i
];

640 
out_pc
 = 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].out_pc;

641 
hybrid_t›ﬁogy
 =
YES
 && 
node
 >
NUM_NODES
/2)

643 
out_pc
 !
NUM_PC
 - 1)

645 
	`¥ötf
("hybrid_t›ﬁogyÅ›ﬁogy shouldÇŸ givêp¯nÿ%d\n",
out_pc
);

647 
	`ªad_Êô
(&(
rouãr_öput_buf
[
node
][
ö_pc
][
ö_vc
]), &
Êô_±r
);

648 
Êô_±r
->
d©a
.
dnode
 =
node
 - 
NUM_NODES
/2)

650 
is_ªady
[
node
][
out_pc
][
out_vc
].
nöbuf
 =
NO
)

652 
vîbo£
 =
YES
)

654 
	`¥ötf
("VA_NI_BNA[%d][%d][%d] -> [%d][%d][%d]\n", 
node
, 
ö_pc
, 
ö_vc
,

655 
node
, 
out_pc
, 
out_vc
);

656 
	`fÊush
(
°dout
);

666 
ªq_buff_¶Ÿs
;

668 
ªq_buff_¶Ÿs
 = 0;

669 
√xt_node
 = 
√ighb‹
[
node
][
out_pc
];

671 
√xt_pc
 = 
√ighb‹_pc
[
node
][
out_pc
];

672 
is_ªady
[
√xt_node
][
√xt_pc
][
out_vc
].
röbuf
 <
ªq_buff_¶Ÿs
)

674 
vîbo£
 =
YES
)

676 
	`¥ötf
("VA_RT_BNA[%d][%d][%d] -> [%d][%d][%d]\n", 
node
, 
ö_pc
, 
ö_vc
,

677 
node
, 
out_pc
, 
out_vc
);

678 
	`fÊush
(
°dout
);

679 
	`¥öt_mbox
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
out_vc
]));

688 
out_pc
 < 
NUM_PC
-
NUM_NIC_PC
)

690 
√xt_node
 = 
√ighb‹
[
node
][
out_pc
];

692 
√xt_pc
 = 
√ighb‹_pc
[
node
][
out_pc
];

693 
is_ªady
[
√xt_node
][
√xt_pc
][
out_vc
].
röbuf
 <= 0)

695 
vîbo£
 =
YES
)

697 
	`¥ötf
("VA_RT_BNA[%d][%d][%d] -> [%d][%d][%d]\n", 
node
, 
ö_pc
, 
ö_vc
,

698 
node
, 
out_pc
, 
out_vc
);

699 
	`¥öt_mbox
(&(
rouãr_öput_buf
[
node
][
out_pc
][
out_vc
]));

700 
	`fÊush
(
°dout
);

707 
is_ªady
[
node
][
out_pc
][
out_vc
].
nöbuf
 =
NO
)

709 
vîbo£
 =
YES
)

711 
	`¥ötf
("VA_NI_BNA[%d][%d][%d] -> [%d][%d][%d]\n", 
node
, 
ö_pc
, 
ö_vc
,

712 
node
, 
out_pc
, 
out_vc
);

713 
	`fÊush
(
°dout
);

720 
VA_°age1_ªq
[
node
][
ö_pc
][
ö_vc
][
out_vc_ˇnd
[
i
]] = 1;

721 
√ed_°age1_¨b
[
node
][
ö_pc
][
ö_vc
] = 1;

728 
node
=0;Çode<
NUM_NODES
;Çode++)

729 
ö_pc
=0; in_pc<
NUM_PC
; in_pc++)

730 
ö_vc
=0; in_vc<
NUM_VC
; in_vc++)

731 
√ed_°age1_¨b
[
node
][
ö_pc
][
ö_vc
] == 1)

733 
VA_ty≥1
 =
RR
)

734 
	`RR_¨bôî
 (
VA_°age1_ªq
[
node
][
ö_pc
][
ö_vc
],

735 
VA_°age1_wö
[
node
][
ö_pc
][
ö_vc
], 1, 
NUM_VC
);

736 
VA_ty≥1
 =
LRU
)

737 
	`LRU_¨bôî
(
VA_°age1_ªq
[
node
][
ö_pc
][
ö_vc
],

738 
VA_°age1_wö
[
node
][
ö_pc
][
ö_vc
], 1, 
NUM_VC
);

741 
i
=0; i<
NUM_VC
; i++)

742 
VA_°age1_ªq
[
node
][
ö_pc
][
ö_vc
][
i
] == 1)

743 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].
out_vc
 = 
i
;

749 
node
=0;Çode<
NUM_NODES
;Çode++)

750 
ö_pc
=0; in_pc<
NUM_PC
; in_pc++)

751 
ö_vc
=0; in_vc<
NUM_VC
; in_vc++)

752 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].
vc_°©
 =
VC_ROUTING
)

754 
out_pc
 = 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].out_pc;

755 
out_vc
 = 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].out_vc;

756 
VA_°age2_ªq
[
node
][
out_pc
][
out_vc
][
ö_pc
*
NUM_VC
+
ö_vc
] = 1;

757 
√ed_°age2_¨b
[
node
][
out_pc
][
out_vc
] = 1;

764 
node
=0;Çode<
NUM_NODES
;Çode++)

765 
out_pc
=0; out_pc<
NUM_PC
; out_pc++)

766 
out_vc
=0; out_vc<
NUM_VC
; out_vc++)

767 
√ed_°age2_¨b
[
node
][
out_pc
][
out_vc
] == 1)

769 
VA_ty≥2
 =
RR
)

770 
	`RR_¨bôî
 (
VA_°age2_ªq
[
node
][
out_pc
][
out_vc
],

771 
VA_°age2_wö
[
node
][
out_pc
][
out_vc
], 
NUM_PC
, 
NUM_VC
);

772 
VA_ty≥2
 =
LRU
)

773 
	`LRU_¨bôî
(
VA_°age2_ªq
[
node
][
out_pc
][
out_vc
],

774 
VA_°age2_wö
[
node
][
out_pc
][
out_vc
], 
NUM_PC
, 
NUM_VC
);

781 
node
=0;Çode<
NUM_NODES
;Çode++)

782 
out_pc
=0; out_pc<
NUM_PC
; out_pc++)

783 
out_vc
=0; out_vc<
NUM_VC
; out_vc++)

784 
i
=0; i<
NUM_PC
*
NUM_VC
; i++)

785 
VA_°age2_ªq
[
node
][
out_pc
][
out_vc
][
i
] == 1)

787 
ö_pc
 = 
i
 / 
NUM_VC
;

788 
ö_vc
 = 
i
 % 
NUM_VC
;

790 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].
vc_°©
 !
VC_ROUTING
)

793 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].
vc_°©
 = 
VC_VA_DONE_TMP
;

794 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].
out_pc
 = out_pc;

795 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].
out_vc
 = out_vc;

797 
vîbo£
 =
YES
)

799 
	`ªad_Êô
(&(
rouãr_öput_buf
[
node
][
ö_pc
][
ö_vc
]), &
Êô_±r
);

800 
	`¥ötf
("VA [%d][%d][%d]-Êô:%d(%sËtÿ[%d][%d][%d]\n", 
node
,

801 
ö_pc
, 
ö_vc
, 
Êô_±r
->
Êô_num
,

802 (
HEAD_FLIT
)? "HEAD" :

803 (
TAIL_FLIT
)? "TAIL" :"MIDDLE",

804 
node
, 
out_pc
, 
out_vc
);

806 
√xt_node
 = 
√ighb‹
[
node
][
out_pc
];

807 
√xt_pc
 = 
√ighb‹_pc
[
node
][
out_pc
];

808 
	`¥ötf
("röbu‡[%d][%d][%d] :%d\n",
√xt_node
,
√xt_pc
,
out_vc
,
is_ªady
[√xt_node][√xt_pc][out_vc].
röbuf
);

809 
	`¥öt_mbox
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
out_vc
]));

810 
	`fÊush
(
°dout
);

813 
	}
}

815 
	gSA_°age1_ªq
[
MAX_NODES
][
MAX_PC
][
MAX_VC
]={0};

816 
	gSA_°age2_ªq
[
MAX_NODES
][
MAX_PC
][MAX_PC]={0};

818 
	g√ed_°age1_SA_¨b
[
MAX_NODES
][
MAX_PC
]={0};

819 
	g√ed_°age2_SA_¨b
[
MAX_NODES
][
MAX_PC
]={0};

821 
	gSA_°age1_•ec_ªq
[
MAX_NODES
][
MAX_PC
][
MAX_VC
]={0};

822 
	gSA_°age2_•ec_ªq
[
MAX_NODES
][
MAX_PC
][MAX_PC]={0};

824 
	g√ed_°age1_•ec_¨b
[
MAX_NODES
][
MAX_PC
]={0};

825 
	g√ed_°age2_•ec_¨b
[
MAX_NODES
][
MAX_PC
]={0};

827 
	gSA_ªque°_èbÀ
[
MAX_NODES
][
MAX_PC
][
MAX_VC
]={0};

829 
	$SA_°age
()

842 
node
, 
ö_pc
, 
ö_vc
, 
out_pc
, 
out_vc
, 
√xt_node
, 
√xt_pc
, 
i
, 
j
;

843 
Êô_t
 *
Êô_±r
;

845 
node
 = 0;

846 
≈c
;

847 
hybrid_t›ﬁogy
 =
YES
)

848 
≈c
 = 
	`max
(
num_pc
, 
c⁄˚¡øti⁄_degªe
 + 1);

850 
≈c
 = 
NUM_PC
;

855 
SA_°age1_wö
[
MAX_NODES
][
MAX_PC
][
MAX_VC
]={0};

856 
SA_°age2_wö
[
MAX_NODES
][
MAX_PC
][MAX_PC]={0};

859 
	`öô_¨øy3
(
MAX_NODES
,
MAX_PC
,
MAX_VC
,

860 
NUM_NODES
,
≈c
,
NUM_VC
,

861 &(
SA_°age1_ªq
[0][0][0]));

863 
	`öô_¨øy3
(
MAX_NODES
,
MAX_PC
,MAX_PC,

864 
NUM_NODES
,
≈c
,
NUM_PC
,

865 &(
SA_°age2_ªq
[0][0][0]));

867 
	`öô_¨øy2
(
MAX_NODES
,
MAX_PC
,

868 
NUM_NODES
,
≈c
,

869 &(
√ed_°age1_SA_¨b
[0][0]));

871 
	`öô_¨øy2
(
MAX_NODES
,
MAX_PC
,

872 
NUM_NODES
,
≈c
,

873 &(
√ed_°age2_SA_¨b
[0][0]));

876 
SA_°age1_•ec_wö
[
MAX_NODES
][
MAX_PC
][
MAX_VC
]={0};

877 
SA_°age2_•ec_wö
[
MAX_NODES
][
MAX_PC
][MAX_PC]={0};

879 
	`öô_¨øy3
(
MAX_NODES
,
MAX_PC
,
MAX_VC
,

880 
NUM_NODES
,
≈c
,
NUM_VC
,

881 &(
SA_°age1_•ec_ªq
[0][0][0]));

883 
	`öô_¨øy3
(
MAX_NODES
,
MAX_PC
,MAX_PC,

884 
NUM_NODES
,
≈c
,
NUM_PC
,

885 &(
SA_°age2_•ec_ªq
[0][0][0]));

887 
	`öô_¨øy2
(
MAX_NODES
,
MAX_PC
,

888 
NUM_NODES
,
≈c
,

889 &(
√ed_°age1_•ec_¨b
[0][0]));

890 
	`öô_¨øy2
(
MAX_NODES
,
MAX_PC
,

891 
NUM_NODES
,
≈c
,

892 &(
√ed_°age2_•ec_¨b
[0][0]));

894 
ªque°_ty≥
, 
vc_°©
, 
msg_exi°
;

895 
is_ö_vc_u£d
 [
MAX_PC
], 
is_out_vc_u£d
[MAX_PC];

898 
SA_ty≥1
 = 
RR
;

899 
SA_ty≥2
 = 
RR
;

900 
∑th_ª£rved
;

910 
node
=0;Çode<
NUM_NODES
;Çode++)

911 
ö_pc
=0; in_pc<
NUM_PC
; in_pc++)

912 
ö_vc
=0; in_vc<
NUM_VC
; in_vc++)

914 
SA_ªque°_èbÀ
[
node
][
ö_pc
][
ö_vc
] = 0;

915 
ªque°_ty≥
 = 0;

916 
vc_°©
 = 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].vc_stat;

917 
msg_exi°
 = (
	`msg_˙t
(&(
rouãr_öput_buf
[
node
][
ö_pc
][
ö_vc
])Ë> 0)? 
YES
:
NO
;

918 
out_pc
 = 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].out_pc;

919 
out_vc
 = 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].out_vc;

921 
¨ch
 <= 3)

930  ((
vc_°©
 =
VC_VA_DONE_TMP
Ë|| (vc_°© =
VC_ROUTING
ËË&& 
msg_exi°
 =
YES
)

931 
ªque°_ty≥
 = 1;

935 
vc_°©
 =
VC_VA_DONE
 && 
msg_exi°
 =
YES
)

936 
ªque°_ty≥
 = 2;

939 (
xb¨_ö_‰ì
[
node
][
ö_pc
] =
NO
 || 
xb¨_out_‰ì
[node][
out_pc
] =NOË&& 
ªque°_ty≥
 > 0)

941 
vîbo£
 =
YES
)

943 
	`ªad_Êô
(&(
rouãr_öput_buf
[
node
][
ö_pc
][
ö_vc
]), &
Êô_±r
);

944 
	`¥ötf
("XBAR_NA[%d][%d][%d] -> [%d][%d][%d], flô:%d(%d)\n", 
node
, 
ö_pc
, 
ö_vc
,

945 
node
, 
out_pc
, 
out_vc
, 
Êô_±r
->
Êô_num
, 
sim_˛ock
-Êô_±r->
íåy_time
);

946 
	`fÊush
(
°dout
);

948 
ªque°_ty≥
 = 0;

952  
ªque°_ty≥
 > 0)

955 
	`ªad_Êô
(&(
rouãr_öput_buf
[
node
][
ö_pc
][
ö_vc
]), &
Êô_±r
);

956 
out_pc
 = 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].out_pc;

957 
out_vc
 = 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].out_vc;

966  (
out_pc
 < 
NUM_PC
-
NUM_NIC_PC
) &&

967 (
routög_Æg‹ôhm
 =
AD
) &&

968 ((
sim_˛ock
 - 
Êô_±r
->
íåy_time
Ë% 
ADAP_THRES
 == 0) &&

969 (
HEAD_FLIT
))

974 
de°_node
, 
de°_pc
, 
de°_vc
;

976 
de°_node
 = 
Êô_±r
->
d©a
.
dnode
;

977 
t›ﬁogy
 =
MESH
)

978 
	`ad≠tive_rouã
(
node
, 
de°_node
, 
ö_pc
, 0, &
de°_pc
, &
de°_vc
);

979 
t›ﬁogy
 =
TORUS
)

981 
sx
, 
sy
, 
dx
, 
dy
, 
tmp_vc
;

982 
	`ˇlc_co‹d
(
node
, &
sx
, &
sy
);

983 
	`ˇlc_co‹d
(
de°_node
, &
dx
, &
dy
);

984 
tmp_vc
 = (
sx
 =
dx
)? ((
Êô_±r
->
is_sy_Àss_th™_dy
 =
YES
)? 1:0) :

985 ((
Êô_±r
->
is_sx_Àss_th™_dx
 =
YES
)? 1:0);

986 
	`ad≠tive_rouã
(
node
, 
de°_node
, 
ö_pc
, 
tmp_vc
, &
de°_pc
, &
de°_vc
);

990 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].
vc_°©
 = 
VC_VA_DONE_TMP
;

991 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].
out_pc
 = 
de°_pc
;

992 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].
out_vc
 = 
de°_vc
;

993 
num_esˇ≥_msgs
++;

1003 
∑th_ª£rved
 = (

1004 
is_ªady
[
node
][
ö_pc
 ][
ö_vc
 ].
xb¨ö
 =
NO
 ||

1005 
is_ªady
[
node
][
out_pc
][
out_vc
].
xb¨out
 =
NO


1006 )? 
YES
 : 
NO
;

1008 
HEAD_FLIT
)

1010  
is_ªady
[
node
][
ö_pc
 ][
ö_vc
 ].
xb¨ö
 =
NO
 )

1013 
	`¥ötf
("HódÅÿª£rvedÖ©h. Bad.[%d][%d][%d]: flô:%d\n", 
node
, 
ö_pc
, 
ö_vc
, 
Êô_±r
->
Êô_num
);

1014 
	`fÊush
(
°dout
);

1015 
	`exô
(0);

1017  
is_ªady
[
node
][
out_pc
 ][
out_vc
 ].
xb¨out
 =
NO
 )

1022  !
HEAD_FLIT
 && 
∑th_ª£rved
 =
NO
 )

1025 
	`¥ötf
("N⁄-HódÅÿn⁄-ª£rvedÖ©h. Bad.[%d][%d][%d]: flô:%d\n", 
node
, 
ö_pc
, 
ö_vc
, 
Êô_±r
->
Êô_num
);

1026 
	`fÊush
(
°dout
);

1027 
	`exô
(0);

1030 
hybrid_t›ﬁogy
 =
YES
 && 
node
 >
NUM_NODES
/2)

1032 
out_pc
 !
NUM_PC
 - 1)

1034 
	`¥ötf
("hybrid_t›ﬁogyÅ›ﬁogy shouldÇŸ givêp¯nÿ%d\n",
out_pc
);

1037 
Êô_±r
->
d©a
.
dnode
 =
node
 - 
NUM_NODES
/2)

1039 
is_ªady
[
node
][
out_pc
][
out_vc
].
nöbuf
 =
NO
)

1041 
vîbo£
 =
YES
)

1043 
	`¥ötf
("SA_NI_BNA[%d][%d][%d] -> [%d][%d][%d], flô:%d(%d)\n", 
node
, 
ö_pc
, 
ö_vc
,

1044 
node
, 
out_pc
, 
out_vc
, 
Êô_±r
->
Êô_num
, 
sim_˛ock
-Êô_±r->
íåy_time
);

1045 
	`fÊush
(
°dout
);

1052 
globÆ_msg_Àn
 = 
Êô_±r
->
msgÀn
;

1053 
loˇl_msg_Àn
 = 
Êô_±r
->
Œí
;

1054 
ªq_buff_¶Ÿs
 = 2*(
globÆ_msg_Àn
 - 
loˇl_msg_Àn
);

1056 
Êô_±r
->
Êô_ty≥
 =
CONTROL
)

1057 
ªq_buff_¶Ÿs
= 0;

1059 
√xt_node
 = 
√ighb‹
[
node
][
out_pc
];

1060 
√xt_pc
 = 
√ighb‹_pc
[
node
][
out_pc
];

1063 
is_ªady
[
√xt_node
][
√xt_pc
][
out_vc
].
röbuf
 <
ªq_buff_¶Ÿs
)

1065 
vîbo£
 =
YES
)

1067 
	`¥ötf
("SA_RT_BNA hybrid[%d][%d][%d] -> [%d][%d][%d], flô:%d(%d)\n", 
node
, 
ö_pc
, 
ö_vc
,

1068 
√xt_node
, 
√xt_pc
, 
out_vc
, 
Êô_±r
->
Êô_num
, 
sim_˛ock
-Êô_±r->
íåy_time
);

1069 
	`¥öt_mbox
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
out_vc
]));

1070 
	`fÊush
(
°dout
);

1072 
ªque°_ty≥
 = 0;

1077 
vîbo£
 =
YES
)

1079 
	`¥ötf
("SA_RT_BA hybrid[%d][%d][%d] -> [%d][%d][%d], flô:%d(%dËªq:%dávaû:%d gÀn:%dÜÀn:%d\n", 
node
, 
ö_pc
, 
ö_vc
,

1080 
√xt_node
, 
√xt_pc
, 
out_vc
, 
Êô_±r
->
Êô_num
, 
sim_˛ock
-Êô_±r->
íåy_time
,

1081 
ªq_buff_¶Ÿs
,
is_ªady
[
√xt_node
][
√xt_pc
][
out_vc
].
röbuf
, 
globÆ_msg_Àn
,
loˇl_msg_Àn
);

1082 
	`¥öt_mbox
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
out_vc
]));

1083 
	`¥öt_mbox
(&(
lök_buf
[
node
][
ö_pc
][
ö_vc
]));

1084 
	`fÊush
(
°dout
);

1093 
out_pc
 < 
NUM_PC
-
NUM_NIC_PC
)

1095 
√xt_node
 = 
√ighb‹
[
node
][
out_pc
];

1097 
√xt_pc
 = 
√ighb‹_pc
[
node
][
out_pc
];

1098 
is_ªady
[
√xt_node
][
√xt_pc
][
out_vc
].
röbuf
 <= 0)

1100 
vîbo£
 =
YES
)

1102 
	`¥ötf
("SA_RT_BNA[%d][%d][%d] -> [%d][%d][%d], flô:%d(%d)\n", 
node
, 
ö_pc
, 
ö_vc
,

1103 
√xt_node
, 
√xt_pc
, 
out_vc
, 
Êô_±r
->
Êô_num
, 
sim_˛ock
-Êô_±r->
íåy_time
);

1104 
	`¥öt_mbox
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
out_vc
]));

1105 
	`fÊush
(
°dout
);

1112 
is_ªady
[
node
][
out_pc
][
out_vc
].
nöbuf
 =
NO
)

1114 
vîbo£
 =
YES
)

1116 
	`¥ötf
("SA_NI_BNA[%d][%d][%d] -> [%d][%d][%d], flô:%d(%d)\n", 
node
, 
ö_pc
, 
ö_vc
,

1117 
node
, 
out_pc
, 
out_vc
, 
Êô_±r
->
Êô_num
, 
sim_˛ock
-Êô_±r->
íåy_time
);

1118 
	`fÊush
(
°dout
);

1125  
ªque°_ty≥
 == 1 )

1127 
SA_°age1_•ec_ªq
[
node
][
ö_pc
][
ö_vc
] = 1;

1128 
√ed_°age1_•ec_¨b
[
node
][
ö_pc
] = 1;

1129 
SA_ªque°_èbÀ
[
node
][
ö_pc
][
ö_vc
] = 1;

1130 
vîbo£
 =
YES
)

1131 
	`¥ötf
("ªque°ÅabÀ SA 1 : [%d][%d][%d]\n",
node
,
ö_pc
,
ö_vc
);

1135 
SA_°age1_ªq
[
node
][
ö_pc
][
ö_vc
] = 1;

1136 
√ed_°age1_SA_¨b
[
node
][
ö_pc
] = 1;

1137 
SA_ªque°_èbÀ
[
node
][
ö_pc
][
ö_vc
] = 1;

1138 
vîbo£
 =
YES
)

1139 
	`¥ötf
("ªque°ÅabÀ s≥¯SA 1 : [%d][%d][%d]\n",
node
,
ö_pc
,
ö_vc
);

1155 
node
=0;Çode<
NUM_NODES
;Çode++)

1156 
ö_pc
=0; in_pc<
NUM_PC
; in_pc++)

1159 
√ed_°age1_SA_¨b
[
node
][
ö_pc
] == 1)

1161 
SA_ty≥1
 =
RR
)

1162 
	`RR_¨bôî
 (
SA_°age1_ªq
[
node
][
ö_pc
],

1163 
SA_°age1_wö
[
node
][
ö_pc
], 1, 
NUM_VC
);

1164 
SA_ty≥1
 =
LRU
)

1165 
	`LRU_¨bôî
(
SA_°age1_ªq
[
node
][
ö_pc
],

1166 
SA_°age1_wö
[
node
][
ö_pc
], 1, 
NUM_VC
);

1170 
√ed_°age1_•ec_¨b
[
node
][
ö_pc
] == 1)

1172 
SA_ty≥1
 =
RR
)

1173 
	`RR_¨bôî
 (
SA_°age1_•ec_ªq
[
node
][
ö_pc
],

1174 
SA_°age1_•ec_wö
[
node
][
ö_pc
], 1, 
NUM_VC
);

1175 
SA_ty≥1
 =
LRU
)

1176 
	`LRU_¨bôî
(
SA_°age1_•ec_ªq
[
node
][
ö_pc
],

1177 
SA_°age1_•ec_wö
[
node
][
ö_pc
], 1, 
NUM_VC
);

1184 
node
=0;Çode<
NUM_NODES
;Çode++)

1185 
ö_pc
=0; in_pc<
NUM_PC
; in_pc++)

1186 
ö_vc
=0; in_vc<
NUM_VC
; in_vc++)

1189 
SA_°age1_ªq
[
node
][
ö_pc
][
ö_vc
] == 1)

1192 
out_pc
 = 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].out_pc;

1193 
SA_°age2_ªq
[
node
][
out_pc
][
ö_pc
] = 1;

1194 
√ed_°age2_SA_¨b
[
node
][
out_pc
] = 1;

1195 
vîbo£
 =
YES
)

1196 
	`¥ötf
("ªque°ÅabÀ SA 2 : [%d][%d][%d]\n",
node
,
ö_pc
,
ö_vc
);

1200 
SA_°age1_•ec_ªq
[
node
][
ö_pc
][
ö_vc
] == 1)

1203 
out_pc
 = 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].out_pc;

1204 
SA_°age2_•ec_ªq
[
node
][
out_pc
][
ö_pc
] = 1;

1205 
√ed_°age2_•ec_¨b
[
node
][
out_pc
] = 1;

1206 
vîbo£
 =
YES
)

1207 
	`¥ötf
("ªque°ÅabÀ SA 2 : [%d][%d][%d]\n",
node
,
ö_pc
,
ö_vc
);

1215 
node
=0;Çode<
NUM_NODES
;Çode++)

1216 
out_pc
=0; out_pc<
NUM_PC
; out_pc++)

1219 
√ed_°age2_SA_¨b
[
node
][
out_pc
] == 1)

1221 
SA_ty≥1
 =
RR
)

1222 
	`RR_¨bôî
 (
SA_°age2_ªq
[
node
][
out_pc
],

1223 
SA_°age2_wö
[
node
][
out_pc
], 1, 
NUM_PC
);

1224 
SA_ty≥1
 =
LRU
)

1225 
	`LRU_¨bôî
(
SA_°age2_ªq
[
node
][
out_pc
],

1226 
SA_°age2_wö
[
node
][
out_pc
], 1, 
NUM_PC
);

1230 
√ed_°age2_•ec_¨b
[
node
][
out_pc
] == 1)

1232 
SA_ty≥1
 =
RR
)

1233 
	`RR_¨bôî
 (
SA_°age2_•ec_ªq
[
node
][
out_pc
],

1234 
SA_°age2_•ec_wö
[
node
][
out_pc
], 1, 
NUM_PC
);

1235 
SA_ty≥1
 =
LRU
)

1236 
	`LRU_¨bôî
(
SA_°age2_•ec_ªq
[
node
][
out_pc
],

1237 
SA_°age2_•ec_wö
[
node
][
out_pc
], 1, 
NUM_PC
);

1244 
node
=0;Çode<
NUM_NODES
;Çode++)

1247 
ö_pc
=0; in_pc<
NUM_PC
; in_pc++)

1249 
is_ö_vc_u£d
 [
ö_pc
]=
NO
;

1250 
is_out_vc_u£d
[
ö_pc
]=
NO
;

1254 
out_pc
=0; out_pc<
NUM_PC
; out_pc++)

1255 
ö_pc
=0; in_pc<
NUM_PC
; in_pc++)

1256 
SA_°age2_ªq
[
node
][
out_pc
][
ö_pc
] == 1)

1259 
ö_vc
=0; in_vc<
NUM_VC
; in_vc++)

1260  
SA_°age1_ªq
[
node
][
ö_pc
][
ö_vc
] == 1 &&

1261 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].
vc_°©
 =
VC_VA_DONE
 )

1263 
out_vc
 = 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].out_vc;

1266 
	`ªcv_Êô
(&(
rouãr_öput_buf
[
node
][
ö_pc
][
ö_vc
]), &
Êô_±r
);

1267 
c⁄åﬁ_msg_comböe
 =
YES
 && 
Êô_±r
->
sh‹t_Êô
 == YES)

1269 
ö_pc_ˇnd
, 
ö_vc_ˇnd
;

1270 
Êô_t
 *
ˇnd_Êô_±r
=
NULL
;

1271 
	`föd_ˇndid©e
(
node
, 
ö_pc
, 
ö_vc
, &
ö_pc_ˇnd
, &
ö_vc_ˇnd
, &
ˇnd_Êô_±r
))

1273 
√xt_node
 = 
√ighb‹
[
node
][
out_pc
];

1274 
√xt_pc
 = 
√ighb‹_pc
[
node
][
out_pc
];

1275 
out_ˇnd_vc
 = 
vc_öfo
[
node
][
ö_pc_ˇnd
][
ö_vc_ˇnd
].
out_vc
;

1278 
vîbo£
 =
YES
)

1279 
	`¥ötf
("found c™did©êÊô:%d\n",
ˇnd_Êô_±r
->
Êô_num
);

1281 
is_ªady
[
√xt_node
][
√xt_pc
][
out_ˇnd_vc
].
röbuf
 > 0)

1283 
vîbo£
 =
YES
)

1285 
	`¥ötf
("SA c™did©e[%d][%d][%d]-Êô:%d(%sËtÿ[%d][%d][%d]\n", 
node
,

1286 
ö_pc_ˇnd
, 
ö_vc_ˇnd
, 
ˇnd_Êô_±r
->
Êô_num
,"HEAD",

1287 
node
, 
out_pc
, 
out_ˇnd_vc
);

1288 
	`¥ötf
("röbu‡[%d][%d][%d] :%d\n",
√xt_node
,
√xt_pc
,
out_ˇnd_vc
,
is_ªady
[√xt_node][√xt_pc][
out_vc
].
röbuf
);

1289 
	`¥öt_mbox
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
out_ˇnd_vc
]));

1290 
	`fÊush
(
°dout
);

1293 
vc_öfo
[
node
][
ö_pc_ˇnd
][
ö_vc_ˇnd
].
vc_°©
 = 
VC_SA_DONE_TMP
;

1294 
vc_öfo
[
node
][
ö_pc_ˇnd
][
ö_vc_ˇnd
].
out_vc
 = 
out_ˇnd_vc
;

1295 
	`IS_HEAD_FLIT
(
ˇnd_Êô_±r
))

1297 
is_ªady
[
node
][
ö_pc_ˇnd
][
ö_vc_ˇnd
].
xb¨ö
 = 
NO
;

1298 
is_ªady
[
node
][
out_pc
][
out_ˇnd_vc
].
xb¨out
 = 
NO
;

1300 
	`IS_TAIL_FLIT
(
ˇnd_Êô_±r
))

1302 
is_ªady
[
node
][
ö_pc_ˇnd
][
ö_vc_ˇnd
].
xb¨ö
 = 
YES
;

1303 
is_ªady
[
node
][
out_pc
][
out_ˇnd_vc
].
xb¨out
 = 
YES
;

1307 
	`IS_TAIL_FLIT
(
ˇnd_Êô_±r
))

1309 
is_ªady
[
node
][
ö_pc_ˇnd
][
ö_vc_ˇnd
].
xb¨ö
 = 
YES
;

1310 
is_ªady
[
node
][
out_pc
][
out_ˇnd_vc
].
xb¨out
 = 
YES
;

1312 
vîbo£
 =
YES
)

1314 
ˇnd_Êô_±r
->
msgty≥
 =
DATA
 || 
Êô_±r
->msgtype == DATA)

1315 
	`¥ötf
("C & D combine\n");

1317 
	`¥ötf
("C & C combine\n");

1320 
	`ªcv_Êô
(&(
rouãr_öput_buf
[
node
][
ö_pc_ˇnd
][
ö_vc_ˇnd
]), &
ˇnd_Êô_±r
);

1322 
	`£nd_Êô
(&(
xb¨_buf
[
node
][
ö_pc_ˇnd
][
ö_vc_ˇnd
]), &
ˇnd_Êô_±r
);

1328 
vîbo£
 =
YES
)

1330 
	`¥ötf
("SA_RT_BNA c™did©e[%d][%d][%d]-Êô:%d(%sËtÿ[%d][%d][%d]\n", 
node
,

1331 
ö_pc_ˇnd
, 
ö_vc_ˇnd
, 
ˇnd_Êô_±r
->
Êô_num
,"HEAD",

1332 
node
, 
out_pc
, 
out_vc
);

1333 
	`¥ötf
("röbu‡[%d][%d][%d] :%d\n",
√xt_node
,
√xt_pc
,
out_vc
,
is_ªady
[√xt_node][√xt_pc][out_vc].
röbuf
);

1334 
	`¥öt_mbox
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
out_vc
]));

1335 
	`fÊush
(
°dout
);

1342 
vîbo£
 =
YES
)

1344 
	`¥ötf
("SA [%d][%d][%d]-Êô:%d(%sËtÿ[%d][%d][%d]\n", 
node
,

1345 
ö_pc
, 
ö_vc
, 
Êô_±r
->
Êô_num
,

1346 (
HEAD_FLIT
)? "HEAD" :

1347 (
TAIL_FLIT
)? "TAIL" :"MIDDLE",

1348 
node
, 
out_pc
, 
out_vc
);

1349 
√xt_node
 = 
√ighb‹
[
node
][
out_pc
];

1350 
√xt_pc
 = 
√ighb‹_pc
[
node
][
out_pc
];

1351 
	`¥ötf
("röbu‡[%d][%d][%d] :%d\n",
√xt_node
,
√xt_pc
,
out_vc
,
is_ªady
[√xt_node][√xt_pc][out_vc].
röbuf
);

1352 
	`¥öt_mbox
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
out_vc
]));

1353 
	`fÊush
(
°dout
);

1355 
HEAD_FLIT
)

1357 
is_ªady
[
node
][
ö_pc
 ][
ö_vc
 ].
xb¨ö
 = 
NO
;

1358 
is_ªady
[
node
][
out_pc
][
out_vc
].
xb¨out
 = 
NO
;

1360 
TAIL_FLIT
)

1362 
is_ªady
[
node
][
ö_pc
 ][
ö_vc
 ].
xb¨ö
 = 
YES
;

1363 
is_ªady
[
node
][
out_pc
][
out_vc
].
xb¨out
 = 
YES
;

1367 
TAIL_FLIT
)

1369 
is_ªady
[
node
][
ö_pc
 ][
ö_vc
 ].
xb¨ö
 = 
YES
;

1370 
is_ªady
[
node
][
out_pc
][
out_vc
].
xb¨out
 = 
YES
;

1374 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].
vc_°©
 = 
VC_SA_DONE_TMP
;

1376 
xb¨_ö_‰ì
[
node
][
ö_pc
] = 
NO
;

1377 
xb¨_out_‰ì
[
node
][
out_pc
] = 
NO
;

1379 
out_pc
 < 
NUM_PC
 - 
NUM_NIC_PC
)

1382 
has_Êô
[
node
][
out_pc
][
out_vc
].
¨bôî
 = 
YES
;

1386 
	`£nd_Êô
(&(
xb¨_buf
[
node
][
ö_pc
][
ö_vc
]), &
Êô_±r
);

1390 
is_ö_vc_u£d
 [
ö_pc
 ]=
YES
;

1391 
is_out_vc_u£d
[
out_pc
]=
YES
;

1396 
¨ch
 <=3)

1401 
out_pc
=0; out_pc<
NUM_PC
; out_pc++)

1402 
ö_pc
=0; in_pc<
NUM_PC
; in_pc++)

1405 
SA_°age2_•ec_ªq
[
node
][
out_pc
][
ö_pc
] == 1 &&

1406 
is_ö_vc_u£d
 [
ö_pc
 ] =
NO
 && 
is_out_vc_u£d
[
out_pc
] == NO )

1410 
ö_vc
=0; in_vc<
NUM_VC
; in_vc++)

1411  
SA_°age1_•ec_ªq
[
node
][
ö_pc
][
ö_vc
] == 1 &&

1412 –
vc_öfo
[
node
][
ö_pc
][
ö_vc
].
vc_°©
 =
VC_VA_DONE_TMP
 ||

1413 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].
vc_°©
 =
VC_ROUTING
 )

1416 
out_vc
 = 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].out_vc;

1419 
	`ªcv_Êô
(&(
rouãr_öput_buf
[
node
][
ö_pc
][
ö_vc
]), &
Êô_±r
);

1420 
c⁄åﬁ_msg_comböe
 =
YES
 && 
Êô_±r
->
sh‹t_Êô
 == YES)

1422 
ö_pc_ˇnd
, 
ö_vc_ˇnd
;

1423 
Êô_t
 *
ˇnd_Êô_±r
=
NULL
;

1424 
	`föd_ˇndid©e
(
node
, 
ö_pc
, 
ö_vc
, &
ö_pc_ˇnd
, &
ö_vc_ˇnd
, &
ˇnd_Êô_±r
))

1426 
√xt_node
 = 
√ighb‹
[
node
][
out_pc
];

1427 
√xt_pc
 = 
√ighb‹_pc
[
node
][
out_pc
];

1428 
out_ˇnd_vc
 = 
vc_öfo
[
node
][
ö_pc_ˇnd
][
ö_vc_ˇnd
].
out_vc
;

1431 
vîbo£
 =
YES
)

1432 
	`¥ötf
("found c™did©êÊô:%d\n",
ˇnd_Êô_±r
->
Êô_num
);

1434 
is_ªady
[
√xt_node
][
√xt_pc
][
out_ˇnd_vc
].
röbuf
 > 0)

1436 
vîbo£
 =
YES
)

1438 
	`¥ötf
("SA c™did©e[%d][%d][%d]-Êô:%d(%sËtÿ[%d][%d][%d]\n", 
node
,

1439 
ö_pc_ˇnd
, 
ö_vc_ˇnd
, 
ˇnd_Êô_±r
->
Êô_num
,"HEAD",

1440 
node
, 
out_pc
, 
out_ˇnd_vc
);

1441 
	`¥ötf
("röbu‡[%d][%d][%d] :%d\n",
√xt_node
,
√xt_pc
,
out_ˇnd_vc
,
is_ªady
[√xt_node][√xt_pc][out_ˇnd_vc].
röbuf
);

1442 
	`¥öt_mbox
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
out_ˇnd_vc
]));

1443 
	`fÊush
(
°dout
);

1446 
vc_öfo
[
node
][
ö_pc_ˇnd
][
ö_vc_ˇnd
].
vc_°©
 = 
VC_SA_DONE_TMP
;

1447 
vc_öfo
[
node
][
ö_pc_ˇnd
][
ö_vc_ˇnd
].
out_vc
 = 
out_ˇnd_vc
;

1448 
	`IS_HEAD_FLIT
(
ˇnd_Êô_±r
))

1450 
is_ªady
[
node
][
ö_pc_ˇnd
][
ö_vc_ˇnd
].
xb¨ö
 = 
NO
;

1451 
is_ªady
[
node
][
out_pc
][
out_ˇnd_vc
].
xb¨out
 = 
NO
;

1453 
	`IS_TAIL_FLIT
(
ˇnd_Êô_±r
))

1455 
is_ªady
[
node
][
ö_pc_ˇnd
][
ö_vc_ˇnd
].
xb¨ö
 = 
YES
;

1456 
is_ªady
[
node
][
out_pc
][
out_ˇnd_vc
].
xb¨out
 = 
YES
;

1460 
	`IS_TAIL_FLIT
(
ˇnd_Êô_±r
))

1462 
is_ªady
[
node
][
ö_pc_ˇnd
][
ö_vc_ˇnd
].
xb¨ö
 = 
YES
;

1463 
is_ªady
[
node
][
out_pc
][
out_ˇnd_vc
].
xb¨out
 = 
YES
;

1465 
vîbo£
 =
YES
)

1467 
ˇnd_Êô_±r
->
msgty≥
 =
DATA
 || 
Êô_±r
->msgtype == DATA)

1468 
	`¥ötf
("C & D combine\n");

1470 
	`¥ötf
("C & C combine\n");

1474 
	`ªcv_Êô
(&(
rouãr_öput_buf
[
node
][
ö_pc_ˇnd
][
ö_vc_ˇnd
]), &
ˇnd_Êô_±r
);

1476 
	`£nd_Êô
(&(
xb¨_buf
[
node
][
ö_pc_ˇnd
][
ö_vc_ˇnd
]), &
ˇnd_Êô_±r
);

1482 
vîbo£
 =
YES
)

1484 
	`¥ötf
("SA_RT_BNA c™did©e[%d][%d][%d]-Êô:%d(%sËtÿ[%d][%d][%d]\n", 
node
,

1485 
ö_pc_ˇnd
, 
ö_vc_ˇnd
, 
ˇnd_Êô_±r
->
Êô_num
,"HEAD",

1486 
node
, 
out_pc
, 
out_vc
);

1487 
	`¥ötf
("röbu‡[%d][%d][%d] :%d\n",
√xt_node
,
√xt_pc
,
out_vc
,
is_ªady
[√xt_node][√xt_pc][out_vc].
röbuf
);

1488 
	`¥öt_mbox
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
out_vc
]));

1489 
	`fÊush
(
°dout
);

1496 
vîbo£
 =
YES
)

1498 
	`¥ötf
("SA [%d][%d][%d]-Êô:%d(%sËtÿ[%d][%d][%d]\n", 
node
,

1499 
ö_pc
, 
ö_vc
, 
Êô_±r
->
Êô_num
,

1500 (
HEAD_FLIT
)? "HEAD" :

1501 (
TAIL_FLIT
)? "TAIL" :"MIDDLE",

1502 
node
, 
out_pc
, 
out_vc
);

1503 
√xt_node
 = 
√ighb‹
[
node
][
out_pc
];

1504 
√xt_pc
 = 
√ighb‹_pc
[
node
][
out_pc
];

1505 
	`¥ötf
("röbu‡[%d][%d][%d] :%d\n",
√xt_node
,
√xt_pc
,
out_vc
,
is_ªady
[√xt_node][√xt_pc][out_vc].
röbuf
);

1506 
	`¥öt_mbox
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
out_vc
]));

1507 
	`fÊush
(
°dout
);

1509 
HEAD_FLIT
)

1511 
is_ªady
[
node
][
ö_pc
 ][
ö_vc
 ].
xb¨ö
 = 
NO
;

1512 
is_ªady
[
node
][
out_pc
][
out_vc
].
xb¨out
 = 
NO
;

1514 
TAIL_FLIT
)

1516 
is_ªady
[
node
][
ö_pc
 ][
ö_vc
 ].
xb¨ö
 = 
YES
;

1517 
is_ªady
[
node
][
out_pc
][
out_vc
].
xb¨out
 = 
YES
;

1520 
TAIL_FLIT
)

1522 
is_ªady
[
node
][
ö_pc
 ][
ö_vc
 ].
xb¨ö
 = 
YES
;

1523 
is_ªady
[
node
][
out_pc
][
out_vc
].
xb¨out
 = 
YES
;

1527 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].
vc_°©
 = 
VC_SA_DONE_TMP
;

1529 
xb¨_ö_‰ì
[
node
][
ö_pc
] = 
NO
;

1530 
xb¨_out_‰ì
[
node
][
out_pc
] = 
NO
;

1532 
out_pc
 < 
NUM_PC
 - 
NUM_NIC_PC
)

1535 
has_Êô
[
node
][
out_pc
][
out_vc
].
¨bôî
 = 
YES
;

1539 
	`£nd_Êô
(&(
xb¨_buf
[
node
][
ö_pc
][
ö_vc
]), &
Êô_±r
);

1558 
•ec_Á˘‹
 = 1;

1559 
¨ch
 <= 3)

1560 
•ec_Á˘‹
 = 2;

1561 
hybrid_t›ﬁogy
 =
NO
)

1563 
p_sw_¨b
 +
•ec_Á˘‹
*(
NUM_NODES
 * ( 
NUM_PC
*
PD_V_1_ARB
 + NUM_PC*
NUM_VC
*
PD_P_1_ARB
));

1564 
p_sw_¨b
 +
•ec_Á˘‹
*(
NUM_NODES
 * ( 
NUM_PC
*
PL_V_1_ARB
 + NUM_PC*
NUM_VC
*
PL_P_1_ARB
));

1571 
node
 = 0;

1572 
p_sw_¨b
 +
•ec_Á˘‹
*(
NUM_NODES
/2 * ( 
NUM_PC
*
PD_V_1_ARB
 + NUM_PC*
NUM_VC
*
PD_P_1_ARB
));

1573 
p_sw_¨b
 +
•ec_Á˘‹
*(
NUM_NODES
/2 * ( 
NUM_PC
*
PL_V_1_ARB
 + NUM_PC*
NUM_VC
*
PL_P_1_ARB
));

1574 
node
 = 
NUM_NODES
/2;

1575 
p_sw_¨b
 +
NUM_NODES
/2 * ( 
c⁄˚¡øti⁄_degªe
*
pd_v_1_bus
 +

1576 
c⁄˚¡øti⁄_degªe
*
NUM_VC
*
pd_p_1_bus
);

1577 
node
 = 0;

1580 
	}
}

1582 
	$°age3
()

1585 
node
, 
ö_pc
, 
ö_vc
, 
i
, 
j
, 
out_pc
, 
out_vc
;

1586 
pc_ˇndid©e
, 
vc_ˇndid©e
, 
xb¨_u£d
;

1587 
Êô_t
 *
Êô_±r
;

1588 
buf„r_tmp
 = 
PD_BUFFER
;

1590 
œ°_£À˘ed_pc
[
MAX_NODES
]={0}, 
œ°_£À˘ed_vc
[MAX_NODES][
MAX_PC
]={0};

1592 
node
=0;Çode<
NUM_NODES
;Çode++)

1594 
xb¨_u£d
 = 
NO
;

1595 
rouãr
[
node
].
hó…h_°©us
 =
FAIL
 ||Ñouãr[node].hó…h_°©u†=
TRAPPED
)

1597 
hybrid_t›ﬁogy
 =
YES
 && 
node
 =
NUM_NODES
/2)

1598 
PD_BUFFER
 = 0.0;

1600 
ö_pc
=0; in_pc< 
NUM_PC
; in_pc++)

1602 
ö_vc
=0; in_vc< 
NUM_VC
; in_vc++)

1604 
vîbo£
 =
YES
)

1607 
	`msg_˙t
(&(
xb¨_buf
[
node
][
ö_pc
][
ö_vc
])) > 1)

1609 
	`ªad_Êô
(&(
xb¨_buf
[
node
][
ö_pc
][
ö_vc
]), &
Êô_±r
);

1610 
	`¥ötf
("Xbar Overflow [%d][%d][%d]-flit:%d(%s)Åo %s\n",

1611 
node
, 
out_pc
, 
out_vc
, 
Êô_±r
->
Êô_num
,

1612 (
HEAD_FLIT
)? "HEAD" :

1613 (
TAIL_FLIT
)? "TAIL" : "MIDDLE",

1614 (
out_pc
 >(
NUM_PC
-
NUM_NIC_PC
))? "Eject":"NextÑouter");

1616 
	`¥ötf
("[%d][%d][%d]Ñöbu‡:%d vc_°©:%s\n",
node
,
ö_pc
,
ö_vc
,
	`msg_˙t
(&(
rouãr_öput_buf
[node][in_pc][in_vc])),

1617 
vc_°©e
[
vc_öfo
[
node
][
ö_pc
][
ö_vc
].
vc_°©
]);

1618 
	`¥öt_mbox
(&(
rouãr_öput_buf
[
node
][
ö_pc
][
ö_vc
]));

1619 
	`fÊush
(
°dout
);

1622 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].
vc_°©
 =
VC_SA_DONE_TMP1


1623 && 
	`msg_˙t
(&(
xb¨_buf
[
node
][
ö_pc
][
ö_vc
])) > 0 )

1625 
	`ªad_Êô
(&(
xb¨_buf
[
node
][
ö_pc
][
ö_vc
]), &
Êô_±r
);

1626 
	`¥ötf
("Xbar Waiting [%d][%d][%d]-flit:%d(%s)Åo %s\n",

1627 
node
, 
out_pc
, 
out_vc
, 
Êô_±r
->
Êô_num
,

1628 (
HEAD_FLIT
)? "HEAD" :

1629 (
TAIL_FLIT
)? "TAIL" : "MIDDLE",

1630 (
out_pc
 >(
NUM_PC
-
NUM_NIC_PC
))? "Eject":"NextÑouter");

1631 
	`fÊush
(
°dout
);

1637  
vc_öfo
[
node
][
ö_pc
][
ö_vc
].
vc_°©
 =
VC_SA_DONE
 &&

1638 
	`msg_˙t
(&(
xb¨_buf
[
node
][
ö_pc
][
ö_vc
])) > 0)

1641 
	`ªcv_Êô
(&(
xb¨_buf
[
node
][
ö_pc
][
ö_vc
]), &
Êô_±r
);

1644 
TAIL_FLIT
)

1645 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].
vc_°©
 = 
VC_IDLE_TMP
;

1647 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].
vc_°©
 = 
VC_VA_DONE
;

1649 
out_pc
 = 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].out_pc;

1650 
out_vc
 = 
vc_öfo
[
node
][
ö_pc
][
ö_vc
].out_vc;

1652 
sql
 =
YES
)

1653 
	`Ârötf
(
fsql
, "INSERT INTO FLOW VALUES(0, %d,%d,%d,%d,%d,%d);\n",

1654 
Êô_±r
->
Êô_num
, 
node
, 
out_pc
, 
out_vc
, 3, 
sim_˛ock
);

1655 #i‡
VC_SET


1656 
Êô_±r
->
msgty≥
 =
CONTROL
 && !(
out_vc
 >0 && out_v¯< 
NUM_VC
/2))

1657 {
	`¥ötf
("ERR !! mixög c⁄åﬁánd d©®Êow!!\n"); 
	`gëch¨
();}

1659 
Êô_±r
->
msgty≥
 =
DATA
 && !(
out_vc
 >
NUM_VC
/2 && out_vc < NUM_VC))

1660 {
	`¥ötf
("ERR !! mixög c⁄åﬁánd d©®Êow!!\n"); 
	`gëch¨
();}

1662 
vîbo£
 =
YES
)

1664 
	`¥ötf
("Xbar [%d][%d][%d]-flit:%d(%s)Åo %s\n",

1665 
node
, 
out_pc
, 
out_vc
, 
Êô_±r
->
Êô_num
,

1666 (
HEAD_FLIT
)? "HEAD" :

1667 (
TAIL_FLIT
)? "TAIL" : "MIDDLE",

1668 (
out_pc
 >(
NUM_PC
-
NUM_NIC_PC
))? "Eject":"NextÑouter");

1669 
√xt_node
 = 
√ighb‹
[
node
][
out_pc
];

1670 
√xt_pc
 = 
√ighb‹_pc
[
node
][
out_pc
];

1671 
	`¥öt_mbox
(&(
rouãr_öput_buf
[
√xt_node
][
√xt_pc
][
out_vc
]));

1672 
	`fÊush
(
°dout
);

1675 
vc_utûiz©i⁄
[
node
][
ö_pc
][
ö_vc
]++;

1677 
xb¨_ö_‰ì
[
node
][
ö_pc
] = 
YES
;

1678 
xb¨_out_‰ì
[
node
][
out_pc
] = 
YES
;

1685 
sim_˛ock
 - 
Êô_±r
->
íåy_time
 - 
¨ch
 > 0)

1687 
Êô_±r
->
dñay_cy˛e
 +
sim_˛ock
 - flô_±r->
íåy_time
 - 
¨ch
;

1688 
vîbo£
 =
YES
)

1690 
	`¥ötf
("Blocking Delay [%d][%d][%d]-flit:%d(%s)áccumulated:%d current:%d\n",

1691 
node
, 
out_pc
, 
out_vc
, 
Êô_±r
->
Êô_num
,

1692 (
HEAD_FLIT
)? "HEAD" :

1693 (
TAIL_FLIT
)? "TAIL" : "MIDDLE",

1694 
Êô_±r
->
dñay_cy˛e
,

1695 
sim_˛ock
 - 
Êô_±r
->
íåy_time
 - 
¨ch
);

1696 
	`fÊush
(
°dout
);

1703 
hybrid_t›ﬁogy
 =
NO
 || (hybrid_t›ﬁogy =
YES
 && 
node
 < 
NUM_NODES
/2))

1704 
p_xb¨
 +
PD_XBAR_F
;

1706 
hybrid_t›ﬁogy
 =
YES
 && 
node
 >
NUM_NODES
/2)

1707 
p_lök
 +
PD_BUS_LINK
;

1709 
t›ﬁogy
 =
BUS
)

1711 
p_lök
 +
PD_BUS_LINK
;

1712 
p_xb¨
 -
PD_XBAR_F
;

1717  
ªå™s_ty≥
 =
HBH
 ||

1718 (
ªå™s_ty≥
 =
HFEC
 && 
HEAD_FLIT
) ||

1719 (
ªå™s_ty≥
 =
HE2E
 && 
HEAD_FLIT
) )

1720 
p_ªå™s
 +
PD_HBHBUF
;

1725  (
sim_˛ock
 > 
w¨mup_cy˛e
) &&

1726 (
ªå™s_ty≥
 =
HBH
 ||

1727 (
ªå™s_ty≥
 =
HFEC
 && 
HEAD_FLIT
) ||

1728 (
ªå™s_ty≥
 =
HE2E
 && 
HEAD_FLIT
) ) )

1729 
tŸÆ_ªå™s_buf_ußge
[
node
]++;

1732 
xb¨_u£d
 =
NO
)

1734 
p_buf„r
 +
PD_BUFCTR
 + 
PD_BUFFER
;

1735 
xb¨_u£d
 = 
YES
;

1738 
hybrid_t›ﬁogy
 =
YES
 && 
node
 >
NUM_NODES
/2)

1740 
out_pc
 !
NUM_PC
 - 1)

1742 
	`¥ötf
("hybrid_t›ﬁogyÅ›ﬁogy shouldÇŸ givêp¯nÿ%d\n",
out_pc
);

1744 
Êô_±r
->
d©a
.
dnode
 =
node
 - 
NUM_NODES
/2)

1747 
	`£nd_Êô
(&(
nic_öput_buf
[
node
][
out_pc
-(
NUM_PC
-
NUM_NIC_PC
)][
out_vc
]), &
Êô_±r
);

1752 
has_Êô
[
node
][
out_pc
][
out_vc
].
xb¨
 = 
YES
;

1753 
p_lök
 +
PL_LINK
;

1755 
Êô_±r
->
num_h›
++;

1758 
	`£nd_Êô
(&(
lök_buf
[
node
][
out_pc
][
out_vc
]), &
Êô_±r
);

1765 
out_pc
 >
NUM_PC
 - 
NUM_NIC_PC
)

1768 
	`£nd_Êô
(&(
nic_öput_buf
[
node
][
out_pc
-(
NUM_PC
-
NUM_NIC_PC
)][
out_vc
]), &
Êô_±r
);

1773 
has_Êô
[
node
][
out_pc
][
out_vc
].
xb¨
 = 
YES
;

1774 
p_lök
 +
PL_LINK
;

1776 
Êô_±r
->
num_h›
++;

1779 
	`£nd_Êô
(&(
lök_buf
[
node
][
out_pc
][
out_vc
]), &
Êô_±r
);

1785 
sim_˛ock
 > 
w¨mup_cy˛e
)

1786 
tŸÆ_a˘ivôy
[
node
]++;

1792 
hybrid_t›ﬁogy
 =
YES
)

1793 
PD_BUFFER
 = 
buf„r_tmp
;

1794 
	}
}

1799 
	$RR_¨bôî
(*
ªq
, *
œ°_wö
, 
n_£t
, 
£t_size
)

1801 
i
, 
j
, 
k
, 
√w_£t
, 
√w_idx
;

1802 
œ°_wö_£t
 = 0;

1804 
œ°_wö_idx
[
MAX_PC
*
MAX_VC
]={0};

1807 
i
=0; i<
n_£t
; i++)

1808 
j
=0; j<
£t_size
; j++)

1809 
œ°_wö
[
i
*
£t_size
 + 
j
] == 1)

1811 
œ°_wö_£t
 = 
i
;

1812 
œ°_wö_idx
[
i
] = 
j
;

1816 
i
=0; i<
n_£t
; i++)

1818 
√w_£t
 = (
i
 + 1 + 
œ°_wö_£t
Ë% 
n_£t
;

1819 
j
=0; j<
£t_size
; j++)

1821 
√w_idx
 = (
j
 + 1 + 
œ°_wö_idx
[
i
]Ë% 
£t_size
;

1822 
ªq
[
√w_£t
*
£t_size
 + 
√w_idx
] == 1)

1826 
œ°_wö
[
œ°_wö_£t
*
£t_size
 + 
œ°_wö_idx
[last_win_set]] = 0;

1827 
œ°_wö
[
√w_£t
*
£t_size
 + 
√w_idx
] = 1;

1830 
k
=0; k<
n_£t
*
£t_size
; k++)

1831 
k
 !
√w_£t
*
£t_size
 + 
√w_idx
)

1832 
ªq
[
k
] = 0;

1842 
	}
}

1844 
	$LRU_¨bôî
(*
ªq
, *
wö
, 
num_£t
, 
£t_size
)

1845 {
	}
}

1847 
boﬁ
 
	$föd_ˇndid©e
(
node
, 
ö_pc
, 
ö_vc
, *
ö_pc_ˇnd
, *
ö_vc_ˇnd
, 
Êô_t
 **
ˇnd_Êô_±r
)

1849 
msg_exi°
 = 
NO
;

1850 
ˇndys
=0;

1851 
x„rs
=0;

1852 
x„rs
++;

1853 !(
x„rs
%10000Ë&& 
vîbo£
 =
YES
)

1854 
	`¥ötf
("tŸÅøns„rs:%Œd c™dys:%ŒdÑ©io:%.2lf\n",
x„rs
,
ˇndys
, candys/()xfers);

1855 
msg_comböe_ˇndid©e_øtio
 = 
ˇndys
/()
x„rs
;

1859 
pc
 = 0;Öc<
NUM_PC
;Öc++)

1860 
vc
 = 0; vc<
NUM_VC
; vc++)

1862 
pc
 =
ö_pc
 && 
vc
 =
ö_vc
)

1866 
SA_ªque°_èbÀ
[
node
][
pc
][
vc
] == 1 &&

1867 
vc_öfo
[
node
][
pc
][
vc
].
out_pc
 =vc_öfo[node][
ö_pc
][
ö_vc
].out_pc &&

1868 
vc_öfo
[
node
][
pc
][
vc
].
out_vc
 !vc_öfo[node][
ö_pc
][
ö_vc
].out_vc

1871 
	`ªad_Êô
(&(
rouãr_öput_buf
[
node
][
pc
][
vc
]), 
ˇnd_Êô_±r
);

1872 (*
ˇnd_Êô_±r
)->
sh‹t_Êô
 =
YES
)

1874 *
ö_vc_ˇnd
 = 
vc
;

1875 *
ö_pc_ˇnd
 = 
pc
;

1876 
ˇndys
++;

1877  
åue
;

1882  
Ál£
;

1883 
	}
}

	@router.h

44 #i‚de‡
ROUTER_H


45  
	#ROUTER_H


	)
47 
	~"Êô_move.h
"

48 
	~"powî.h
"

50  
	#R_V
 0

	)
51  
	#R_P
 1

	)
52  
	#R_PV
 2

	)
54  
	#RR
 0

	)
55  
	#LRU
 1

	)
57  
	#VC_IDLE
 0

	)
58  
	#VC_ROUTING
 1

	)
59  
	#VC_VA_DONE
 2

	)
60  
	#VC_SA_DONE
 3

	)
62  
	#VC_IDLE_TMP
 4

	)
63  
	#VC_ROUTING_TMP
 5

	)
64  
	#VC_VA_DONE_TMP
 6

	)
65  
	#VC_SA_DONE_TMP
 7

	)
66  
	#VC_SA_DONE_TMP1
 8

	)
67  
	#VC_SA_DONE_TMP2
 9

	)
68  
	#VC_SA_DONE_TMP3
 10

	)
70  
	#MAX_COLS
 32

	)
71  
	#MAX_ROWS
 16

	)
72  
	#MAX_NODES
 (
MAX_COLS
 * 
MAX_ROWS
)

	)
80  
	#MAX_PC
 20

	)
81  
	#MAX_VC
 4

	)
82  
	#MAX_NIC_PC
 10

	)
84  
	#NUM_NIC_PC
 ((
hybrid_t›ﬁogy
 =
NO
Ë? 
num_nic_pc
 : ((
node
< 
NUM_NODES
/2)?Çum_nic_p¯: 
c⁄˚¡øti⁄_degªe
 + 1)Ë

	)
85  
	#NUM_PC
 ((
hybrid_t›ﬁogy
 =
NO
Ë? 
num_pc
 : ((
node
< 
NUM_NODES
/2)?Çum_p¯: 
c⁄˚¡øti⁄_degªe
 + 1)Ë

	)
91  
	#VC_SET
 0

	)
92  
	#RESP_RQ_TRAFFIC
 1

	)
93  
	#ROUTER_INPUT_BUF_NON_UNIFORM
 0

	)
95  
	#ROUTER_INPUT_BUF_SIZE
 
rouãr_öp_buf_size


	)
96  
	#HYB_VC_RATIO
 4

	)
98  
	#CLINE_SIZE_BITS
 1024

	)
101  
	#WEST
 0

	)
102  
	#NORTH
 1

	)
103  
	#EAST
 2

	)
104  
	#SOUTH
 3

	)
106  
	#LEFT
 0

	)
107  
	#UP
 1

	)
108  
	#RIGHT
 2

	)
109  
	#DOWN
 3

	)
110  
	#THIS
 4

	)
112  
	#EDGE
 -1

	)
114  
	#RESERVED
 0

	)
115  
	#CANDIDATE
 1

	)
116  
	#AVAILABLE
 2

	)
117  
	#RESV_BLOCK
 3

	)
119  
	#SECDED_CHK_TIME
 0.0L

	)
120  
	#CRC_CHK_TIME
 0.0L

	)
121  
	#HBH_ORDERING_TIME
 0.0L

	)
122  
	#HBH_BUF_SIZE
 3

	)
124  
	#max
(
a
,
b
Ë (◊Ë> (bË? (aË: (b))

	)
128  
	#ADAP_THRES
 25

	)
129 
	e
{

130 
	mHEALTHY
 = 0,

131 
	mGOOD
 = 1,

132 
	mBAD
 = 2,

133 
	mWORSE
 = 3,

134 
	mTRAPPED
 = 4,

135 
	mFAIL
 = 5

136 } 
	tnode_œbñ_t
;

138 
	e
{

139 
	mBLOCK
 = 1,

140 
	mNOBLOCK
 = 0

141 } 
	tblock_Êag_t
;

143 
	e
{

144 
	mRESV
 = 1,

145 
	mUNRESV
 = 0

146 } 
	tªsv_Êag_t
;

150 
	s
{

151 
node_œbñ_t
 
	mhó…h_°©us
;

155 
	mFA_blocked_öfo
[4];

156 
	mFA_rouã_öfo
[4];

157 
	mFA_lök_öfo
[4];

158 
	mFA_√ighb‹_öfo
[4];

159 
	mFA_dúe˘i⁄_öfo
[4][4];

160 } 
	trouãr_t
;

163 
	s
{

164 
	mvc_°©
;

165 
	mout_pc
;

166 
	mout_pc_ˇnd
[
MAX_PC
];

167 
	mout_vc
;

168 
	mout_vc_ˇnd
[
MAX_VC
];

169 } 
	tvc_öfo_t
;

172 
	sªady_Êag


174 
	mnöbuf
: 1;

175 
	mnoutbuf
: 1;

176 
	m¨bôî
: 1;

177 
	m¨bôî_tmp
: 1;

178 
	mxb¨ö
: 1;

179 
	mxb¨out
: 1;

180 
	mröbuf
;

181 } 
	tªady_Êag_t
;

183 
	shas_⁄goög_Êô


185 
	m¨bôî
: 1;

186 
	mxb¨
: 1;

187 
	mnic
: 1;

188 } 
	thas_Êô_t
;

190 
	sxb¨_out


192 
	mpc
;

193 
	mvc
;

194 
	m√xt_pc
;

195 
	m√xt_vc
;

196 } 
	txb¨_out_t
;

198 
	sch™_°©


200 
	m°©us
;

201 
	mwaô_time
;

202 
	m£À˘ed_öput_pc
;

203 
	m£À˘ed_öput_vc
;

204 } 
	tch™_°©_t
;

206 
	sbuâîÊy


208 
	mk
;

209 
	mn
;

210 } 
	tbuâîÊy_t
;

212 
rouãr_t
 
rouãr
 [
MAX_NODES
];

213 
vc_öfo_t
 
vc_öfo
 [
MAX_NODES
][
MAX_PC
][
MAX_VC
];

214 
√ighb‹
 [
MAX_NODES
][
MAX_PC
-
MAX_NIC_PC
];

215 
ªady_Êag_t
 
is_ªady
 [
MAX_NODES
][
MAX_PC
][
MAX_VC
];

216 
has_Êô_t
 
has_Êô
 [
MAX_NODES
][
MAX_PC
][
MAX_VC
];

218 
mbox_t
 
rouãr_öput_buf
 [
MAX_NODES
][
MAX_PC
][
MAX_VC
];

219 
mbox_t
 
xb¨_buf
 [
MAX_NODES
][
MAX_PC
][
MAX_VC
];

221 
lök_ußge
 [
MAX_NODES
][
MAX_PC
-
MAX_NIC_PC
];

223 
°age1
();

224 
°age3
();

225 
VA_°age
();

226 
SA_°age
();

229 
dëîmöi°ic_rouã
(
˙
, 
dn
, 
pc
, 
vc
, * 
de°_pc
, * 
de°_vc
, 
Êô_t
 *
Êô_±r
);

230 
we°_fú°_rouã
(
˙
, 
dn
, 
pc
, 
vc
, * 
de°_pc
, * 
de°_vc
);

231 
fuŒy_ad≠tive_rouã
(
˙
, 
dn
, 
pc
, 
vc
, * 
de°_pc
, * 
de°_vc
);

232 
Áû_aw¨e_rouã
(
˙
, 
dn
, 
pc
, 
vc
, * 
de°_pc
, * 
de°_vc
);

235 
RR_¨bôî
(*
ªq
, *
wö
, 
num_£t
, 
£t_size
);

236 
LRU_¨bôî
(*
ªq
, *
wö
, 
num_£t
, 
£t_size
);

237 
boﬁ
 
föd_ˇndid©e
(
node
, 
ö_pc
, 
ö_vc
, *
ö_pc_ˇnd
, *
ö_vc_ˇnd
, 
Êô_t
 **
ˇnd_Êô_±r
);

	@router_common.cpp

45 
	~"maö.h
"

46 
	~"rouãr_comm⁄.h
"

47 
	~"sh¨ed.h
"

49 
	$ˇlc_co‹d
(
node
, *
x
, *
y
)

51 *
x
 = 
node
 % 
NUM_COLS
;

52 *
y
 = 
node
 / 
NUM_COLS
;

53 
	}
}

62 
gë_be°_¸edô
(
node
, 
¸edô
[
MAX_PC
-
MAX_NIC_PC
], 
be°_vc
[MAX_PC-MAX_NIC_PC])

64 
	g√xt_node
, 
	g√xt_pc
, 
	gpc
, 
	gvc
, 
	gvc_ödex
, 
	gtmp_max
, 
	gtmp_vc
;

65 
	gœ°_u£d_vc
[
MAX_NODES
][
MAX_PC
-
MAX_NIC_PC
] = {0};

67 
	gpc
=0;Öc<
	gNUM_PC
 - 
	gNUM_NIC_PC
;Öc++)

69 
	gtmp_max
=-1;

70 
	gtmp_vc
 =-1;

71 
	g√xt_node
 = 
√ighb‹
[
node
][
pc
];

73 
	g√xt_node
 !
EDGE
 && 
rouãr
[
√xt_node
].
hó…h_°©us
 !
FAIL
)

76 
√xt_pc
 = 
√ighb‹_pc
[
node
][
pc
];

79 
	gvc_ödex
=1; vc_ödex<=
NUM_VC
; vc_index++)

81 
	gvc
 = (
œ°_u£d_vc
[
node
][
pc
] + 
vc_ödex
Ë% 
NUM_VC
;

82 
	groutög_Æg‹ôhm
 =
AD
)

84  (
t›ﬁogy
 =
MESH
 && 
vc
 == 0) ||

85 (
t›ﬁogy
 =
TORUS
 && 
vc
 < 2) )

89  
	gis_ªady
[
√xt_node
][
√xt_pc
][
vc
].
	gröbuf
 > 
	gtmp_max
)

91 
	gtmp_max
 = 
is_ªady
[
√xt_node
][
√xt_pc
][
vc
].
röbuf
;

92 
	gtmp_vc
 = 
vc
;

96 
	g¸edô
[
pc
] = 
tmp_max
;

97 
	gbe°_vc
[
pc
] = 
tmp_vc
;

98 
	gœ°_u£d_vc
[
node
][
pc
] = 
tmp_vc
;

103 
	$gë_blocked
(
node
, *
is_blocked
)

105 
cur_dú
;

106 
¬eighb‹
;

108 
cur_dú
=
WEST
; cur_dú<=
SOUTH
; cur_dir++)

110 
¬eighb‹
 = 
√ighb‹
[
node
][
cur_dú
];

114 
rouãr
[
node
].
FA_blocked_öfo
[
cur_dú
] =
BLOCK
)

115 
is_blocked
[
cur_dú
] = 
YES
;

117 
is_blocked
[
cur_dú
] = 
NO
;

119 
	}
}

	@router_common.h

46 #i‚de‡
_rouãr_comm⁄_h


47  
	#_rouãr_comm⁄_h


	)
49 
	~"rouãr.h
"

51 
ˇlc_co‹d
(
node
, *
x
, *
y
);

52 
num_avaû_buf„r
(
node
, 
nbuf
[
MAX_PC
-
MAX_NIC_PC
], 
be°_vc
[MAX_PC-MAX_NIC_PC]);

53 
gë_blocked
(
node
, *
is_blocked
);

54 
gë_be°_¸edô
(
node
, 
¸edô
[
MAX_PC
-
MAX_NIC_PC
], 
be°_vc
[MAX_PC-MAX_NIC_PC]);

	@shared.h

1 #i‚de‡
SHARED_H


2  
	#SHARED_H


	)
4 
Êô_t
 *
‰ì_li°_hód
;

5 
Êô_t
 *
‰ì_li°_èû
;

8 
mbox_t
 
lök_buf
[
MAX_NODES
][
MAX_PC
-
MAX_NIC_PC
][
MAX_VC
];

9 
mbox_t
 
lök_buf2
[
MAX_NODES
][
MAX_PC
-
MAX_NIC_PC
][
MAX_VC
];

10 
lök_öfo
[
MAX_NODES
][
MAX_PC
-
MAX_NIC_PC
];

13 
FILE
 *
fsql
;

14 
sim_íd_Êag
;

15 #ifde‡
TR_INTEG


16 
sim_˛ock
;

18 
sim_°¨t_˛ock
;

19 
sim_˛ock
;

21 
num_öj_msg
;

22 
num_ejt_msg
;

23 
c⁄åﬁ_ejt_msg
;

24 
d©a_ejt_msg
;

25 
w¨mup_cy˛e
;

26 
num_ejt_Êô
;

27 
c⁄åﬁ_ejt_Êô
;

28 
d©a_ejt_Êô
;

29 
num_öj_Êô
;

30 
tŸÆ_dñay_cy˛e
;

31 
tŸÆ_∑ckë_dñay_cy˛e
;

32 
tŸÆ_œãncy
;

33 
tŸÆ_queueög_œãncy
;

34 
tŸÆ_√tw‹k_œãncy
;

35 
cmsg_tŸÆ_dñay_cy˛e
;

36 
cmsg_tŸÆ_œãncy
;

37 
cmsg_tŸÆ_queueög_œãncy
;

38 
cmsg_tŸÆ_√tw‹k_œãncy
;

39 
dmsg_tŸÆ_dñay_cy˛e
;

40 
dmsg_tŸÆ_œãncy
;

41 
dmsg_tŸÆ_queueög_œãncy
;

42 
dmsg_tŸÆ_√tw‹k_œãncy
;

43 
tŸÆ_num_h›
;

44 
tŸÆ_aged_Êô10
;

45 
tŸÆ_aged_Êô20
;

46 
tŸÆ_a˘ivôy
[
MAX_NODES
];

47 
tŸÆ_buf_ußge
[
MAX_NODES
];

48 
tŸÆ_ªå™s_buf_ußge
[
MAX_NODES
];

49 
num_esˇ≥_msgs
;

50 
Êôs_comböe_°©
;

53 
ªå™s_ty≥
;

54 
∑âîn
;

55 
¨ch
;

56 
ö_åaffic
;

57 
óæy_eje˘i⁄
;

58 
num_lök_îr
;

59 
num_routög_îr
;

60 
num_sw¨bôî_îr
;

61 
num_Áûed_lök
;

62 
num_Áûed_node
;

63 
num_e2e_«ck
;

64 
num_e2e_ªå™s
;

65 
routög_Æg‹ôhm
;

66 
t›ﬁogy
;

67 
vîbo£
;

68 
¥obe_vîbo£
;

69 
sql
;

70 
lﬂd_øã
;

71 
lök_îr_øã
;

72 
routög_îr_øã
;

73 
sw¨bôî_îr_øã
;

76 
mbox_t
 
nic_öput_buf
 [
MAX_NODES
][
MAX_NIC_PC
][
MAX_VC
];

77 
mbox_t
 
nic_ouçut_buf
[
MAX_NODES
][
MAX_NIC_PC
][
MAX_VC
];

80 
p_buf„r
;

81 
p_routög
;

82 
p_vc_¨b
;

83 
p_sw_¨b
;

84 
p_xb¨
;

85 
p_lök
;

86 
p_îr_chk
;

87 
p_ªå™s
;

90 
xb¨_out_t
 
xb¨_out
 [
MAX_NODES
][
MAX_PC
][
MAX_VC
];

91 
rouãr_t
 
rouãr
 [
MAX_NODES
];

92 
vc_öfo_t
 
vc_öfo
 [
MAX_NODES
][
MAX_PC
][
MAX_VC
];

93 
√ighb‹
 [
MAX_NODES
][
MAX_PC
-
MAX_NIC_PC
];

94 
√ighb‹_pc
 [
MAX_NODES
][
MAX_PC
-
MAX_NIC_PC
];

95 
ªady_Êag_t
 
is_ªady
 [
MAX_NODES
][
MAX_PC
][
MAX_VC
];

96 
has_Êô_t
 
has_Êô
 [
MAX_NODES
][
MAX_PC
][
MAX_VC
];

97 
mbox_t
 
rouãr_öput_buf
 [
MAX_NODES
][
MAX_PC
][
MAX_VC
];

98 
mbox_t
 
xb¨_buf
 [
MAX_NODES
][
MAX_PC
][
MAX_VC
];

99 
√º_chk_d⁄e
 [
MAX_NODES
];

100 
√º_found
 [
MAX_NODES
];

101 
lök_ußge
 [
MAX_NODES
][
MAX_PC
-
MAX_NIC_PC
];

103 
NUM_NODES
;

104 
NUM_ROWS
;

105 
NUM_COLS
;

106 
NUM_LOGICAL_NODES
;

109 
num_nic_pc
;

110 
NUM_VC
;

111 
num_pc
;

113 
buâîÊy_t
 
bÊy
;

115 
MSG_LEN
;

116 
hybrid_t›ﬁogy
;

117 
c⁄˚¡øãd
;

118 
c⁄˚¡øti⁄_degªe
;

119 
mu…i_cy˛e_SA
;

120 
xb¨_ö_‰ì
[
MAX_NODES
][
MAX_PC
];

121 
xb¨_out_‰ì
[
MAX_NODES
][
MAX_PC
];

122 
rouãr_öp_buf_size
;

123 
vc_°©e
[10][20];

125 
globÆ_msg_Àn
;

126 
loˇl_msg_Àn
;

127 
møtio
;

128 
c⁄åﬁ_msg_comböe
;

129 
msg_comböe_ˇndid©e_øtio
;

131 
FLIT_WIDTH
;

132 
PD_ROUTER
;

133 
PD_BUFFER
;

134 
pd_lök_1bô
;

135 
pd_lök_bus_1bô
;

136 
pd_p_1_bus
;

137 
pd_pv_1_bus
;

138 
pd_v_1_bus
;

139 
PD_XBAR_F
;

140 
PD_P_1_ARB
;

141 
PD_V_1_ARB
;

142 
PD_PV_1_ARB
;

143 
PD_BUS_ARB
;

144 
PL_P_1_ARB
;

145 
PL_V_1_ARB
;

146 
PL_PV_1_ARB
;

147 
∂_°©ic_íîgy
;

148 
ãchnﬁogy_node
;

150 
Êôs_⁄e_h›
;

151 
Êôs_two_h›
;

152 
Êôs_thªe_h›
;

153 
Êôs_thªe_∂us_h›
;

155 
BUS_WIDTH
;

157 
lök2
;

158 
bÆ™˚d_edge
;

160 
vc_utûiz©i⁄
[
MAX_NODES
][
MAX_PC
][
MAX_VC
];

163 
MSG_TO_INJECT
;

164 
WARMUP_MSG
;

165 
MSG_TO_EJECT
;

167 
£lf_thrŸéög_åaffic
;

169 
boﬁ
 
is_waôög
[
MAX_NODES
];

170 
sh‹t_Êôs_sum
;

172 
sh‹t_Êô_øtio
;

	@sim_engine.h

2 #i‚de‡
__SIM_ENGINE_H__


3  
	#__SIM_ENGINE_H__


	)
6 
boﬁ
 
ªad_√xt_a˘i⁄
(
TRANSTYPE
 *
å
);

7 
sim_£tup
(*
c⁄fig_fûe
);

8 
nox_£tup
(*
c⁄fig_fûe
);

9 
¥öt_mlc
();

10 
¥öt_Œc
();

11 
¥öt_mem
();

12 
¥öt_poﬁ
();

13 
¥öt_å
(
id
);

14 
¥öt_°©s
();

15 
sim_ígöe
();

16 
boﬁ
 
func_simuœã
(
ªfs
);

17 
kûlˇchesim
();

18 
boﬁ
 
mlc_å™s„r_ovîÊow
(
˝uid
);

19 
¥öt_d©a_sh¨ög
();

21 
com¥ess_fvc
(
TRANSTYPE
 *
å
);

23 
„tch_csize
(
d©a
[16]);

25 
	sbuf„r_t
 {

26 
	mpublic
:

27 
ty≥
[10];

28 
	maddr
;

29 
	mtid
;

30 
	mtime°amp
;

31 
	mö°_ªf
;

32 
	md©a_ªf
;

33 
	mtime_diff
;

	@sim_init.cpp

45 
	~<°dio.h
>

46 
	~<time.h
>

47 
	~<°dlib.h
>

48 
	~<°rög.h
>

49 
	~<m©h.h
>

50 
	~"maö.h
"

51 
	~"rouãr.h
"

52 
	~"powî.h
"

53 
	~"Êô.h
"

54 
	~"node_m¨kög.h
"

55 
	~"rouã_¥oximôy_aw¨e.h
"

56 
	~"sh¨ed.h
"

58 #ifde‡
TR_INTEG


60 #unde‡
INVALID


62 
	~"deföes.h
"

63 
	~"å™ß˘i⁄.h
"

64 
	~"globÆs.h
"

66 #unde‡
INVALID


67  
	#INVALID
 1

	)
71 
	$sim_öô
(
¨gc
, **
¨gv
)

73 
node
, 
pc
, 
vc
, 
cou¡
;

74 
sql_‚
[41];

75 
boﬁ
 
buf„r_dïth_nŸ_deföed
=
åue
;

78 
sim_íd_Êag
 = 
INVALID
;

79 
sim_˛ock
 = 0;

80 
num_öj_msg
 = 0;

81 
num_ejt_msg
 = 0;

82 
num_ejt_Êô
 = 0;

83 
num_lök_îr
 = 0;

84 
num_routög_îr
 = 0;

85 
num_sw¨bôî_îr
 = 0;

86 
w¨mup_cy˛e
 = 0;

87 
num_e2e_«ck
 = 0;

88 
num_e2e_ªå™s
 = 0;

89 
num_esˇ≥_msgs
 = 0;

92 
tŸÆ_∑ckë_dñay_cy˛e
 = 0;

93 
tŸÆ_dñay_cy˛e
 = 0;

94 
tŸÆ_œãncy
 = 0;

95 
tŸÆ_queueög_œãncy
 = 0;

96 
tŸÆ_√tw‹k_œãncy
 = 0;

97 
tŸÆ_aged_Êô10
 = 0;

98 
tŸÆ_aged_Êô20
 = 0;

100 
cmsg_tŸÆ_dñay_cy˛e
 = 0;

101 
cmsg_tŸÆ_œãncy
 = 0;

102 
cmsg_tŸÆ_queueög_œãncy
 = 0;

103 
cmsg_tŸÆ_√tw‹k_œãncy
 = 0;

105 
dmsg_tŸÆ_dñay_cy˛e
 = 0;

106 
dmsg_tŸÆ_œãncy
 = 0;

107 
dmsg_tŸÆ_queueög_œãncy
 = 0;

108 
dmsg_tŸÆ_√tw‹k_œãncy
 = 0;

110 
node
=0;Çode<
NUM_NODES
;Çode++)

111 
tŸÆ_buf_ußge
[
node
] = 0;

113 
p_buf„r
 = 0;

114 
p_routög
 = 0;

115 
p_vc_¨b
 = 0;

116 
p_sw_¨b
 = 0;

117 
p_xb¨
 = 0;

118 
p_lök
 = 0;

119 
p_îr_chk
 = 0;

120 
p_ªå™s
 = 0;

123 
	`öô_‰ì_li°
();

136 
	`§™d
(0);

142 
routög_Æg‹ôhm
 = 
DT
;

143 
t›ﬁogy
 = 
MESH
;

144 
lﬂd_øã
 = 0.25;

145 
vîbo£
 = 
NO
;

146 
¥obe_vîbo£
 = 
NO
;

147 
ªå™s_ty≥
 = 
NONE
;

148 
∑âîn
 = 
NR
;

149 
¨ch
 = 2;

150 
lök_îr_øã
 = 0.0;

151 
routög_îr_øã
 = 0.0;

152 
sw¨bôî_îr_øã
 = 0.0;

153 
ö_åaffic
 = 
UNIFORM
;

154 
num_Áûed_lök
 = 0;

155 
num_Áûed_node
 = 0;

156 
sql
 = 
NO
;

157 
óæy_eje˘i⁄
 = 
NO
;

159 
cou¡
=1;

160 
cou¡
 < 
¨gc
)

162 
	`°r°r
(
¨gv
[
cou¡
], "#"))

164 
	`¥ötf
("Ign‹ög Commíà%s",
¨gv
[
cou¡
]);

165 
cou¡
++;

168 
	`°r°r
(
¨gv
[
cou¡
], "-r"))

170 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

171 
cou¡
++;

172 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

173 
cou¡
 =
¨gc
Ë{
	`¥ötf
("NŸÉnoughÖ¨amëîs\n"); 
	`exô
(0);}

174 
	`°r°r
(
¨gv
[
cou¡
], "DT")Ë
routög_Æg‹ôhm
 = 
DT
;

175 
	`°r°r
(
¨gv
[
cou¡
], "AD")Ë
routög_Æg‹ôhm
 = 
AD
;

176 
	`°r°r
(
¨gv
[
cou¡
], "PA")Ë
routög_Æg‹ôhm
 = 
PA
;

177 
	`°r°r
(
¨gv
[
cou¡
], "SF")Ë
routög_Æg‹ôhm
 = 
SF
;

178 
	`°r°r
(
¨gv
[
cou¡
], "WF")Ë
routög_Æg‹ôhm
 = 
WF
;

179 {
	`¥ötf
("InvÆidÑoutögálg‹ôhm.\n"); 
	`exô
(0);}

180 
cou¡
++;

184 
	`°r°r
(
¨gv
[
cou¡
], "-t"))

186 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

187 
cou¡
++;

188 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

189 
cou¡
 =
¨gc
Ë{
	`¥ötf
("NŸÉnoughÖ¨amëîs\n"); 
	`exô
(0);}

190 
	`°r°r
(
¨gv
[
cou¡
], "MESH" )Ë
t›ﬁogy
 = 
MESH
;

191 
	`°r°r
(
¨gv
[
cou¡
], "TORUS")Ë
t›ﬁogy
 = 
TORUS
;

192 
	`°r°r
(
¨gv
[
cou¡
], "BFLY")Ë
t›ﬁogy
 = 
BFLY
;

193 
	`°r°r
(
¨gv
[
cou¡
], "BUS")Ë 
t›ﬁogy
 = 
BUS
;

194 
	`°r°r
(
¨gv
[
cou¡
], "XBAR")Ë 
t›ﬁogy
 = 
XBAR
;

195 
	`°r°r
(
¨gv
[
cou¡
], "FTREE")Ë 
t›ﬁogy
 = 
FTREE
;

196 
	`°r°r
(
¨gv
[
cou¡
], "TTREE")Ë 
t›ﬁogy
 = 
TTREE
;

197 {
	`¥ötf
("InvÆidÅ›ﬁogy.\n"); 
	`exô
(0);}

198 
cou¡
++;

201 
	`°r°r
(
¨gv
[
cou¡
], "-xshare"))

203 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

204 
c⁄åﬁ_msg_comböe
 = 
YES
;

205 
cou¡
++;

208 
	`°r°r
(
¨gv
[
cou¡
], "-hr"))

210 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

211 
£lf_thrŸéög_åaffic
 = 
YES
;

212 
cou¡
++;

216 
	`°r°r
(
¨gv
[
cou¡
], "-max-msgs"))

218 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

219 
cou¡
++;

220 
MSG_TO_INJECT
 = 
	`©ﬁ
(
¨gv
[
cou¡
]);

221 
WARMUP_MSG
 = 1000 < 
MSG_TO_INJECT
 ? 0 : 1000;

222 
MSG_TO_EJECT
 = 
MSG_TO_INJECT
 - 
WARMUP_MSG
;

223 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

224 
cou¡
++;

227 
	`°r°r
(
¨gv
[
cou¡
], "-ntech"))

229 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

230 
cou¡
++;

231 
ãchnﬁogy_node
 = 
	`©oi
(
¨gv
[
cou¡
]);

232 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

233 
cou¡
++;

238 
	`°r°r
(
¨gv
[
cou¡
], "-hybrid"))

240 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

241 
hybrid_t›ﬁogy
 = 
YES
;

242 
cou¡
++;

244 
møtio
 = 
	`©of
(
¨gv
[
cou¡
]);

245 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

246 
cou¡
++;

249 
	`°r°r
(
¨gv
[
cou¡
], "-sm"))

251 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

252 
hybrid_t›ﬁogy
 = 
YES
;

253 
cou¡
++;

254 
sh‹t_Êô_øtio
 = 
	`©of
(
¨gv
[
cou¡
]);

255 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

256 
cou¡
++;

261 
	`°r°r
(
¨gv
[
cou¡
], "-cdegree"))

263 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

264 
cou¡
++;

265 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

266 
c⁄˚¡øãd
 = 
YES
;

267 
c⁄˚¡øti⁄_degªe
 = 
	`©oi
(
¨gv
[
cou¡
]);

268 
cou¡
++;

272 
	`°r°r
(
¨gv
[
cou¡
], "-link2"))

274 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

275 
cou¡
++;

276 
lök2
 = 1;

279 
	`°r°r
(
¨gv
[
cou¡
], "-balanced"))

281 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

282 
cou¡
++;

283 
bÆ™˚d_edge
 = 
YES
;

288 
	`°r°r
(
¨gv
[
cou¡
], "-ary"))

290 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

291 
cou¡
++;

292 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

293 
bÊy
.
k
 = 
	`©oi
(
¨gv
[
cou¡
]);

294 
cou¡
++;

298 
	`°r°r
(
¨gv
[
cou¡
], "-fly"))

300 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

301 
cou¡
++;

302 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

303 
bÊy
.
n
 = 
	`©oi
(
¨gv
[
cou¡
]);

304 
cou¡
++;

309 
	`°r°r
(
¨gv
[
cou¡
], "-nvc"))

311 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

312 
cou¡
++;

313 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

314 
NUM_VC
 = 
	`©oi
(
¨gv
[
cou¡
]);

315 
cou¡
++;

320 
	`°r°r
(
¨gv
[
cou¡
], "-mlen"))

322 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

323 
cou¡
++;

324 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

325 
MSG_LEN
 = 
	`©oi
(
¨gv
[
cou¡
]);

326 
cou¡
++;

330 
	`°r°r
(
¨gv
[
cou¡
], "-fsize"))

332 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

333 
cou¡
++;

334 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

335 
FLIT_WIDTH
 = 
	`©oi
(
¨gv
[
cou¡
]);

336 
cou¡
++;

340 
	`°r°r
(
¨gv
[
cou¡
], "-bd"))

342 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

343 
cou¡
++;

344 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

345 
rouãr_öp_buf_size
 = 
	`©oi
(
¨gv
[
cou¡
]);

346 
cou¡
++;

347 
buf„r_dïth_nŸ_deföed
=
Ál£
;

353 
	`°r°r
(
¨gv
[
cou¡
], "-nr"))

355 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

356 
cou¡
++;

357 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

358 
cou¡
 =
¨gc
Ë{
	`¥ötf
("NŸÉnoughÖ¨amëîs\n"); 
	`exô
(0);}

361 
NUM_ROWS
 = 
	`©oi
(
¨gv
[
cou¡
]);

364 
cou¡
++;

368 
	`°r°r
(
¨gv
[
cou¡
], "-nc"))

370 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

371 
cou¡
++;

372 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

373 
cou¡
 =
¨gc
Ë{
	`¥ötf
("NŸÉnoughÖ¨amëîs\n"); 
	`exô
(0);}

376 
NUM_COLS
 = 
	`©oi
(
¨gv
[
cou¡
]);

379 
cou¡
++;

383 
	`°r°r
(
¨gv
[
cou¡
], "-l"))

385 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

386 
cou¡
++;

387 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

388 
cou¡
 =
¨gc
Ë{
	`¥ötf
("NŸÉnoughÖ¨amëîs\n"); 
	`exô
(0);}

391 
øã
 = 
	`©of
(
¨gv
[
cou¡
]);

393  0.0 < 
øã
 &&Ñate <= 1.0 )

394 
lﬂd_øã
 = 
øã
;

395 { 
	`¥ötf
("InvÆidÜﬂdÑ©êønge. Should bêbëwì¿0.0ánd 1.0\n"); 
	`exô
(0);}

397 
cou¡
++;

401 
	`°r°r
(
¨gv
[
cou¡
], "-elink"))

403 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

404 
cou¡
++;

405 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

406 
cou¡
 =
¨gc
Ë{
	`¥ötf
("NŸÉnoughÖ¨amëîs\n"); 
	`exô
(0);}

409 
øã
 = 
	`©of
(
¨gv
[
cou¡
]);

411  0.0 <
øã
 &&Ñate <= 0.5 )

412 
lök_îr_øã
 = 
øã
;

413 { 
	`¥ötf
("InvÆidÉº‹Ñ©êønge. Should bêbëwì¿0.0ánd 0.5\n"); 
	`exô
(0);}

415 
cou¡
++;

418 
	`°r°r
(
¨gv
[
cou¡
], "-eroute"))

420 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

421 
cou¡
++;

422 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

423 
cou¡
 =
¨gc
Ë{
	`¥ötf
("NŸÉnoughÖ¨amëîs\n"); 
	`exô
(0);}

426 
øã
 = 
	`©of
(
¨gv
[
cou¡
]);

428  0.0 <
øã
 &&Ñate <= 0.5 )

429 
routög_îr_øã
 = 
øã
;

430 { 
	`¥ötf
("InvÆidÉº‹Ñ©êønge. Should bêbëwì¿0.0ánd 0.5\n"); 
	`exô
(0);}

432 
cou¡
++;

435 
	`°r°r
(
¨gv
[
cou¡
], "-eswarb"))

437 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

438 
cou¡
++;

439 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

440 
cou¡
 =
¨gc
Ë{
	`¥ötf
("NŸÉnoughÖ¨amëîs\n"); 
	`exô
(0);}

443 
øã
 = 
	`©of
(
¨gv
[
cou¡
]);

445  0.0 <
øã
 &&Ñate <= 0.5 )

446 
sw¨bôî_îr_øã
 = 
øã
;

447 { 
	`¥ötf
("InvÆidÉº‹Ñ©êønge. Should bêbëwì¿0.0ánd 0.5\n"); 
	`exô
(0);}

449 
cou¡
++;

453 
	`°r°r
(
¨gv
[
cou¡
], "-fn"))

455 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

456 
cou¡
++;

457 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

458 
cou¡
 =
¨gc
Ë{
	`¥ötf
("NŸÉnoughÖ¨amëîs\n"); 
	`exô
(0);}

461 
nf_node
 = ()
	`©of
(
¨gv
[
cou¡
]);

463  
nf_node
 <= 25 )

464 
num_Áûed_node
 = 
nf_node
;

465 { 
	`¥ötf
("WêªcommídÅhênumbî o‡ÁûedÇodêtÿbêÀs†th™ 25.\n"); 
	`exô
(0);}

467 
cou¡
++;

471 
	`°r°r
(
¨gv
[
cou¡
], "-fl"))

473 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

474 
cou¡
++;

475 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

476 
cou¡
 =
¨gc
Ë{
	`¥ötf
("NŸÉnoughÖ¨amëîs\n"); 
	`exô
(0);}

479 
nf_lök
 = ()
	`©of
(
¨gv
[
cou¡
]);

481  
nf_lök
 <= 25 )

482 
num_Áûed_lök
 = 
nf_lök
;

483 { 
	`¥ötf
("WêªcommídÅhênumbî o‡ÁûedÜökÅÿbêÀs†th™ 25.\n"); 
	`exô
(0);}

485 
cou¡
++;

489 
	`°r°r
(
¨gv
[
cou¡
], "-s"))

491 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

492 
cou¡
++;

493 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

494 
cou¡
 =
¨gc
Ë{
	`¥ötf
("NŸÉnoughÖ¨amëîs\n"); 
	`exô
(0);}

495 
	`°r°r
(
¨gv
[
cou¡
], "FEC" )Ë
ªå™s_ty≥
 = 
FEC
;

496 
	`°r°r
(
¨gv
[
cou¡
], "HFEC" )Ë
ªå™s_ty≥
 = 
HFEC
;

497 
	`°r°r
(
¨gv
[
cou¡
], "E2E" )Ë
ªå™s_ty≥
 = 
E2E
;

498 
	`°r°r
(
¨gv
[
cou¡
], "HE2E" )Ë
ªå™s_ty≥
 = 
HE2E
;

499 
	`°r°r
(
¨gv
[
cou¡
], "HBH" )Ë
ªå™s_ty≥
 = 
HBH
;

500 
	`°r°r
(
¨gv
[
cou¡
], "NONE" )Ë
ªå™s_ty≥
 = 
NONE
;

501 {
	`¥ötf
("InvÆidÑëønsmissi⁄Öﬁicy.\n"); 
	`exô
(0);}

502 
cou¡
++;

506 
	`°r°r
(
¨gv
[
cou¡
], "-p"))

508 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

509 
cou¡
++;

510 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

511 
cou¡
 =
¨gc
Ë{
	`¥ötf
("NŸÉnoughÖ¨amëîs\n"); 
	`exô
(0);}

512 
	`°r°r
(
¨gv
[
cou¡
], "NR")Ë
∑âîn
 = 
NR
;

513 
	`°r°r
(
¨gv
[
cou¡
], "TP")Ë
∑âîn
 = 
TP
;

514 
	`°r°r
(
¨gv
[
cou¡
], "TN")Ë
∑âîn
 = 
TN
;

515 
	`°r°r
(
¨gv
[
cou¡
], "BC")Ë
∑âîn
 = 
BC
;

516 
	`°r°r
(
¨gv
[
cou¡
], "NB")Ë
∑âîn
 = 
NB
;

517 {
	`¥ötf
("InvÆidÅøffi¯∑âîn.\n"); 
	`exô
(0);}

518 
cou¡
++;

522 
	`°r°r
(
¨gv
[
cou¡
], "-a"))

524 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

525 
cou¡
++;

526 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

527 
cou¡
 =
¨gc
Ë{
	`¥ötf
("NŸÉnoughÖ¨amëîs\n"); 
	`exô
(0);}

528 
	`°r°r
(
¨gv
[
cou¡
], "1")Ë
¨ch
 = 1;

529 
	`°r°r
(
¨gv
[
cou¡
], "2")Ë
¨ch
 = 2;

530 
	`°r°r
(
¨gv
[
cou¡
], "3")Ë
¨ch
 = 3;

531 
	`°r°r
(
¨gv
[
cou¡
], "4")Ë
¨ch
 = 4;

532 {
	`¥ötf
("InvÆidÑouã∏¨chôe˘uª.\n"); 
	`exô
(0);}

533 
cou¡
++;

537 
	`°r°r
(
¨gv
[
cou¡
], "-i"))

539 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

540 
cou¡
++;

541 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

542 
cou¡
 =
¨gc
Ë{
	`¥ötf
("NŸÉnoughÖ¨amëîs\n"); 
	`exô
(0);}

543 
	`°r°r
(
¨gv
[
cou¡
], "UNIFORM")Ë
ö_åaffic
 = 
UNIFORM
;

544 
	`°r°r
(
¨gv
[
cou¡
], "MULTI")Ë
ö_åaffic
 = 
MULTIMEDIA
;

545 
	`°r°r
(
¨gv
[
cou¡
], "SSIM")Ë
ö_åaffic
 = 
SSIMILAR
;

546 {
	`¥ötf
("InvÆid i≈uàåaffic.\n"); 
	`exô
(0);}

547 
cou¡
++;

550 
	`°r°r
(
¨gv
[
cou¡
], "-v"))

552 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

553 
cou¡
++;

554 
vîbo£
 = 
YES
;

557 
	`°r°r
(
¨gv
[
cou¡
], "-q"))

559 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

560 
cou¡
++;

561 
sql
 = 
YES
;

565 
	`°r°r
(
¨gv
[
cou¡
], "-qf"))

567 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

568 
cou¡
++;

569 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

570 
cou¡
 =
¨gc
Ë{
	`¥ötf
("NŸÉnoughÖ¨amëîs\n"); 
	`exô
(0);}

571 (
¨gv
[
cou¡
]) > 40)

573 
	`¥ötf
("FilenameÅooÜong (should beÜessÅhan 40 characters)\n");

574 
	`exô
(0);

578 
	`°r˝y
(
sql_‚
, 
¨gv
[
cou¡
]);

579 
cou¡
++;

583 
	`°r°r
(
¨gv
[
cou¡
], "-j"))

585 
	`¥ötf
("%s",
¨gv
[
cou¡
]);

586 
cou¡
++;

587 
óæy_eje˘i⁄
 = 
YES
;

592 
	`¥ötf
("Invalid option.\n");

593 
	`exô
(0);

597 
sql
 =
YES
)

599 
sql_‚
 =
NULL
)

601 
	`¥ötf
("Filename for SQL isÇot specified. Add '-qf SQL_filename'.\n");

602 
	`exô
(0);

606  (
fsql
 = 
	`f›í
(
sql_‚
,"w"ËË=
NULL
 )

608 
	`Ârötf
(
°dîr
, "Cannot open file for SQL output");

609 
	`exô
(1);

613 
sql
 =
YES
)

614 
	`Ârötf
(
fsql
, "DELETE FROM FLIT;\nDELETE FROM FLOW;\n");

617 
NUM_NODES
 = 
NUM_COLS
*
NUM_ROWS
;

618 
NUM_LOGICAL_NODES
 = 
NUM_NODES
;

620 #ifde‡
TR_INTEG


621 
FLIT_WIDTH
 = 
Êô_size_byãs
*8;

622 
MSG_LEN
 = 
CLINE_SIZE_BITS
 / 
FLIT_WIDTH
;

623 
rouãr_öp_buf_size
 = 
MSG_LEN
+1 > 8 ? MSG_LEN+1:8;

625 
MSG_LEN
 = 
CLINE_SIZE_BITS
 / 
FLIT_WIDTH
;

626 
buf„r_dïth_nŸ_deföed
)

627 
rouãr_öp_buf_size
 = 
	`max
(2*
MSG_LEN
, 8);

630 
lök_Àngth
;

632 
t›ﬁogy
 =
XBAR
)

634 
NUM_LOGICAL_NODES
 = 
NUM_NODES
;

635 
num_nic_pc
 = 
NUM_NODES
;

636 
num_pc
 = 
NUM_NODES
;

637 
NUM_NODES
 = 1;

638 
NUM_ROWS
 = 1;

639 
NUM_COLS
 = 1;

641 
t›ﬁogy
 =
BUS
)

643 
NUM_LOGICAL_NODES
 = 
NUM_NODES
;

644 
num_nic_pc
 = 
NUM_NODES
+1;

645 
num_pc
 = 
NUM_NODES
+1;

646 
NUM_NODES
 = 1;

647 
NUM_ROWS
 = 1;

648 
NUM_COLS
 = 1;

649 
mu…i_cy˛e_SA
 = 2;

652 
t›ﬁogy
 =
BFLY
)

654 
num_nic_pc
 = 
bÊy
.
k
;

655 
num_pc
 = (
bÊy
.
n
-1)*(bÊy.
k
-1)+bfly.k;

656 
NUM_ROWS
 = 
bÊy
.
k
;

657 
NUM_COLS
 = 
bÊy
.
k
;

658 
NUM_NODES
 = ()
	`pow
(
bÊy
.
k
, bÊy.
n
-1);

659 
NUM_LOGICAL_NODES
 = 
NUM_NODES
*
bÊy
.
k
;

660 
lök_Àngth
 = 2;

662 
lök2
 = 1;

663 
node
 = 0;Çodê< 
NUM_NODES
;Çode++)

664 
pc
0;Ö¯< 
NUM_PC
-
NUM_NIC_PC
;Öc++)

665 
lök_öfo
[
node
][
pc
] = 
lök2
;

668 
t›ﬁogy
 =
MESH
 ||Å›ﬁogy =
TORUS
)

670  
NUM_ROWS
 > 
MAX_ROWS
 )

671 { 
	`¥ötf
("InvÆidÇumÑows,Éx˚ed†maxÇumÑow†%d\n", 
MAX_ROWS
); 
	`exô
(0);}

672  
NUM_COLS
 > 
MAX_COLS
 )

673 { 
	`¥ötf
("InvÆidÇumÑows,Éx˚ed†maxÇumÑow†%d\n", 
MAX_COLS
); 
	`exô
(0);}

674 
num_pc
 = 5;

675 
num_nic_pc
=1;

678 
c⁄˚¡øãd
 =
YES
 && 
hybrid_t›ﬁogy
 =
NO
)

680 
num_pc
 =Çum_p¯- 
num_nic_pc
 + 
c⁄˚¡øti⁄_degªe
;

681 
num_nic_pc
 = 
c⁄˚¡øti⁄_degªe
;

682 
NUM_LOGICAL_NODES
 = 
NUM_NODES
 * 
c⁄˚¡øti⁄_degªe
;

684 
lök2
 = 1;

685 
node
 = 0;Çodê< 
NUM_NODES
;Çode++)

686 
pc
0;Ö¯< 
NUM_PC
-
NUM_NIC_PC
;Öc++)

687 
lök_öfo
[
node
][
pc
] = 
lök2
;

688 
lök_Àngth
 = 
c⁄˚¡øti⁄_degªe
/2;

692 
hybrid_t›ﬁogy
 =
YES
)

694 
num_pc
 =Çum_p¯- 
num_nic_pc
 + 1;

695 
num_nic_pc
 = 0;

696 
NUM_LOGICAL_NODES
 = 
NUM_NODES
*
c⁄˚¡øti⁄_degªe
;

697 
NUM_NODES
 = 2*NUM_NODES;

698 
mu…i_cy˛e_SA
 = 2;

699 
lök_Àngth
 = 2;

700 
lök2
 = 1;

701 
node
 = 0;Çodê< 
NUM_NODES
/2;Çode++)

702 
pc
0;Ö¯< 
NUM_PC
-
NUM_NIC_PC
;Öc++)

703 
lök_öfo
[
node
][
pc
] = 
lök2
;

706 
	`¥ötf
("\nSettingÇumÇodes:%dÜogicalÇodes:%dÇumÖc:%dÇicÖc:%dÇum vc:%d msgÜen:%d buf depth:%d cdegree:%d\n",

707 
NUM_NODES
,
NUM_LOGICAL_NODES
,
num_pc
,
num_nic_pc
,
NUM_VC
,
MSG_LEN
,
rouãr_öp_buf_size
,
c⁄˚¡øti⁄_degªe
);

710 
node
=0;Çode<
NUM_NODES
;Çode++)

711 
pc
=0;Öc<
NUM_PC
;Öc++)

712 
vc
=0; vc<
NUM_VC
; vc++)

714 
has_Êô
[
node
][
pc
][
vc
].
¨bôî
 = 
NO
;

715 
has_Êô
[
node
][
pc
][
vc
].
xb¨
 = 
NO
;

718 #ifde‡
TR_INTEG


719 
˝u
=0,
ˇche
=0;

720 
¬odes
 = 
NUM_NODES
;

721 
c‹es_≥r_˛u°î
 = 1;

722 
cd
 = 
c⁄˚¡øti⁄_degªe
;

724 
hybrid_t›ﬁogy
 =
YES
)

725 
¬odes
 = 
NUM_NODES
/2;

727 
t›ﬁogy
 =
BFLY
)

728 
cd
 = 
bÊy
.
k
;

729 
num˝us
 <= 4)

731 
ãchnﬁogy_node
 = 70;

732 
pd_lök_bus_1bô
 =0.042768;

734 
num˝us
 <= 8)

736 
ãchnﬁogy_node
 = 50;

737 
pd_lök_bus_1bô
 = 0.0313;

739 
num˝us
 <= 16)

741 
ãchnﬁogy_node
 = 35;

742 
pd_lök_bus_1bô
 = 0.0233;

746 
c‹es_≥r_˛u°î
 = 
num˝us
/
¬odes
 < 1 ? 1 :Çumcpus/nnodes;

748 
NUM_LOGICAL_NODES
 !
num˝us
 + 
num_Œc_b™ks
)

750 
	`¥ötf
("ERR CMPÇëw‹k sizênŸ machög NoX c⁄figuøti⁄!!ÇoxÇodes:%d cm∞nodes:%d\n",
NUM_LOGICAL_NODES
,
num˝us
+
num_Œc_b™ks
);

751 
	`exô
(1);

755 
t›ﬁogy
 =
MESH
 && 
c⁄˚¡øti⁄_degªe
 <2)

759 
i
 = 0; i< 
NUM_ROWS
; i++)

760 
j
 = 0; j< 
NUM_COLS
; j++)

762 (
i
==0 || i==
NUM_ROWS
-1Ë&& 
˝u
 < 
num˝us
 )

764 
˝u_√tw‹k_œyout
[
˝u
++] = 
i
*
NUM_COLS
 + 
j
;

766 
	`¥ötf
("˝u :%dÇnode:%d\n",
˝u
-1,
˝u_√tw‹k_œyout
[cpu-1]);

770 
ˇche_√tw‹k_œyout
[
ˇche
++] = 
i
*
NUM_COLS
 + 
j
;

772 
	`¥ötf
("ˇchê:%dÇnode:%d\n",
ˇche
-1,
ˇche_√tw‹k_œyout
[cache-1]);

782 
i
 = 0; i< 
¬odes
; i++)

783 
j
 = 0; j< 
cd
; j++)

785 
j
 < 
c‹es_≥r_˛u°î
 && 
˝u
 < 
num˝us
)

787 
˝u_√tw‹k_œyout
[
˝u
++] = 
i
*
cd
 + 
j
;

789 
	`¥ötf
("˝u :%dÇnode:%d\n",
˝u
-1,
˝u_√tw‹k_œyout
[cpu-1]);

793 
ˇche_√tw‹k_œyout
[
ˇche
++] = 
i
*
cd
 + 
j
;

795 
	`¥ötf
("ˇchê:%dÇnode:%d\n",
ˇche
-1,
ˇche_√tw‹k_œyout
[cache-1]);

801 
˝u
 !
num˝us
 || 
ˇche
 !
num_Œc_b™ks
)

803 
	`¥ötf
("LayoutÇot complete!!! cpu :%d cache: %dÇumcpus: %dÇum_llc_banks: %d cd:%dÇnodes:%d\n",

804 
˝u
, 
ˇche
, 
num˝us
, 
num_Œc_b™ks
,
cd
,
¬odes
);

805 
	`exô
(1);

809 
	`node_öô
();

810 
	`hó…h_öô
();

812 
PD_ROUTER
 = 
PD_ROUTER_45nm
;

813 
PD_BUFFER
 = 
PD_BUFFER_64_45nm
;

814 
PD_P_1_ARB
 = 
PD_5_1_45nm
;

815 
PD_V_1_ARB
 = 
PD_2_1_45nm
;

816 
PD_PV_1_ARB
 = 
PD_10_1_45nm
;

817 
PD_XBAR_F
 = 
PD_XBAR_F_5P_64_45nm
;

818 
pd_lök_1bô
 = 
PD_LINK_1B_45nm
;

821 #i‚de‡
TR_INTEG


822 
NUM_LOGICAL_NODES
 <= 16)

823 
ãchnﬁogy_node
 = 70;

824 
NUM_LOGICAL_NODES
 <= 32)

825 
ãchnﬁogy_node
 = 50;

826 
NUM_LOGICAL_NODES
 <= 64)

827 
ãchnﬁogy_node
 = 35;

828 
NUM_LOGICAL_NODES
 <= 128)

829 
ãchnﬁogy_node
 = 22;

830 
NUM_LOGICAL_NODES
 <= 256)

831 
ãchnﬁogy_node
 = 16;

833 
hybrid_t›ﬁogy
 =
YES
)

834 
BUS_WIDTH
=()(
FLIT_WIDTH
/
møtio
);

835 
t›ﬁogy
 =
BUS
)

836 
BUS_WIDTH
 = 
FLIT_WIDTH
;

838 
FILE
 *
Â_pow
 = 
	`f›í
("power-config", "r");

839 
Â_pow
 =
NULL
)

841 
	`¥ötf
("ERR ! cannot openÅhe file specifingÅheÖowerÇumbers for xbaránd buffer!\n");

842 
	`exô
(1);

845 
boﬁ
 
c⁄fig_found
 = 
Ál£
;

846 
buf„r
[100];

847 
node
 = 0;

848 
c_≈c
 = 
NUM_PC
;

849 
t›ﬁogy
 =
TORUS
 && 
NUM_ROWS
 == 1)

850 
c_≈c
 = 3;

852 !
	`„of
(
Â_pow
))

854 
fz
=0, 
≈c
=0, 
ä
=45;

855 
bus_ovîhód
;

856 
	`fgës
(
buf„r
,100,
Â_pow
);

857 
	`ssˇnf
(
buf„r
,"%d\t%d\t%d\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\n", &
ä
, &
≈c
, &
fz
, &
PD_BUFFER
, &
PD_XBAR_F
,

858 &
pd_lök_1bô
, &
PD_P_1_ARB
, &
PD_PV_1_ARB
, &
PD_V_1_ARB
,&
pd_lök_bus_1bô
,&
bus_ovîhód
,&
∂_°©ic_íîgy
);

859 
fz
 =
FLIT_WIDTH
 && 
≈c
 =
c_≈c
 && 
ä
 =
ãchnﬁogy_node
)

861 
c⁄fig_found
 = 
åue
;

862 
pd_lök_1bô
 =Öd_lök_1bô*
lök_Àngth
 + 
bus_ovîhód
/
BUS_WIDTH
;

869 !
c⁄fig_found
)

871 
	`¥ötf
("Powî C⁄figÇŸ found !!Åech = %d P = %d W = %d deÁu…ögÅÿMESHáà45nm, 64 bô flô size\n", 
ãchnﬁogy_node
, 
NUM_PC
, 
FLIT_WIDTH
);

874 
	`f˛o£
(
Â_pow
);

876 
hybrid_t›ﬁogy
 =
YES
)

878 
Â_pow
 = 
	`f›í
("power-config", "r");

879 
c_≈c
 = 
c⁄˚¡øti⁄_degªe
;

880 
c⁄fig_found
 = 
Ál£
;

881 !
	`„of
(
Â_pow
))

883 
fz
=0, 
≈c
=0, 
ä
=45;

884 
pd_buff
, 
pd_xb¨
,
pd_lök1
,
bus_bô
,
busovî
,
°©ic_e
;

885 
	`fgës
(
buf„r
,100,
Â_pow
);

886 
	`ssˇnf
(
buf„r
,"%d\t%d\t%d\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\n", &
ä
, &
≈c
,

887 &
fz
, &
pd_buff
, &
pd_xb¨
, &
pd_lök1
, &
pd_p_1_bus
, &
pd_pv_1_bus
,

888 &
pd_v_1_bus
,&
bus_bô
,&
busovî
, &
°©ic_e
);

889 
≈c
 =
c_≈c
 && 
ä
 =
ãchnﬁogy_node
)

890 {
c⁄fig_found
 = 
åue
; ;}

892 !
c⁄fig_found
)

894 
	`¥ötf
("BUS Powî C⁄figÇŸ found !!árbôî degªê: %dÅechnﬁogy_nodê: %d\n", 
c_≈c
, 
ãchnﬁogy_node
);

895 
	`exô
(1);

900 
hybrid_t›ﬁogy
 =
YES
 && (()(
MSG_LEN
*
møtio
) == 0) )

902 
	`¥ötf
("Invalid Hybrid msgÑatio : %.2f, mlen : %d,Üocal msgÜen should be greaterÅhan zero!\n",

903 
møtio
, 
MSG_LEN
);

904 
	`exô
(1);

906 
hybrid_t›ﬁogy
 =
YES
 && (
rouãr_öp_buf_size
 < 2*
MSG_LEN
*(1-
møtio
)) )

908 
	`¥ötf
("Invalid Hybrid buffer depth glen : %d,Ülen :%d ,Ñequired depth:%d , current depth :%d\n",

909 
MSG_LEN
, ()(
møtio
*MSG_LEN), ()(2*MSG_LEN*(1-møtio)), 
rouãr_öp_buf_size
);

910 
	`exô
(1);

913 
hybrid_t›ﬁogy
 =
YES
)

914 
	`¥ötf
(" Hybrid c⁄figÜoˇ»msgÜí : %d globÆ msgÜí : %d\n", ()(
møtio
*
MSG_LEN
), MSG_LEN);

916 
routög_Æg‹ôhm
 =
PA
)

918 
	`öô_FA_rouã_öfo
();

919 
	`öô_FA_√ighb‹_öfo
();

920 
	`öô_FA_dúe˘i⁄_öfo
();

923 
	}
}

	@sim_result.cpp

46 
	~"maö.h
"

47 
	~"rouãr.h
"

48 
	~"nic.h
"

49 
	~"sim_ªsu….h
"

50 
	~"sh¨ed.h
"

52 #ifde‡
TR_INTEG


53 
sim_°¨t_˛ock
;

57 
	$sim_ªsu…
()

61 
cy˛e_time
;

62 
tŸÆ_num_msgs
;

64 
π_Àakage
=0.0, 
nic_Àakage
=0.0;

65 
tŸÆ_íîgy
=0;

66 
avg_powî
=0.0;

68 
tŸÆ_lök_ußge
=0, 
num_u£d_lök
=0, 
tŸÆ_nic_buf_size
;

69 
lök_throughput
=0.0;

71 
buf_ußge
=0, 
ªå™s_buf_ußge
=0;

72 
buf_ußge_øtio
=0, 
ªå™s_buf_ußge_øtio
=0;

74 
node
, 
pc
, 
vc
, 
row
, 
cﬁ
;

77 
node
=0;Çode<
NUM_NODES
;Çode++)

78 
pc
=0;Öc<
NUM_PC
-
NUM_NIC_PC
;Öc++)

79 
tŸÆ_lök_ußge
 +
lök_ußge
[
node
][
pc
];

81 
node
=0;Çode<
NUM_NODES
;Çode++)

84 
num_u£d_lök
 +(
rouãr
[
node
].
FA_lök_öfo
[
LEFT
 ] =
HEALTHY
)? 1:0;

85 
num_u£d_lök
 +(
rouãr
[
node
].
FA_lök_öfo
[
RIGHT
] =
HEALTHY
)? 1:0;

86 
num_u£d_lök
 +(
rouãr
[
node
].
FA_lök_öfo
[
UP
 ] =
HEALTHY
)? 1:0;

87 
num_u£d_lök
 +(
rouãr
[
node
].
FA_lök_öfo
[
DOWN
 ] =
HEALTHY
)? 1:0;

91 
lök_throughput
 = ()
tŸÆ_lök_ußge
 /

92 –()(
num_u£d_lök
Ë* ()(
sim_˛ock
-
w¨mup_cy˛e
) );

97 
cy˛e_time
 = (
¨ch
 =2)? 
CYCLE_TIME2
 : 
CYCLE_TIME3
;

98 
tŸÆ_num_msgs
 = (
num_ejt_msg
 + 
WARMUP_MSG
);

129 
tŸÆ_íîgy
 +(
p_buf„r
 + 
p_routög
 + 
p_vc_¨b
 + 
p_sw_¨b
 + 
p_xb¨
 +

130 
p_lök
 + 
p_îr_chk
 + 
p_ªå™s
) ;

133 
π_Àakage
 = 
PL_BUFFER
*
ROUTER_INPUT_BUF_SIZE
*
NUM_PC
*
NUM_VC
 +

135 
PL_ROUTER
 +

136 
PL_XBAR_F
 +

137 ((
ªå™s_ty≥
==
FEC
 ||Ñëøns_ty≥ ==
HFEC
)? 2*
PL_SECDED
 : 0) +

138 ((
ªå™s_ty≥
==
E2E
)? 2*
PL_CRCCHK
 + 
PL_E2ECTR
 +

139 
E2E_SRC_BUF_SIZE
*
PL_E2EBUF
*
NUM_VC
*
NUM_PC
:0) +

140 ((
ªå™s_ty≥
==
HBH
 ||Ñëøns_ty≥==
HFEC
 ||Ñëøns_ty≥==
HE2E
)?

141 
PL_CRCCHK
*2 + 
PL_HBHCTR
 +

142 5*
PL_HBHBUF
*
NUM_VC
*
NUM_PC
:0) +

143 
PL_LINK
*
num_u£d_lök
;

146 
tŸÆ_nic_buf_size
 = 
NIC_INPUT_BUF_SIZE
 + 
NIC_OUTPUT_BUF_SIZE
;

147 
nic_Àakage
 = 
PL_BUFFER
 * 
tŸÆ_nic_buf_size
;

154 #ifde‡
TR_INTEG


155 
sim_˛ock
 = sim_˛ock - 
sim_°¨t_˛ock
;

157 
num_rouãrs
 = 
hybrid_t›ﬁogy
 =
YES
 ? 
NUM_NODES
/2 : NUM_NODES;

158 
avg_powî
 = (
tŸÆ_íîgy
 + 
∂_°©ic_íîgy
*
num_rouãrs
Ë/ (
cy˛e_time
*()
sim_˛ock
);

164 
buf_ußge
 = 0;

165 
node
=0;Çode<
NUM_NODES
;Çode++)

167 
row
 = 
node
 / 
NUM_COLS
;

168 
cﬁ
 = 
node
 % 
NUM_COLS
;

170  (
row
 > 0 &&Ñow < 
NUM_ROWS
-1) &&

171 (
cﬁ
 > 0 && cﬁ < 
NUM_ROWS
-1) )

172 
buf_ußge
 +(
tŸÆ_buf_ußge
[
node
]);

176 
buf_ußge_øtio
 = 
buf_ußge
/()(
NUM_NODES
*
NUM_PC
*
NUM_VC
*
ROUTER_INPUT_BUF_SIZE
*(
sim_˛ock
-
w¨mup_cy˛e
));

179 
ªå™s_buf_ußge
 = 0;

180 
ªå™s_buf_ußge_øtio
 = 0;

181 
node
=0;Çode<
NUM_NODES
;Çode++)

182 
ªå™s_buf_ußge
 +(
tŸÆ_ªå™s_buf_ußge
[
node
]);

183 
ªå™s_buf_ußge_øtio
 = 
ªå™s_buf_ußge
 / ()(
NUM_NODES
*
NUM_PC
*
NUM_VC
*
ROUTER_INPUT_BUF_SIZE
*
sim_˛ock
);

184 
ªå™s_buf_ußge_øtio
 *= 3;

188 
	`¥ötf
("\n");

189 
	`¥ötf
("============ Summary ofÅhe simulation ============\n");

190 
	`¥ötf
("- TŸÆ simuœti⁄ cy˛ê : %Œd cy˛es\n", ()
sim_˛ock
);

191 
	`¥ötf
("- TŸÆ Aged Flô†(10~20/>20Ë : %5d/%5d flôs\n", 
tŸÆ_aged_Êô10
, 
tŸÆ_aged_Êô20
);

192 
	`¥ötf
("- #Éje˘ed msg / # inje˘ed msg: %5d/%5d msgs\n", 
num_ejt_msg
, 
num_öj_msg
);

193 
	`¥ötf
("- #Éje˘ed fà/ # inje˘ed fà : %5d/%5d flôs\n", 
num_ejt_Êô
, 
num_öj_Êô
);

194 
	`¥ötf
("- Inje˘i⁄ R©ê(A˘uÆ/SëË : %5.2f%% / %5.2f%%\n", ()(
num_öj_msg
*100)/()(
NUM_LOGICAL_NODES
*
sim_˛ock
), 
lﬂd_øã
*100);

195 
	`¥ötf
("- Avg. Throughpuà : %13.6‡∑ckës/cy˛e†\n", ()(
num_ejt_msg
)/()(
sim_˛ock
));

196 
	`¥ötf
("- Avg. MesßgêL©ícy : %13.6‡cy˛e†\n", 
tŸÆ_∑ckë_dñay_cy˛e
 / ()(
num_ejt_msg
));

197 
	`¥ötf
("- Avg. Flô L©ícy : %13.6‡cy˛e†\n", 
tŸÆ_œãncy
 / ()(
num_ejt_Êô
));

198 
	`¥ötf
("- Avg. Flô Queueög L©ícy : %13.6‡cy˛e†\n", 
tŸÆ_queueög_œãncy
 / ()(
num_ejt_Êô
));

199 
	`¥ötf
("- Avg. Flô Blockög L©ícy : %13.6‡cy˛e†\n", 
tŸÆ_dñay_cy˛e
 / ()(
num_ejt_Êô
));

200 
	`¥ötf
("- Avg. Flô Tøns„∏L©ícy : %13.6‡cy˛e†\n", (
tŸÆ_√tw‹k_œãncy
 - 
tŸÆ_dñay_cy˛e
Ë/ ()(
num_ejt_Êô
));

201 
	`¥ötf
("- Avg. Flô Nëw‹k L©ícy : %13.6‡cy˛e†\n", 
tŸÆ_√tw‹k_œãncy
 / ()(
num_ejt_Êô
));

203 
	`¥ötf
("- TŸÆ E√rgy C⁄sum±i⁄ : %13.6‡nJ(10^-9)\n", 
tŸÆ_íîgy
/1000);

204 
	`¥ötf
("- TŸÆ Lök E√rgy C⁄sum±i⁄ : %13.6‡nJ(10^-9)\n", 
p_lök
/1000);

205 
	`¥ötf
("- TŸÆ Swôchög E√rgy C⁄sum±i⁄ : %13.6‡nJ(10^-9)\n", 
p_xb¨
/1000);

206 
	`¥ötf
("- TŸÆ Buf„∏E√rgy C⁄sum±i⁄ : %13.6‡nJ(10^-9)\n", 
p_buf„r
/1000);

207 
	`¥ötf
("- TŸÆ Arbôî E√rgy C⁄sum±i⁄ : %13.6‡nJ(10^-9)\n", (
p_sw_¨b
+
p_vc_¨b
)/1000);

208 
	`¥ötf
("- Avg. E√rgyÖî mesßgê : %13.6‡nJ(10^-9)\n", (
tŸÆ_íîgy
/1000Ë/ 
tŸÆ_num_msgs
);

209 
	`¥ötf
("- Avg. E√rgy Dñay Produ˘ : %13.6‡pJ*cy˛e\n", 
tŸÆ_íîgy
 * (()
tŸÆ_œãncy
 / ()(
num_ejt_Êô
)));

210 
	`¥ötf
(" (=Total Energy * Avg. Latency)\n");

211 
	`¥ötf
("- Avg. Powî c⁄sum±i⁄ : %13.6‡W\n", 
avg_powî
);

212 
	`¥ötf
("- Powî Dñay Produ˘ : %13.6‡W*cy˛e\n", 
avg_powî
 * (()
tŸÆ_∑ckë_dñay_cy˛e
 / ()(
num_ejt_msg
)));

213 
	`¥ötf
(" (=Avg. Power * Avg. Latency)\n");

214 
lök_îr_øã
 >0)

215 
	`¥ötf
("- Lök Eº‹ R©ê : %13.6‡%% (%d dëe˘ed), E2E NACK/RETRANS:[%d/%d]\n", 
lök_îr_øã
 * 100, 
num_lök_îr
, 
num_e2e_«ck
, 
num_e2e_ªå™s
);

216 
routög_îr_øã
 >0)

217 
	`¥ötf
("- Routög Eº‹ R©ê : %13.6‡%% (%d dëe˘ed)\n", 
routög_îr_øã
 * 100, 
num_routög_îr
);

218 
sw¨bôî_îr_øã
 >0)

219 
	`¥ötf
("- Swôch Arbôî Eº‹ R©ê : %13.6‡%% (%d dëe˘ed)\n", 
sw¨bôî_îr_øã
 * 100, 
num_sw¨bôî_îr
);

220 
	`¥ötf
("- Avg. Re•⁄£ Timê : %13.6‡n† \n", (
tŸÆ_œãncy
 / ()(
num_ejt_Êô
)Ë* 
cy˛e_time
);

221 
	`¥ötf
("- Avg. Nëw‹k Re•⁄£ Timê : %13.6‡n† \n", (
tŸÆ_√tw‹k_œãncy
 / ()(
num_ejt_Êô
)Ë* 
cy˛e_time
);

222 
	`¥ötf
("- Avg. Numbî o‡h›†≥∏Êô : %13.6‡h›† \n", ()
tŸÆ_num_h›
 / ()(
num_ejt_Êô
));

223 
	`¥ötf
("- Avg. Lök Throughpuà : %13.6‡Êôs/node/cy˛e\n", 
lök_throughput
);

224 
	`¥ötf
("- Avg. Buf„∏Utûiz©i⁄ : %13.6‡%%\n", 
buf_ußge_øtio
*100);

225 
	`¥ötf
("- Avg. HBH Buf„∏Utûiz©i⁄ : %13.6‡%%\n", 
ªå™s_buf_ußge_øtio
*100);

226 
	`¥ötf
("- TŸÆÇumbî o‡esˇ≥ msg† : %d \n", 
num_esˇ≥_msgs
);

228 
	`¥ötf
("- Avg. C⁄åﬁ Nëw‹k Blockög L©ícy : %13.6‡cy˛e†\n", 
cmsg_tŸÆ_dñay_cy˛e
 / ()(
c⁄åﬁ_ejt_Êô
));

229 
	`¥ötf
("- Avg. C⁄åﬁ L©ícy (≥∏ÊôË : %13.6‡cy˛e†\n", 
cmsg_tŸÆ_œãncy
 / ()(
c⁄åﬁ_ejt_Êô
));

230 
	`¥ötf
("- Avg. C⁄åﬁ Queueög L©ícy : %13.6‡cy˛e†\n", 
cmsg_tŸÆ_queueög_œãncy
 / ()(
c⁄åﬁ_ejt_Êô
));

231 
	`¥ötf
("- Avg. C⁄åﬁ Nëw‹k L©ícy : %13.6‡cy˛e†\n", 
cmsg_tŸÆ_√tw‹k_œãncy
 / ()(
c⁄åﬁ_ejt_Êô
));

232 
	`¥ötf
("- Avg. D©®Nëw‹k Blockög L©ícy : %13.6‡cy˛e†\n", 
dmsg_tŸÆ_dñay_cy˛e
 / ()(
d©a_ejt_Êô
));

233 
	`¥ötf
("- Avg. D©®L©ícy (≥∏ÊôË : %13.6‡cy˛e†\n", 
dmsg_tŸÆ_œãncy
 / ()(
d©a_ejt_Êô
));

234 
	`¥ötf
("- Avg. D©®Queueög L©ícy : %13.6‡cy˛e†\n", 
dmsg_tŸÆ_queueög_œãncy
 / ()(
d©a_ejt_Êô
));

235 
	`¥ötf
("- Avg. D©®Nëw‹k L©ícy : %13.6‡cy˛e†\n", 
dmsg_tŸÆ_√tw‹k_œãncy
 / ()(
d©a_ejt_Êô
));

238 
	`¥ötf
("- TŸÆÇumbî o‡C⁄åﬁ msg† : %Œd \n", 
c⁄åﬁ_ejt_Êô
);

239 
	`¥ötf
("- TŸÆÇumbî o‡D©®msg† : %Œd \n", 
num_ejt_msg
 - 
c⁄åﬁ_ejt_Êô
);

241 
	`¥ötf
("- TŸÆÇumbî o‡⁄êh› flô† : %Œd \n", 
Êôs_⁄e_h›
);

242 
	`¥ötf
("- TŸÆÇumbî o‡twÿh› flô† : %Œd \n", 
Êôs_two_h›
);

243 
	`¥ötf
("- TŸÆÇumbî o‡thªêh› flô : %Œd \n", 
Êôs_thªe_h›
);

244 
	`¥ötf
("- TŸÆÇumbî o‡thªê∂u†h› flô : %Œd \n", 
Êôs_thªe_∂us_h›
);

245 
c⁄åﬁ_msg_comböe
 =
YES
)

246 
	`¥ötf
("- R©iÿo‡ˇndid©e†found : %.2lf\n", 
msg_comböe_ˇndid©e_øtio
);

247 
	`¥ötf
("- R©iÿo‡sh‹àÊô† : %.2lf\n", 
sh‹t_Êôs_sum
/()(
num_ejt_Êô
));

248 
	`¥ötf
("===================================================\n");

277 
≥r_vc_utûiz©i⁄
[
MAX_VC
]={0};

278 
vc_utû_sum
=0;

280 
node
=0;Çodê< 
NUM_NODES
;Çode++)

281 
pc
=0;Ö¯< 
NUM_PC
;Öc++)

282 
vc
=0; v¯< 
NUM_VC
; vc++)

284 
vc_utû_sum
 +
vc_utûiz©i⁄
[
node
][
pc
][
vc
];

285 
≥r_vc_utûiz©i⁄
[
vc
] +
vc_utûiz©i⁄
[
node
][
pc
][vc];

287 
	`¥ötf
("- VC Utilization...\n");

288 
vc
=0; v¯< 
NUM_VC
; vc++)

289 
	`¥ötf
("- VC Utûz©i⁄ f‹ vútuÆ cúcuô %d : %.2l‡\n", 
vc
, ()
≥r_vc_utûiz©i⁄
[vc]/
vc_utû_sum
);

291 #ifde‡
TR_INTEG


292 
sim_˛ock
 = sim_˛ock + 
sim_°¨t_˛ock
;

295 
	}
}

	@sim_result.h

43 #i‚de‡
SIM_RESULT_H


44  
	#SIM_RESULT_H


	)
45 
sim_ªsu…
();

	@transaction.h

7 #i‚de‡
__TRANSACTION_H__


8  
	#__TRANSACTION_H__


	)
9 
	~<zlib.h
>

10 
	~<ve˘‹
>

11 
	~<m≠
>

12 
	~"deföes.h
"

13 
	~"ˇche.h
"

17 
	eå_ty≥
 { 
	mREAD
, 
	mWRITE
, 
	mSNOOP
 , 
	mWRITEBACK
};

18 
	eå_°©e
 { 
	mSTART
,

19 
	mEXIT
,

20 
	mMLC_BUS_TRANSFER
,

21 
	mMLC_QUEUED
,

22 
	mMLC_LOOK_UP
,

23 
	mLLC_BUS_TRANSFER
,

24 
	mLLC_ICN_OVERFLOW
,

25 
	mLLC_ICN_QUEUED
,

26 
	mLLC_ICN_TRANSFER
,

27 
	mLLC_QUEUED
,

28 
	mLLC_LOOK_UP
,

29 
	mMEM_QUEUED
,

30 
	mMEM_BUS_TRANSFER
,

31 
	mSNOOP_BLOCKED
,

32 
	mLLC_BLOCKED_QUEUE_HEAD
,

33 
	mLLC_REPLACE_SM
,

34 
	mMLC_RESPONSE_TRANSFER
,

35 
	mMLC_BLOCKED_HEAD_QUEUE
,

36 
	mMLC_REPLACE_SM
,

37 
	mMLC_RSM_LLC_TRANSFER
,

38 
	mMLC_RSM_LLC_LOOKUP
,

39 
	mLLC_RSM_LLC_LOOKUP
,

40 
	mLLC_MSHR_PENDING
,

41 
	mMLC_MSHR_PENDING
,

42 
	mLLC_RSM_LOOKUP_COMPLETE
,

43 
	mMLC_BQ_OVERFLOW
,

44 
	mLLC_BQ_OVERFLOW


47 
	s
{

48 
å_°©e
 
	m°©e
;

49 
	mtime°amp
;

50 } 
	thi°‹y_íåy_t
;

53 
˛ass
 
	cTRANSTYPE
 {

54 
	mpublic
:

55 
å_ty≥
 
ac˚s°y≥
;

56 
å_ty≥
 
	mty≥
;

57 
å_°©e
 
	m°©e
;

59 
	m°d
::
ve˘‹
<
hi°‹y_íåy_t
> 
hi°‹y
;

60 
å_°©e
 
	m¥ev_°©e
;

61 
	mˇche
;

62 
CACHE
 *
	ma˘ive_˝
;

63 
	mtime°amp
;

64 
	míãr_time
;

65 
	må_id
;

66 
	mmem_›_id
;

67 
	mc°©e
, 
	mmlc_°©e
, 
	mŒc_°©e
;

68 
	maddªss
;

69 
	m˝uid
;

70 
	m¥i
;

71 
	mtid
;

72 
	mpid
;

74 
	md©a
[16];

75 
	m¢o›_d©a
[16];

76 
	mvd©a
[16];

77 
	måa˚_d©a
[16];

80 
boﬁ
 
	mÁt_wrôe
;

81 
boﬁ
 
	mmlc_wbx_Át_wrôe
;

82 
	mlöesize
;

83 
	mcom∑˘i⁄_dñay
;

84 
	mnoxlöesize
;

86 
	mŒc_fú°
;

87 
	mv°©e
;

88 
	mvaddªss
;

89 
	mªp_pos
;

90 
	mv¥i
;

92 
boﬁ
 
	mmshr_≥ndög
[2];

95 
boﬁ
 
	mbq_dñëe
;

98 
	m∑ª¡
;

99 
	m¢o›_d⁄e
[
MAX_CORES
];

100 
	m¢o›_°©e
[
MAX_CORES
];

101 
	m¢o›_cou¡
;

104 
	m¢o›_övÆid©e
;

107 
boﬁ
 
	mŒc_memq_miss
;

108 
	mmlc_queue_waô
;

109 
	mŒc_queue_waô
;

110 
	mmem_queue_waô
;

111 
	m¢o›_waô
;

113 
	mmlcq_íãr
;

114 
	m¢o›q_íãr
;

115 
	mŒcq_íãr
;

116 
	mmemq_íãr
;

119 
boﬁ
 
	mmlc_bq_ovîÊow
;

120 
boﬁ
 
	mŒc_bq_ovîÊow
;

121 
boﬁ
 
	mmlc_rq_ovîÊow
;

122 
boﬁ
 
	mŒc_rq_ovîÊow
;

125 
	mªf_ö°
;

126 
	mªf_d©a
;

129 
å_°©e
 
	mŒc_å™s„r_°©e
;

130 
	m§c
;

131 
	md°
;

132 
boﬁ
 
	mi˙_å™s_comp
;

133 
	mmsg_öj_time
;

134 
	mmsg_size
;

138 
	$TRANSTYPE
() {

139 
ac˚s°y≥
 = 
READ
;

140 
ty≥
 = 
READ
;

141 
°©e
 = 
START
;

142 
¥ev_°©e
 = 
START
;

143 
ˇche
 = 
MLC
;

144 
a˘ive_˝
 = 
NULL
;

145 
time°amp
 = 0;

146 
íãr_time
 = 0;

147 
å_id
 = 0;

148 
c°©e
 = 0;

149 
mlc_°©e
 = 0;

150 
Œc_°©e
 = 0;

151 
addªss
 = 0;

152 
˝uid
 = 0;

153 
tid
 = 0;

154 
pid
 = 0;

155 
¥i
 = 0;

157 
i
 = 0; i<16; i++)

159 
d©a
[
i
]
åa˚_d©a
[i] = 
¢o›_d©a
[i] = 
vd©a
[i] =0;

163 
Át_wrôe
 = 
Ál£
;

164 
mlc_wbx_Át_wrôe
 = 
Ál£
;

165 
com∑˘i⁄_dñay
 = 0;

168 
Œc_fú°
 = 0;

169 
v°©e
 = 0;

170 
vaddªss
 = 0;

171 
v¥i
 = 0;

173 
mshr_≥ndög
[
MLC
] = 
Ál£
;

174 
mshr_≥ndög
[
LLC
] = 
Ál£
;

175 
bq_dñëe
 = 
Ál£
;

178 
∑ª¡
 = -1;

179 
i
 =0; i< 
MAX_CORES
 ; i++)

181 
¢o›_d⁄e
[
i
]=0;

182 
¢o›_°©e
[
i
]=0;

184 
¢o›_cou¡
 = 0;

185 
¢o›_övÆid©e
 = 0;

187 
Œc_memq_miss
 = 
Ál£
;

188 
mlc_queue_waô
 = 0;

189 
Œc_queue_waô
 = 0;

190 
mem_queue_waô
 = 0;

191 
¢o›_waô
 = 0;

193 
mlc_bq_ovîÊow
 = 
Ál£
;

194 
Œc_bq_ovîÊow
 = 
Ál£
;

195 
mlc_rq_ovîÊow
 = 
Ál£
;

196 
Œc_rq_ovîÊow
 = 
Ál£
;

199 
ªf_ö°
 = 0;

200 
ªf_d©a
 = 0;

202 
§c
 = 0;

203 
i˙_å™s_comp
 = 
Ál£
;

204 
d°
 = 0;

205 
msg_size
 = 4;

206 
Œc_å™s„r_°©e
 = 
MLC_RESPONSE_TRANSFER
;

207 
löesize
 = 16;

208 
noxlöesize
 = 16;

211 
mem_›_id
 = -1;

214 
	$c›y
(
TRANSTYPE
 
å
) {

215 
ac˚s°y≥
 = 
å
.accesstype;

216 
ty≥
 = 
å
.type;

217 
°©e
 = 
å
.state;

218 
¥ev_°©e
 = 
å
.prev_state;

219 
ˇche
 = 
å
.cache;

220 
a˘ive_˝
 = 
å
.active_cp;

221 
time°amp
 = 
å
.timestamp;

222 
íãr_time
 = 
å
.enter_time;

223 
å_id
 = 
å
.tr_id;

224 
c°©e
 = 
å
.cstate;

225 
mlc_°©e
 = 
å
.mlc_state;

226 
Œc_°©e
 = 
å
.llc_state;

227 
addªss
 = 
å
.address;

228 
˝uid
 = 
å
.cpuid;

229 
tid
 = 
å
.tid;

230 
pid
 = 
å
.pid;

231 
¥i
 = 
å
.pri;

233 
i
 = 0; i<16; i++)

235 
d©a
[
i
]
å
.data[i];

236 
åa˚_d©a
[
i
]
å
.trace_data[i];

241 
Œc_fú°
 = 
å
.llc_first;

242 
v°©e
 = 
å
.vstate;

243 
vaddªss
 = 
å
.vaddress;

244 
v¥i
 = 
å
.vpri;

247 
∑ª¡
 = 
å
.parent;

248 
i
 =0; i< 
MAX_CORES
 ; i++)

250 
¢o›_d⁄e
[
i
] = 
å
.snoop_done[i];

251 
¢o›_°©e
[
i
] = 
å
.snoop_state[i];

253 
¢o›_cou¡
 = 
å
.snoop_count;

254 
¢o›_övÆid©e
 = 
å
.snoop_invalidate;

256 
ªf_d©a
 = 
å
.ref_data;

257 
ªf_ö°
 = 
å
.ref_inst;

258 
§c
 = 
å
.src;

259 
d°
 = 
å
.dst;

260 
msg_size
 = 
å
.msg_size;

261 
Œc_å™s„r_°©e
 = 
å
.llc_transfer_state;

263 
	}
}

264 
hi°
();

265 
¥öt
();

268 
dëîmöe_√w_å_evít
(
TRANSTYPE
 *
å
);

269 
upd©e_°©e
(
addªss
, 
˝uid
, 
ªad_‹_wrôe
, 
d©a
[16]);

270 
å™ß˘i⁄_commô
(
TRANSTYPE
 *
å
);

	@utils.cpp

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

5 
	$öô_¨øy3
(
dim1
, 
dim2
, 
dim3
, ***
¨r
)

7 
¨r
 = (***)
	`mÆloc
(()*
dim1
*
dim2
*
dim3
);

8 
i
 = 0; i< 
dim1
; i++)

9 
j
 = 0; j< 
dim2
; j++)

10 
k
 = 0; k< 
dim1
; k++)

11 
¨r
[
i
][
j
][
k
] = 2;

12 
	}
}

14 
	$¥öt_¨øy3
(
dim1
, 
dim2
, 
dim3
, ***
¨r
)

16 
i
 = 0; i< 
dim1
; i++)

17 
j
 = 0; j< 
dim2
; j++)

19 
k
 = 0; k< 
dim1
; k++)

20 
	`¥ötf
("%d ",
¨r
[
i
][
j
][
k
]);;

21 
	`¥ötf
("\n");

23 
	}
}

27 
	$maö
()

29 ***
a
;

30 
	`öô_¨øy3
(10,10,10,
a
);

31 
	`¥öt_¨øy3
(10,10,10,
a
);

33 
	}
}

	@/usr/include/math.h

5 #i‚de‡
_MATH_H


6  
	#_MATH_H


	)
8 #¥agm®
idít
 "@(#)math.h 2.11 00/09/07 SMI"

10 
	~<iso/m©h_iso.h
>

12 #i‡
__˝lu•lus
 >= 199711L

13 
usög
 
	g°d
::
acos
;

14 
usög
 
	g°d
::
asö
;

15 
usög
 
	g°d
::
©™2
;

16 
usög
 
	g°d
::
©™
;

17 
usög
 
	g°d
::
˚û
;

18 
usög
 
	g°d
::
cos
;

19 
usög
 
	g°d
::
cosh
;

20 
usög
 
	g°d
::
exp
;

21 
usög
 
	g°d
::
Ábs
;

22 
usög
 
	g°d
::
Êo‹
;

23 
usög
 
	g°d
::
fmod
;

24 
usög
 
	g°d
::
‰exp
;

25 
usög
 
	g°d
::
ldexp
;

26 
usög
 
	g°d
::
log10
;

27 
usög
 
	g°d
::
log
;

28 
usög
 
	g°d
::
modf
;

29 
usög
 
	g°d
::
pow
;

30 
usög
 
	g°d
::
sö
;

31 
usög
 
	g°d
::
söh
;

32 
usög
 
	g°d
::
sqπ
;

33 
usög
 
	g°d
::
èn
;

34 
usög
 
	g°d
::
ènh
;

37 #ifde‡
__˝lu•lus


41 #i‡
deföed
(
_POSIX_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
)

42  
	#_POSIX_C_SOURCE
 1

	)
45 #ifde‡
__STDC__


46  
	#__P
(
p
) 
	)
p

48  
	#__P
(
p
) ()

	)
51 #i‡
deföed
(
__EXTENSIONS__
Ë|| 
__STDC__
 - 0 == 0 && \

52 !
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XOPEN_SOURCE
)

56  
	#M_E
 2.7182818284590452354

	)
57  
	#M_LOG2E
 1.4426950408889634074

	)
58  
	#M_LOG10E
 0.43429448190325182765

	)
59  
	#M_LN2
 0.69314718055994530942

	)
60  
	#M_LN10
 2.30258509299404568402

	)
61  
	#M_PI
 3.14159265358979323846

	)
62  
	#M_PI_2
 1.57079632679489661923

	)
63  
	#M_PI_4
 0.78539816339744830962

	)
64  
	#M_1_PI
 0.31830988618379067154

	)
65  
	#M_2_PI
 0.63661977236758134308

	)
66  
	#M_2_SQRTPI
 1.12837916709551257390

	)
67  
	#M_SQRT2
 1.41421356237309504880

	)
68  
	#M_SQRT1_2
 0.70710678118654752440

	)
70 
signgam
;

72  
	#MAXFLOAT
 (()3.40282346638528860e+38)

	)
74 #i‡
deföed
(
__EXTENSIONS__
Ë|| !deföed(
_XOPEN_SOURCE
)

78 
	evîsi⁄
 {
	glibm_õì
 = -1, 
	gc_issue_4
, 
	g™si_1
, 
	g°ri˘_™si
};

80 #ifde‡
__STDC__


81 c⁄° 
vîsi⁄
 
_lib_vîsi⁄
;

83 
vîsi⁄
 
_lib_vîsi⁄
;

86 
	sex˚±i⁄
 {

87 
	gty≥
;

88 *
	g«me
;

89 
	g¨g1
;

90 
	g¨g2
;

91 
	gªtvÆ
;

94  
	#HUGE
 
MAXFLOAT


	)
96  
	#_ABS
(
x
) ((xË< 0 ? -(xË: (x))

	)
98  
	#_REDUCE
(
TYPE
, 
X
, 
XN
, 
C1
, 
C2
) { \

99 
x1
 = ()(
TYPE
)
X
, 
x2
 = X - x1; \

100 
X
 = 
x1
 - (
XN
Ë* (
C1
); X +
x2
; X -(XNË* (
C2
); }

	)
102  
	#DOMAIN
 1

	)
103  
	#SING
 2

	)
104  
	#OVERFLOW
 3

	)
105  
	#UNDERFLOW
 4

	)
106  
	#TLOSS
 5

	)
107  
	#PLOSS
 6

	)
109  
	#_POLY1
(
x
, 
c
) ((c)[0] * (xË+ (c)[1])

	)
110  
	#_POLY2
(
x
, 
c
) (
	`_POLY1
((x), (c)Ë* (xË+ (c)[2])

	)
111  
	#_POLY3
(
x
, 
c
) (
	`_POLY2
((x), (c)Ë* (xË+ (c)[3])

	)
112  
	#_POLY4
(
x
, 
c
) (
	`_POLY3
((x), (c)Ë* (xË+ (c)[4])

	)
113  
	#_POLY5
(
x
, 
c
) (
	`_POLY4
((x), (c)Ë* (xË+ (c)[5])

	)
114  
	#_POLY6
(
x
, 
c
) (
	`_POLY5
((x), (c)Ë* (xË+ (c)[6])

	)
115  
	#_POLY7
(
x
, 
c
) (
	`_POLY6
((x), (c)Ë* (xË+ (c)[7])

	)
116  
	#_POLY8
(
x
, 
c
) (
	`_POLY7
((x), (c)Ë* (xË+ (c)[8])

	)
117  
	#_POLY9
(
x
, 
c
) (
	`_POLY8
((x), (c)Ë* (xË+ (c)[9])

	)
121 #i‡
deföed
(
__EXTENSIONS__
Ë|| 
__STDC__
 - 0 == 0 && \

122 !
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XOPEN_SOURCE
)

126 
îf
 
__P
(());

127 
îfc
 
__P
(());

128 
gamma
 
__P
(());

129 
hypŸ
 
__P
((, ));

130 
i¢™
 
__P
(());

131 
j0
 
__P
(());

132 
j1
 
__P
(());

133 
jn
 
__P
((, ));

134 
lgamma
 
__P
(());

135 
y0
 
__P
(());

136 
y1
 
__P
(());

137 
yn
 
__P
((, ));

139 #i‡
deföed
(
__MATHERR_ERRNO_DONTCARE
)

140 #¥agm®
d€s_nŸ_ªad_globÆ_d©a
(
îf
, 
îfc
, 
j0
, 
j1
, 
jn
, 
y0
, 
y1
, 
yn
)

141 #¥agm®
d€s_nŸ_ªad_globÆ_d©a
(
hypŸ
, 
i¢™
)

142 #¥agm®
d€s_nŸ_wrôe_globÆ_d©a
(
îf
, 
îfc
, 
j0
, 
j1
, 
jn
, 
y0
, 
y1
, 
yn
)

143 #¥agm®
d€s_nŸ_wrôe_globÆ_d©a
(
hypŸ
, 
i¢™
)

144 #¥agm®
no_side_ef„˘
(
îf
, 
îfc
, 
j0
, 
j1
, 
jn
, 
y0
, 
y1
, 
yn
)

145 #¥agm®
no_side_ef„˘
(
hypŸ
, 
i¢™
)

147 #i‡
deföed
(
__EXTENSIONS__
Ë|| !deföed(
_XOPEN_SOURCE
) || \

148 
	g_XOPEN_SOURCE
 - 0 == 500 || \

149 
deföed
(
_XOPEN_SOURCE
Ë&& 
_XOPEN_SOURCE_EXTENDED
 - 0 == 1

153 
acosh
 
__P
(());

154 
asöh
 
__P
(());

155 
©™h
 
__P
(());

156 
cbπ
 
__P
(());

157 
logb
 
__P
(());

158 
√xè·î
 
__P
((, ));

159 
ªmaödî
 
__P
((, ));

160 
sˇlb
 
__P
((, ));

162 #i‡
deföed
(
__MATHERR_ERRNO_DONTCARE
)

163 #¥agm®
d€s_nŸ_ªad_globÆ_d©a
(
acosh
, 
asöh
, 
©™h
, 
cbπ
)

164 #¥agm®
d€s_nŸ_ªad_globÆ_d©a
(
logb
, 
√xè·î
, 
ªmaödî
, 
sˇlb
)

165 #¥agm®
d€s_nŸ_wrôe_globÆ_d©a
(
acosh
, 
asöh
, 
©™h
, 
cbπ
)

166 #¥agm®
d€s_nŸ_wrôe_globÆ_d©a
(
logb
, 
√xè·î
, 
ªmaödî
, 
sˇlb
)

167 #¥agm®
no_side_ef„˘
(
acosh
, 
asöh
, 
©™h
, 
cbπ
)

168 #¥agm®
no_side_ef„˘
(
logb
, 
√xè·î
, 
ªmaödî
, 
sˇlb
)

173 
expm1
 
__P
(());

174 
ûogb
 
__P
(());

175 
log1p
 
__P
(());

176 
röt
 
__P
(());

178 #i‡
deföed
(
__MATHERR_ERRNO_DONTCARE
)

179 #¥agm®
d€s_nŸ_ªad_globÆ_d©a
(
expm1
, 
ûogb
, 
log1p
, 
röt
)

180 #¥agm®
d€s_nŸ_wrôe_globÆ_d©a
(
expm1
, 
ûogb
, 
log1p
, 
röt
)

181 #¥agm®
no_side_ef„˘
(
expm1
, 
ûogb
, 
log1p
, 
röt
)

185 #i‡
deföed
(
__EXTENSIONS__
Ë|| !deföed(
_XOPEN_SOURCE
)

189 
m©hîr
 
__P
((
ex˚±i⁄
 *));

194 
signifiˇnd
 
__P
(());

199 
c›ysign
 
__P
((, ));

200 
sˇlbn
 
__P
((, ));

202 #i‡
deföed
(
__MATHERR_ERRNO_DONTCARE
)

203 #¥agm®
d€s_nŸ_ªad_globÆ_d©a
(
signifiˇnd
, 
c›ysign
, 
sˇlbn
)

204 #¥agm®
d€s_nŸ_wrôe_globÆ_d©a
(
signifiˇnd
, 
c›ysign
, 
sˇlbn
)

205 #¥agm®
no_side_ef„˘
(
signifiˇnd
, 
c›ysign
, 
sˇlbn
)

211 #ifde‡
_REENTRANT


212 
gamma_r
 
__P
((, *));

213 
lgamma_r
 
__P
((, *));

215 #i‡
deföed
(
__MATHERR_ERRNO_DONTCARE
)

216 #¥agm®
d€s_nŸ_ªad_globÆ_d©a
(
gamma_r
, 
lgamma_r
)

223 
modff
 
__P
((, *));

225 #i‡
deföed
(
__MATHERR_ERRNO_DONTCARE
)

226 #¥agm®
d€s_nŸ_ªad_globÆ_d©a
(
modff
)

228 #i‡
deföed
(
__EXTENSIONS__
Ë|| !deföed(
__˝lu•lus
)

229 
	~<Êﬂtögpoöt.h
>

234 #ifde‡
__˝lu•lus


	@/usr/include/stdio.h

17 #i‚de‡
_STDIO_H


18  
	#_STDIO_H


	)
20 #¥agm®
idít
 "@(#)stdio.h 1.79 01/04/16 SMI"

22 
	~<iso/°dio_iso.h
>

36 #i‡
__˝lu•lus
 >= 199711L

37 
usög
 
	g°d
::
FILE
;

38 
usög
 
	g°d
::
size_t
;

39 
usög
 
	g°d
::
Âos_t
;

40 
usög
 
	g°d
::
ªmove
;

41 
usög
 
	g°d
::
ª«me
;

42 
usög
 
	g°d
::
tmpfûe
;

43 
usög
 
	g°d
::
tm≤am
;

44 
usög
 
	g°d
::
f˛o£
;

45 
usög
 
	g°d
::
fÊush
;

46 
usög
 
	g°d
::
f›í
;

47 
usög
 
	g°d
::
‰e›í
;

48 
usög
 
	g°d
::
£tbuf
;

49 
usög
 
	g°d
::
£tvbuf
;

50 
usög
 
	g°d
::
Ârötf
;

51 
usög
 
	g°d
::
fsˇnf
;

52 
usög
 
	g°d
::
¥ötf
;

53 
usög
 
	g°d
::
sˇnf
;

54 
usög
 
	g°d
::
•rötf
;

55 
usög
 
	g°d
::
ssˇnf
;

56 
usög
 
	g°d
::
vÂrötf
;

57 
usög
 
	g°d
::
v¥ötf
;

58 
usög
 
	g°d
::
v•rötf
;

59 
usög
 
	g°d
::
fgëc
;

60 
usög
 
	g°d
::
fgës
;

61 
usög
 
	g°d
::
Âutc
;

62 
usög
 
	g°d
::
Âuts
;

63 
usög
 
	g°d
::
gëc
;

64 
usög
 
	g°d
::
gëch¨
;

65 
usög
 
	g°d
::
gës
;

66 
usög
 
	g°d
::
putc
;

67 
usög
 
	g°d
::
putch¨
;

68 
usög
 
	g°d
::
puts
;

69 
usög
 
	g°d
::
ungëc
;

70 
usög
 
	g°d
::
‰ód
;

71 
usög
 
	g°d
::
fwrôe
;

72 
usög
 
	g°d
::
fgëpos
;

73 
usög
 
	g°d
::
f£ek
;

74 
usög
 
	g°d
::
f£ços
;

75 
usög
 
	g°d
::
·ñl
;

76 
usög
 
	g°d
::
ªwöd
;

77 
usög
 
	g°d
::
˛óªº
;

78 
usög
 
	g°d
::
„of
;

79 
usög
 
	g°d
::
„º‹
;

80 
usög
 
	g°d
::
≥º‹
;

83 #ifdef 
__˝lu•lus


87 #i‡
deföed
(
_LARGEFILE_SOURCE
Ë|| deföed(
_XPG5
)

88 #i‚def 
_OFF_T


89  
	#_OFF_T


	)
90 #i‡
deföed
(
_LP64
Ë|| 
_FILE_OFFSET_BITS
 == 32

91 
	toff_t
;

93 
__l⁄gl⁄g_t
 
	toff_t
;

95 #ifdef 
_LARGEFILE64_SOURCE


96 #ifde‡
_LP64


97 
off_t
 
	toff64_t
;

99 
__l⁄gl⁄g_t
 
	toff64_t
;

105 #ifde‡
_LARGEFILE64_SOURCE


106 #ifde‡
_LP64


107 
Âos_t
 
	tÂos64_t
;

109 
__l⁄gl⁄g_t
 
	tÂos64_t
;

118 #i‡
deföed
(
_XOPEN_SOURCE
Ë&& (
_XOPEN_VERSION
 - 0 >4Ë&& !deföed(
_VA_LIST
)

119  
	#_VA_LIST


	)
120 
__va_li°
 
	tva_li°
;

123 #i‡
deföed
(
__EXTENSIONS__
Ë|| 
__STDC__
 - 0 == 0 || \

124 
deföed
(
_POSIX_C_SOURCE
Ë|| 
	$deföed
(
_XOPEN_SOURCE
)

126  
	#L_˘îmid
 9

	)
127  
	#L_cu£rid
 9

	)
130 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| ((
__STDC__
 - 0 == 0 && \

131 !
	`deföed
(
_POSIX_C_SOURCE
))Ë|| 
	$deföed
(
_XOPEN_SOURCE
)

133  
	#P_tmpdú
 "/v¨/tmp/"

	)
136 #i‚de‡
_STDIO_ALLOCATE


137 
_sibuf
[], 
_sobuf
[];

141 #i‡!
	`deföed
(
_LP64
Ë&& 
_FILE_OFFSET_BITS
 == 64

142 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


143 #¥agm®
ªdeföe_exäame
 
f›í
 
f›í64


144 #¥agm®
ªdeföe_exäame
 
‰e›í
 
‰e›í64


145 #¥agm®
ªdeföe_exäame
 
tmpfûe
 
tmpfûe64


146 #¥agm®
ªdeföe_exäame
 
fgëpos
 
fgëpos64


147 #¥agm®
ªdeföe_exäame
 
f£ços
 
f£ços64


148 #ifdef 
_LARGEFILE_SOURCE


149 #¥agm®
ªdeföe_exäame
 
f£eko
 
f£eko64


150 #¥agm®
ªdeföe_exäame
 
·ñlo
 
·ñlo64


153 #i‡
	`deföed
(
__STDC__
)

154 
FILE
 *
	`f›í64
(const *, const *);

155 
FILE
 *
	`‰e›í64
(const *, const *, FILE *);

156 
FILE
 *
	`tmpfûe64
();

157 
	`fgëpos64
(
FILE
 *, 
Âos_t
 *);

158 
	`f£ços64
(
FILE
 *, c⁄° 
Âos_t
 *);

160 
FILE
 *
	`f›í64
();

161 
FILE
 *
	`‰e›í64
();

162 
FILE
 *
	`tmpfûe64
();

163 
	`fgëpos64
();

164 
	`f£ços64
();

166  
	#f›í
 
f›í64


	)
167  
	#‰e›í
 
‰e›í64


	)
168  
	#tmpfûe
 
tmpfûe64


	)
169  
	#fgëpos
 
fgëpos64


	)
170  
	#f£ços
 
f£ços64


	)
171 #ifdef 
_LARGEFILE_SOURCE


172  
	#f£eko
 
f£eko64


	)
173  
	#·ñlo
 
·ñlo64


	)
178 #i‚de‡
_LP64


179 *
_bu„ndèb
[];

180 
FILE
 *
_œ°buf
;

184 #i‡
	`deföed
(
_LP64
Ë&& deföed(
_LARGEFILE64_SOURCE
)

185 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


186 #¥agma 
ªdeföe_exäame
 
f›í64
 
f›í


187 #¥agma 
ªdeföe_exäame
 
‰e›í64
 
‰e›í


188 #¥agma 
ªdeföe_exäame
 
tmpfûe64
 
tmpfûe


189 #¥agma 
ªdeföe_exäame
 
fgëpos64
 
fgëpos


190 #¥agma 
ªdeföe_exäame
 
f£ços64
 
f£ços


191 #ifdef 
_LARGEFILE_SOURCE


192 #¥agma 
ªdeföe_exäame
 
f£eko64
 
f£eko


193 #¥agma 
ªdeföe_exäame
 
·ñlo64
 
·ñlo


196  
	#f›í64
 
f›í


	)
197  
	#‰e›í64
 
‰e›í


	)
198  
	#tmpfûe64
 
tmpfûe


	)
199  
	#fgëpos64
 
fgëpos


	)
200  
	#f£ços64
 
f£ços


	)
201 #ifdef 
_LARGEFILE_SOURCE


202  
	#f£eko64
 
f£eko


	)
203  
	#·ñlo64
 
·ñlo


	)
208 #i‡
	`deföed
(
__STDC__
)

210 #if 
	`deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
)

211 *
	`tm≤am_r
(*);

213 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| (
__STDC__
 == 0 && \

214 !
	`deföed
(
_XOPEN_SOURCE
Ë&& !
	$deföed
(
_POSIX_C_SOURCE
))

215 
	`£tbuf„r
(
FILE
 *, *, 
size_t
);

216 
	`£éöebuf
(
FILE
 *);

222 
	`vfsˇnf
(
FILE
 *, c⁄° *, 
__va_li°
);

223 
	`vsˇnf
(c⁄° *, 
__va_li°
);

224 
	`vssˇnf
(c⁄° *, c⁄° *, 
__va_li°
);

226 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| (
__STDC__
 == 0 && \

227 !
	`deföed
(
_XOPEN_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
)) || \

228 
	$deföed
(
_XPG5
)

230 
	`¢¥ötf
(*, 
size_t
, const *, ...);

232 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| (
__STDC__
 == 0 && \

233 !
	`deföed
(
_XOPEN_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
)) || \

234 
	$deföed
(
_XPG5
)

235 
	`v¢¥ötf
(*, 
size_t
, c⁄° *, 
__va_li°
);

241 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| 
__STDC__
 == 0 || \

242 
	`deföed
(
_POSIX_C_SOURCE
Ë|| 
	$deföed
(
_XOPEN_SOURCE
)

244 
FILE
 *
	`fd›í
(, const *);

245 *
	`˘îmid
(*);

246 
	`fûío
(
FILE
 *);

253 #if 
	`deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
) || \

254 (
_POSIX_C_SOURCE
 - 0 >= 199506L)

255 
	`Êockfûe
(
FILE
 *);

256 
	`·rylockfûe
(
FILE
 *);

257 
	`fu∆ockfûe
(
FILE
 *);

258 
	`gëc_u∆ocked
(
FILE
 *);

259 
	`gëch¨_u∆ocked
();

260 
	`putc_u∆ocked
(, 
FILE
 *);

261 
	`putch¨_u∆ocked
();

268 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| 
__STDC__
 =0 || deföed(
_XOPEN_SOURCE
)

270 
FILE
 *
	`p›í
(const *, const *);

271 *
	`cu£rid
(*);

272 *
	`ãm≤am
(const *, const *);

273 
	`gë›t
(, *const *, const *);

274 #i‡!
	`deföed
(
_XOPEN_SOURCE
)

275 
	`gësub›t
(**, *const *, **);

277 *
›èrg
;

278 
›töd
, 
›ãº
, 
›t›t
;

279 
	`gëw
(
FILE
 *);

280 
	`putw
(, 
FILE
 *);

281 
	`p˛o£
(
FILE
 *);

288 #if 
	`deföed
(
_LARGEFILE_SOURCE
Ë|| deföed(
_XPG5
)

289 
	`f£eko
(
FILE
 *, 
off_t
, );

290 
off_t
 
	`·ñlo
(
FILE
 *);

297 #if 
	`deföed
(
_LARGEFILE64_SOURCE
Ë&& !((
_FILE_OFFSET_BITS
 == 64) && \

298 !
	$deföed
(
__PRAGMA_REDEFINE_EXTNAME
))

299 
FILE
 *
	`f›í64
(const *, const *);

300 
FILE
 *
	`‰e›í64
(const *, const *, FILE *);

301 
FILE
 *
	`tmpfûe64
();

302 
	`fgëpos64
(
FILE
 *, 
Âos64_t
 *);

303 
	`f£ços64
(
FILE
 *, c⁄° 
Âos64_t
 *);

304 
	`f£eko64
(
FILE
 *, 
off64_t
, );

305 
off64_t
 
	`·ñlo64
(
FILE
 *);

310 #i‚def 
_LP64


311  
	#_bu„nd
(
p
) ((
	`fûío
’Ë< 
_NFILE
Ë? 
_bu„ndèb
[fileno(p)] : \

312 (*)
	`_ªÆbu„nd
(
p
))

	)
313  
	#_bufsiz
(
p
) (
	`_bu„nd
’Ë- (p)->
_ba£
)

	)
316 #if 
	`deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
)

317 *
	`tm≤am_r
();

319 #i‡
	`deföed
(
__EXTENSIONS__
) || \

320 (!
	`deföed
(
_XOPEN_SOURCE
Ë&& !
	$deföed
(
_POSIX_C_SOURCE
))

321 
	`£tbuf„r
();

322 
	`£éöebuf
();

323 
	`vfsˇnf
();

324 
	`vsˇnf
();

325 
	`vssˇnf
();

328 #i‡
	`deföed
(
__EXTENSIONS__
) || \

329 
	`deföed
(
_POSIX_C_SOURCE
Ë|| 
	$deföed
(
_XOPEN_SOURCE
)

330 
FILE
 *
	`fd›í
();

331 *
	`˘îmid
();

332 
	`fûío
();

335 #if 
	`deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
) || \

336 (
_POSIX_C_SOURCE
 - 0 >= 199506L)

337 
	`Êockfûe
();

338 
	`·rylockfûe
();

339 
	`fu∆ockfûe
();

340 
	`gëc_u∆ocked
();

341 
	`gëch¨_u∆ocked
();

342 
	`putc_u∆ocked
();

343 
	`putch¨_u∆ocked
();

346 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| deföed(
_XOPEN_SOURCE
)

347 
FILE
 *
	`p›í
();

348 *
	`cu£rid
();

349 *
	`ãm≤am
();

350 
	`gë›t
();

351 #i‡!
	`deföed
(
_XOPEN_SOURCE
)

352 
	`gësub›t
();

354 *
›èrg
;

355 
›töd
, 
›ãº
, 
›t›t
;

356 
	`gëw
();

357 
	`putw
();

358 
	`p˛o£
();

361 #if 
	`deföed
(
_LARGEFILE_SOURCE
Ë|| deföed(
_XPG5
)

362 
	`f£eko
();

363 
off_t
 
	`·ñlo
();

366 #if 
	`deföed
(
_LARGEFILE64_SOURCE
Ë&& !((
_FILE_OFFSET_BITS
 == 64) && \

367 !
	$deföed
(
__PRAGMA_REDEFINE_EXTNAME
))

368 
FILE
 *
	`f›í64
();

369 
FILE
 *
	`‰e›í64
();

370 
FILE
 *
	`tmpfûe64
();

371 
	`fgëpos64
();

372 
	`f£ços64
();

373 
	`f£eko64
();

374 
off64_t
 
	`·ñlo64
();

379 #i‡!
	`deföed
(
__löt
)

381 #if 
	`deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
) || \

382 (
_POSIX_C_SOURCE
 - 0 >= 199506L)

383 #i‚def 
_LP64


384 #ifdef 
__STDC__


385  
	#gëc_u∆ocked
(
p
) (--’)->
_˙t
 < 0 \

386 ? 
	`__fûbuf
(
p
) \

387 : ()*(
p
)->
_±r
++)

	)
388  
	#putc_u∆ocked
(
x
, 
p
) (--’)->
_˙t
 < 0 \

389 ? 
	`__Êsbuf
((
x
), (
p
)) \

390 : ()(*(
p
)->
_±r
++ = \

391 (Ë(
x
)))

	)
393  
	#gëc_u∆ocked
(
p
) (--’)->
_˙t
 < 0 \

394 ? 
	`_fûbuf
(
p
) \

395 : ()*(
p
)->
_±r
++)

	)
396  
	#putc_u∆ocked
(
x
, 
p
) (--’)->
_˙t
 < 0 \

397 ? 
	`_Êsbuf
((
x
), (
p
)) \

398 : ()(*(
p
)->
_±r
++ = \

399 (Ë(
x
)))

	)
402  
	#gëch¨_u∆ocked
() 
	`gëc_u∆ocked
(
°dö
)

	)
403  
	#putch¨_u∆ocked
(
x
) 
	`putc_u∆ocked
((x), 
°dout
)

	)
408 #ifdef 
__˝lu•lus


409 
	}
}

	@/usr/include/stdlib.h

13 #i‚de‡
_STDLIB_H


14  
	#_STDLIB_H


	)
16 #¥agm®
idít
 "@(#)stdlib.h 1.48 00/04/13 SMI"

18 
	~<iso/°dlib_iso.h
>

20 #i‡
deföed
(
__EXTENSIONS__
) || \

21 (
deföed
(
_XOPEN_SOURCE
Ë&& (
	g_XOPEN_VERSION
 - 0 >= 4))

22 
	~<sys/waô.h
>

29 #i‡
__˝lu•lus
 >= 199711L

30 
usög
 
°d
::
div_t
;

31 
usög
 
	g°d
::
ldiv_t
;

32 
usög
 
	g°d
::
size_t
;

33 
usög
 
	g°d
::
ab‹t
;

34 
usög
 
	g°d
::
abs
;

35 
usög
 
	g°d
::
©exô
;

36 
usög
 
	g°d
::
©of
;

37 
usög
 
	g°d
::
©oi
;

38 
usög
 
	g°d
::
©ﬁ
;

39 
usög
 
	g°d
::
b£¨ch
;

40 
usög
 
	g°d
::
ˇŒoc
;

41 
usög
 
	g°d
::
div
;

42 
usög
 
	g°d
::
exô
;

43 
usög
 
	g°d
::
‰ì
;

44 
usög
 
	g°d
::
gëív
;

45 
usög
 
	g°d
::
œbs
;

46 
usög
 
	g°d
::
ldiv
;

47 
usög
 
	g°d
::
mÆloc
;

48 
usög
 
	g°d
::
mbÀn
;

49 
usög
 
	g°d
::
mb°owcs
;

50 
usög
 
	g°d
::
mbtowc
;

51 
usög
 
	g°d
::
qs‹t
;

52 
usög
 
	g°d
::
ønd
;

53 
usög
 
	g°d
::
ªÆloc
;

54 
usög
 
	g°d
::
§™d
;

55 
usög
 
	g°d
::
°πod
;

56 
usög
 
	g°d
::
°πﬁ
;

57 
usög
 
	g°d
::
°πoul
;

58 
usög
 
	g°d
::
sy°em
;

59 
usög
 
	g°d
::
wc°ombs
;

60 
usög
 
	g°d
::
w˘omb
;

63 #ifdef 
__˝lu•lus


67 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

68 
	s
{

69 
quŸ
;

70 
ªm
;

71 } 
	tŒdiv_t
;

74 #i‚de‡
_UID_T


75  
	#_UID_T


	)
76 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

77 
	tuid_t
;

79 
	tuid_t
;

83 #i‡
deföed
(
__STDC__
)

86 #i‡!
deföed
(
_LP64
Ë&& 
_FILE_OFFSET_BITS
 == 64

88 #ifdef 
__PRAGMA_REDEFINE_EXTNAME


89 #¥agm®
ªdeföe_exäame
 
mk°emp
 
mk°emp64


91  
	#mk°emp
 
mk°emp64


	)
97 #i‡
deföed
(
_LP64
Ë&& deföed(
_LARGEFILE64_SOURCE
)

99 #ifdef 
__PRAGMA_REDEFINE_EXTNAME


100 #¥agm®
ªdeföe_exäame
 
mk°emp64
 
mk°emp


102  
	#mk°emp64
 
mk°emp


	)
107 #i‡
deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
) || \

108 (
	g_POSIX_C_SOURCE
 - 0 >= 199506L)

109 
ønd_r
(*);

112 
_exôh™dÀ
();

114 #i‡
deföed
(
__EXTENSIONS__
) || \

115 (
	g__STDC__
 =0 && !
deföed
(
_POSIX_C_SOURCE
)) || \

116 (
deföed
(
_XOPEN_SOURCE
Ë&& (
_XOPEN_VERSION
 - 0 >= 4))

117 
dønd48
();

118 
î™d48
(*);

119 
jønd48
(*);

120 
lc⁄g48
(*);

121 
Ã™d48
();

122 
mønd48
();

123 
ƒ™d48
(*);

124 *
£ed48
(*);

125 
§™d48
();

126 
puãnv
(*);

127 
£tkey
(const *);

131 #i‡(
deföed
(
__EXTENSIONS__
) || \

132 (
	g__STDC__
 =0 && !
deföed
(
_POSIX_C_SOURCE
))) && \

133 ((
_XOPEN_VERSION
 - 0 < 4Ë&& (
_XOPEN_SOURCE_EXTENDED
 - 0 < 1))

135 #i‚def 
_SSIZE_T


136  
	#_SSIZE_T


	)
137 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

138 
	tssize_t
;

140 
	tssize_t
;

144 
swab
(c⁄° *, *, 
ssize_t
);

147 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

148 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
) || \

149 (
deföed
(
_LARGEFILE_SOURCE
Ë&& 
	g_FILE_OFFSET_BITS
 == 64)

150 
mk°emp
(*);

153 #if 
deföed
(
_LARGEFILE64_SOURCE
Ë&& !((
_FILE_OFFSET_BITS
 == 64) && \

154 !
deföed
(
__PRAGMA_REDEFINE_EXTNAME
))

155 
mk°emp64
(*);

158 #i‡
deföed
(
__EXTENSIONS__
) || \

159 (
	g__STDC__
 =0 && !
deföed
(
_POSIX_C_SOURCE
) && \

160 !
deföed
(
_XOPEN_SOURCE
)Ë|| deföed(
_XPG4_2
)

161 
a64l
(const *);

162 *
ecvt
(, , *, *);

163 *
fcvt
(, , *, *);

164 *
gcvt
(, , *);

165 
gësub›t
(**, *const *, **);

166 
gø¡±
();

167 *
öô°©e
(, *, 
size_t
);

168 *
l64a
();

169 *
mkãmp
(*);

170 *
±¢ame
();

171 
øndom
();

172 *
ªÆ∑th
(const *, *);

173 *
£t°©e
(const *);

174 
§™dom
();

175 
ây¶Ÿ
();

176 
u∆ock±
();

177 *
vÆloc
(
size_t
);

180 #i‡
deföed
(
__EXTENSIONS__
) || \

181 (
	g__STDC__
 =0 && !
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
))

182 
˛o£‰om
();

183 
dup2
(, );

184 
fdwÆk
((*)(*, ), *);

185 *
qecvt
(, , *, *);

186 *
qfcvt
(, , *, *);

187 *
qgcvt
(, , *);

188 *
gëcwd
(*, 
size_t
);

189 c⁄° *
gëexe˙ame
();

190 *
gëlogö
();

191 
gë›t
(, *const *, const *);

192 *
›èrg
;

193 
›töd
, 
›ãº
, 
›t›t
;

194 *
gë∑ss
(const *);

195 *
gë∑s•hø£
(const *);

196 
gëpw
(
uid_t
, *);

197 
ißây
();

198 *
memÆign
(
size_t
, size_t);

199 *
ây«me
();

201 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

202 
©ﬁl
(const *);

203 
Œabs
();

204 
Œdiv_t
 
Œdiv
(, );

205 *
Œto°r
(, *);

206 
°πﬁl
(const *, **, );

207 
°πouŒ
(const *, **, );

208 *
uŒto°r
(, *);

215 #i‡
deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
) || \

216 (
	g_POSIX_C_SOURCE
 - 0 >= 199506L)

217 
ønd_r
();

220 
_exôh™dÀ
();

222 #i‡
deföed
(
__EXTENSIONS__
) || \

223 (
	g__STDC__
 =0 && !
deföed
(
_POSIX_C_SOURCE
)) || \

224 (
deföed
(
_XOPEN_SOURCE
Ë&& (
_XOPEN_VERSION
 - 0 >= 4))

225 
dønd48
();

226 
î™d48
();

227 
jønd48
();

228 
lc⁄g48
();

229 
Ã™d48
();

230 
mønd48
();

231 
ƒ™d48
();

232 *
£ed48
();

233 
§™d48
();

234 
puãnv
();

235 
£tkey
();

238 #i‡(
deföed
(
__EXTENSIONS__
) || \

239 (
	g__STDC__
 =0 && !
deföed
(
_POSIX_C_SOURCE
))) && \

240 ((
_XOPEN_VERSION
 - 0 < 4Ë&& (
_XOPEN_SOURCE_EXTENDED
 - 0 < 1))

241 
swab
();

244 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

245 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
) || \

246 (
deföed
(
_LARGEFILE_SOURCE
Ë&& 
	g_FILE_OFFSET_BITS
 == 64)

247 
mk°emp
();

250 #if 
deföed
(
_LARGEFILE64_SOURCE
Ë&& !((
_FILE_OFFSET_BITS
 == 64) && \

251 !
deföed
(
__PRAGMA_REDEFINE_EXTNAME
))

252 
mk°emp64
();

255 #i‡
deföed
(
__EXTENSIONS__
) || \

256 (
	g__STDC__
 =0 && !
deföed
(
_POSIX_C_SOURCE
) && \

257 !
deföed
(
_XOPEN_SOURCE
)Ë|| deföed(
_XPG4_2
)

258 
a64l
();

259 *
ecvt
();

260 *
fcvt
();

261 *
gcvt
();

262 
gësub›t
();

263 
gø¡±
();

264 *
öô°©e
();

265 *
l64a
();

266 *
mkãmp
();

267 *
±¢ame
();

268 
øndom
();

269 *
ªÆ∑th
();

270 *
£t°©e
();

271 
§™dom
();

272 
ây¶Ÿ
();

273 *
vÆloc
();

274 
u∆ock±
();

277 #i‡
deföed
(
__EXTENSIONS__
) || \

278 (
	g__STDC__
 =0 && !
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
))

279 
˛o£‰om
();

280 
dup2
();

281 
fdwÆk
();

282 *
qecvt
();

283 *
qfcvt
();

284 *
qgcvt
();

285 *
gëcwd
();

286 *
gëexe˙ame
();

287 *
gëlogö
();

288 
gë›t
();

289 *
›èrg
;

290 
›töd
, 
›ãº
, 
›t›t
;

291 *
gë∑ss
();

292 *
gë∑s•hø£
();

293 
gëpw
();

294 
ißây
();

295 *
memÆign
();

296 *
ây«me
();

298 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

299 
©ﬁl
();

300 
Œabs
();

301 
Œdiv_t
 
Œdiv
();

302 *
Œto°r
();

303 
°πﬁl
();

304 
°πouŒ
();

305 *
uŒto°r
();

311 #ifdef 
__˝lu•lus


	@/usr/include/string.h

13 #i‚de‡
_STRING_H


14  
	#_STRING_H


	)
16 #¥agm®
idít
 "@(#)string.h 1.24 99/08/10 SMI"

18 
	~<iso/°rög_iso.h
>

24 #i‡
__˝lu•lus
 >= 199711L

25 
usög
 
	g°d
::
size_t
;

26 
usög
 
	g°d
::
memchr
;

27 
usög
 
	g°d
::
memcmp
;

28 
usög
 
	g°d
::
mem˝y
;

29 
usög
 
	g°d
::
memmove
;

30 
usög
 
	g°d
::
mem£t
;

31 
usög
 
	g°d
::
°rˇt
;

32 
usög
 
	g°d
::
°rchr
;

33 
usög
 
	g°d
::
°rcmp
;

34 
usög
 
	g°d
::
°rcﬁl
;

35 
usög
 
	g°d
::
°r˝y
;

36 
usög
 
	g°d
::
°rc•n
;

37 
usög
 
	g°d
::
°ªº‹
;

38 
usög
 
	g°d
::
°æí
;

39 
usög
 
	g°d
::
°∫ˇt
;

40 
usög
 
	g°d
::
°∫cmp
;

41 
usög
 
	g°d
::
°∫˝y
;

42 
usög
 
	g°d
::
°Ωbrk
;

43 
usög
 
	g°d
::
°ºchr
;

44 
usög
 
	g°d
::
°r•n
;

45 
usög
 
	g°d
::
°r°r
;

46 
usög
 
	g°d
::
°πok
;

47 
usög
 
	g°d
::
°rx‰m
;

50 #ifdef 
__˝lu•lus


54 #i‡
deföed
(
__STDC__
)

56 #if 
deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
) || \

57 (
_POSIX_C_SOURCE
 - 0 >= 199506L)

58 *
°πok_r
(*, const *, **);

61 #i‡
deföed
(
__EXTENSIONS__
Ë|| 
__STDC__
 == 0 || \

62 
deföed
(
_POSIX_C_SOURCE
Ë|| 
	$deföed
(
_XOPEN_SOURCE
)

63 *
	`memc˝y
(*, c⁄° *, , 
size_t
);

66 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| (
__STDC__
 == 0 && \

67 !
	`deföed
(
_POSIX_C_SOURCE
Ë&& !
	$deföed
(
_XOPEN_SOURCE
))

68 *
	`°rsig«l
();

69 
	`ffs
();

70 
	`°rˇ£cmp
(const *, const *);

71 
	`°∫ˇ£cmp
(c⁄° *, c⁄° *, 
size_t
);

72 
size_t
 
	`°æ˝y
(*, const *, size_t);

73 
size_t
 
	`°æˇt
(*, const *, size_t);

76 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| (
__STDC__
 == 0 && \

77 !
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

78 
	$deföed
(
_XPG4_2
)

79 *
	`°rdup
(const *);

84 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
) || \

85 (
_POSIX_C_SOURCE
 - 0 >= 199506L)

86 *
	`°πok_r
();

89 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| 
__STDC__
 == 0 || \

90 
	`deföed
(
_POSIX_C_SOURCE
Ë|| 
	$deföed
(
_XOPEN_SOURCE
)

91 *
	`memc˝y
();

94 #i‡
	`deföed
(
__EXTENSIONS__
) || \

95 !
	`deföed
(
_POSIX_C_SOURCE
Ë&& !
	$deföed
(
_XOPEN_SOURCE
)

96 *
	`°rsig«l
();

97 
	`ffs
();

98 
	`°rˇ£cmp
();

99 
	`°∫ˇ£cmp
();

100 
size_t
 
	`°æ˝y
();

101 
size_t
 
	`°æˇt
();

104 #i‡
	`deföed
(
__EXTENSIONS__
) || \

105 !
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
) || \

106 
	$deföed
(
_XPG4_2
)

107 *
	`°rdup
();

112 #ifdef 
__˝lu•lus


113 
	}
}

	@/usr/include/time.h

13 #i‚de‡
_TIME_H


14  
	#_TIME_H


	)
16 #¥agm®
idít
 "@(#)time.h 1.39 99/08/10 SMI"

18 
	~<sys/„©uª_ã°s.h
>

19 
	~<sys/ty≥s.h
>

20 
	~<iso/time_iso.h
>

26 #i‡
__˝lu•lus
 >= 199711L

27 
usög
 
	g°d
::
size_t
;

28 
usög
 
	g°d
::
˛ock_t
;

29 
usög
 
	g°d
::
time_t
;

30 
usög
 
	g°d
::
tm
;

31 
usög
 
	g°d
::
as˘ime
;

32 
usög
 
	g°d
::
˛ock
;

33 
usög
 
	g°d
::
˘ime
;

34 
usög
 
	g°d
::
dif·ime
;

35 
usög
 
	g°d
::
gmtime
;

36 
usög
 
	g°d
::
loˇ…ime
;

37 
usög
 
	g°d
::
mktime
;

38 
usög
 
	g°d
::
time
;

39 
usög
 
	g°d
::
°r·ime
;

42 #ifdef 
__˝lu•lus


46 #i‚de‡
_CLOCKID_T


47  
	#_CLOCKID_T


	)
48 
	t˛ockid_t
;

51 #i‚de‡
_TIMER_T


52  
	#_TIMER_T


	)
53 
	ttimî_t
;

56 #i‡
deföed
(
__STDC__
)

58 #if 
deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
) || \

59 (
	g_POSIX_C_SOURCE
 - 0 >= 199506L)

60 
tm
 *
gmtime_r
(c⁄° 
time_t
 *, tm *);

61 
tm
 *
loˇ…ime_r
(c⁄° 
time_t
 *, tm *);

64 #i‡(
__STDC__
 =0 && !
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

65 (
deföed
(
_XOPEN_SOURCE
Ë&& 
	g_XOPEN_VERSION
 - 0 >= 4) || \

66 
	$deföed
(
__EXTENSIONS__
)

67 *
	`°Ωtime
(c⁄° *, c⁄° *, 
tm
 *);

69 #ifde‡
_STRPTIME_DONTZERO


70 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


71 #¥agma 
ªdeföe_exäame
 
°Ωtime
 
__°Ωtime_d⁄tzîo


73 *
	`__°Ωtime_d⁄tzîo
(c⁄° *, c⁄° *, 
tm
 *);

74  
	#°Ωtime
 
__°Ωtime_d⁄tzîo


	)
80 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| ((
__STDC__
 - 0 == 0) && \

81 !
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

82 (
_POSIX_C_SOURCE
 > 2)

83 
	~<sys/time_im∂.h
>

96 #i‚def 
_SIGVAL


97  
	#_SIGVAL


	)
98 
	usigvÆ
 {

99 
sivÆ_öt
;

100 *
sivÆ_±r
;

104 #i‚def 
_SIGEVENT


105  
	#_SIGEVENT


	)
106 
	ssigevít
 {

107 
sigev_nŸify
;

108 
sigev_signo
;

109 
sigvÆ
 
sigev_vÆue
;

110 (*
sigev_nŸify_fun˘i⁄
)(
sigvÆ
);

111 
±hªad_©å_t
 *
sigev_nŸify_©åibuãs
;

112 
__sigev_∑d2
;

116 
	`˛ock_gëªs
(
˛ockid_t
, 
time•ec
 *);

117 
	`˛ock_gëtime
(
˛ockid_t
, 
time•ec
 *);

118 
	`˛ock_£âime
(
˛ockid_t
, c⁄° 
time•ec
 *);

119 
	`timî_¸óã
(
˛ockid_t
, 
sigevít
 *, 
timî_t
 *);

120 
	`timî_dñëe
(
timî_t
);

121 
	`timî_gëovîrun
(
timî_t
);

122 
	`timî_gëtime
(
timî_t
, 
ôimî•ec
 *);

123 
	`timî_£âime
(
timî_t
, , c⁄° 
ôimî•ec
 *,

124 
ôimî•ec
 *);

125 
	`«no¶ìp
(c⁄° 
time•ec
 *, timespec *);

128 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| 
__STDC__
 == 0 || \

129 
	`deföed
(
_POSIX_C_SOURCE
Ë|| 
	$deföed
(
_XOPEN_SOURCE
)

130 
	`tz£t
();

132 *
tz«me
[2];

134 #i‚de‡
CLK_TCK


135 
	`_sysc⁄f
();

136  
	#CLK_TCK
 ((
˛ock_t
Ë
	`_sysc⁄f
(3))

	)
140 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| (
__STDC__
 == 0 && \

141 !
	`deföed
(
_POSIX_C_SOURCE
)Ë|| 
	$deföed
(
_XOPEN_SOURCE
)

142 
timez⁄e
;

143 
daylight
;

148 #i‡
__STDC__
 =0 && !
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)

149 
	`c·ime
(*, *, c⁄° 
time_t
 *);

150 
	`asc·ime
(*, c⁄° *, c⁄° 
tm
 *);

151 
Ætz⁄e
;

154 #i‡(
__STDC__
 =0 && !
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

155 
	`deföed
(
_XPG4_2
Ë|| 
	$deföed
(
__EXTENSIONS__
)

156 
tm
 *
	`gëd©e
(const *);

158 #ifdef 
_REENTRANT


159 #unde‡
gëd©e_îr


160  
	#gëd©e_îr
 *(*)
	`_gëd©e_îr_addr
()

	)
161 *
	`_gëd©e_îr_addr
();

163 
gëd©e_îr
;

169 *
	`°Ωtime
();

170 
	`c·ime
(), 
	`asc·ime
();

171 
	`tz£t
();

173 #ifde‡
_STRPTIME_DONTZERO


174 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


175 #¥agma 
ªdeföe_exäame
 
°Ωtime
 
__°Ωtime_d⁄tzîo


177 *
	`__°Ωtime_d⁄tzîo
();

178  
	#°Ωtime
 
__°Ωtime_d⁄tzîo


	)
183 #if 
	`deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
) || \

184 (
_POSIX_C_SOURCE
 - 0 >= 199506L)

185 
tm
 *
	`gmtime_r
();

186 
tm
 *
	`loˇ…ime_r
();

189 
timez⁄e
, 
Ætz⁄e
;

190 
daylight
;

191 *
tz«me
[2];

193 #i‡(
__STDC__
 =0 && !
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

194 
	`deföed
(
_XPG4_2
Ë|| 
	$deföed
(
__EXTENSIONS__
)

195 
tm
 *
	`gëd©e
();

196 #ifdef 
_REENTRANT


197 #unde‡
gëd©e_îr


198  
	#gëd©e_îr
 *(*)
	`_gëd©e_îr_addr
()

	)
199 *
	`_gëd©e_îr_addr
();

201 
gëd©e_îr
;

242 #if 
	`deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
) || \

243 (
_POSIX_C_SOURCE
 - 0 >199506LË|| 
	`deföed
(
_POSIX_PTHREAD_SEMANTICS
)

245 #if 
	`deföed
(
__STDC__
)

247 #if (
_POSIX_C_SOURCE
 - 0 >199506LË|| 
	`deföed
(
_POSIX_PTHREAD_SEMANTICS
)

249 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


250 *
	`as˘ime_r
(c⁄° 
tm
 *, *);

251 *
	`˘ime_r
(c⁄° 
time_t
 *, *);

252 #¥agm®
ªdeföe_exäame
 
˘ime_r
 
__posix_˘ime_r


253 #¥agm®
ªdeföe_exäame
 
as˘ime_r
 
__posix_as˘ime_r


257 
	`as˘ime_r
(c⁄° 
tm
 *
__tm
, *
__buf
)

259 *
	`__posix_as˘ime_r
(c⁄° 
tm
 *, *);

260  (
	`__posix_as˘ime_r
(
__tm
, 
__buf
));

263 
	`˘ime_r
(c⁄° 
time_t
 *
__time
, *
__buf
)

265 *
	`__posix_˘ime_r
(c⁄° 
time_t
 *, *);

266  (
	`__posix_˘ime_r
(
__time
, 
__buf
));

272 *
	`as˘ime_r
(c⁄° 
tm
 *, *, );

273 *
	`˘ime_r
(c⁄° 
time_t
 *, *, );

279 #if (
_POSIX_C_SOURCE
 - 0 >199506LË|| 
	`deföed
(
_POSIX_PTHREAD_SEMANTICS
)

281 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


282 *
	`as˘ime_r
();

283 *
	`˘ime_r
();

284 #¥agm®
ªdeföe_exäame
 
as˘ime_r
 
__posix_as˘ime_r


285 #¥agm®
ªdeföe_exäame
 
˘ime_r
 
__posix_˘ime_r


289 
	`as˘ime_r
(
__tm
, 
__buf
)

290 
tm
 *
__tm
;

291 *
__buf
;

293 *
	`__posix_as˘ime_r
();

294  (
	`__posix_as˘ime_r
(
__tm
, 
__buf
));

297 
	`˘ime_r
(
__time
, 
__buf
)

298 
time_t
 *
__time
;

299 *
__buf
;

301 *
	`__posix_˘ime_r
();

302  (
	`__posix_˘ime_r
(
__time
, 
__buf
));

308 *
	`as˘ime_r
();

309 *
	`˘ime_r
();

317 #ifdef 
__˝lu•lus


318 
	}
}

	@/usr/include/zlib.h

31 #i‚de‡
_ZLIB_H


32  
	#_ZLIB_H


	)
34 
	~"zc⁄f.h
"

36 #ifde‡
__˝lu•lus


40  
	#ZLIB_VERSION
 "1.1.4"

	)
63 
voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

64 (*
‰ì_func
Ë 
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
));

66 
öã∫Æ_°©e
;

68 
	sz_°ªam_s
 {

69 
Byãf
 *
√xt_ö
;

70 
uI¡
 
avaû_ö
;

71 
uL⁄g
 
tŸÆ_ö
;

73 
Byãf
 *
√xt_out
;

74 
uI¡
 
avaû_out
;

75 
uL⁄g
 
tŸÆ_out
;

77 *
msg
;

78 
öã∫Æ_°©e
 
FAR
 *
°©e
;

80 
Æloc_func
 
zÆloc
;

81 
‰ì_func
 
z‰ì
;

82 
voidpf
 
›aque
;

84 
d©a_ty≥
;

85 
uL⁄g
 
adÀr
;

86 
uL⁄g
 
ª£rved
;

87 } 
	tz_°ªam
;

89 
z_°ªam
 
	tFAR
 *
	tz_°ªamp
;

125  
	#Z_NO_FLUSH
 0

	)
126  
	#Z_PARTIAL_FLUSH
 1

	)
127  
	#Z_SYNC_FLUSH
 2

	)
128  
	#Z_FULL_FLUSH
 3

	)
129  
	#Z_FINISH
 4

	)
132  
	#Z_OK
 0

	)
133  
	#Z_STREAM_END
 1

	)
134  
	#Z_NEED_DICT
 2

	)
135  
	#Z_ERRNO
 (-1)

	)
136  
	#Z_STREAM_ERROR
 (-2)

	)
137  
	#Z_DATA_ERROR
 (-3)

	)
138  
	#Z_MEM_ERROR
 (-4)

	)
139  
	#Z_BUF_ERROR
 (-5)

	)
140  
	#Z_VERSION_ERROR
 (-6)

	)
145  
	#Z_NO_COMPRESSION
 0

	)
146  
	#Z_BEST_SPEED
 1

	)
147  
	#Z_BEST_COMPRESSION
 9

	)
148  
	#Z_DEFAULT_COMPRESSION
 (-1)

	)
151  
	#Z_FILTERED
 1

	)
152  
	#Z_HUFFMAN_ONLY
 2

	)
153  
	#Z_DEFAULT_STRATEGY
 0

	)
156  
	#Z_BINARY
 0

	)
157  
	#Z_ASCII
 1

	)
158  
	#Z_UNKNOWN
 2

	)
161  
	#Z_DEFLATED
 8

	)
164  
	#Z_NULL
 0

	)
166  
	#zlib_vîsi⁄
 
	`zlibVîsi⁄
()

	)
171 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zlibVîsi⁄
 
OF
(());

201 
ZEXTERN
 
ZEXPORT
 
deÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

279 
ZEXTERN
 
ZEXPORT
 
deÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

314 
ZEXTERN
 
ZEXPORT
 
öÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

383 
ZEXTERN
 
ZEXPORT
 
öÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

444 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

445 c⁄° 
Byãf
 *
di˘i⁄¨y
,

446 
uI¡
 
di˘Lígth
));

480 
ZEXTERN
 
ZEXPORT
 
deÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

481 
z_°ªamp
 
sour˚
));

498 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

509 
ZEXTERN
 
ZEXPORT
 
deÊ©eP¨ams
 
OF
((
z_°ªamp
 
°rm
,

510 
Àvñ
,

511 
°øãgy
));

553 
ZEXTERN
 
ZEXPORT
 
öÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

554 c⁄° 
Byãf
 *
di˘i⁄¨y
,

555 
uI¡
 
di˘Lígth
));

572 
ZEXTERN
 
ZEXPORT
 
öÊ©eSync
 
OF
((
z_°ªamp
 
°rm
));

587 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

608 
ZEXTERN
 
ZEXPORT
 
com¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

609 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

623 
ZEXTERN
 
ZEXPORT
 
com¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

624 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
,

625 
Àvñ
));

638 
ZEXTERN
 
ZEXPORT
 
uncom¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

639 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

657 
voidp
 
	tgzFûe
;

659 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í
 
OF
((c⁄° *
∑th
, c⁄° *
mode
));

675 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gzd›í
 
OF
((
fd
, c⁄° *
mode
));

688 
ZEXTERN
 
ZEXPORT
 
gz£ç¨ams
 
OF
((
gzFûe
 
fûe
, 
Àvñ
, 
°øãgy
));

696 
ZEXTERN
 
ZEXPORT
 
gzªad
 
OF
((
gzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
));

704 
ZEXTERN
 
ZEXPORT
 
gzwrôe
 
OF
((
gzFûe
 
fûe
,

705 c⁄° 
voidp
 
buf
, 
Àn
));

712 
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
OF
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

719 
ZEXTERN
 
ZEXPORT
 
gzputs
 
OF
((
gzFûe
 
fûe
, c⁄° *
s
));

726 
ZEXTERN
 * 
ZEXPORT
 
gzgës
 
OF
((
gzFûe
 
fûe
, *
buf
, 
Àn
));

735 
ZEXTERN
 
ZEXPORT
 
gzputc
 
OF
((
gzFûe
 
fûe
, 
c
));

741 
ZEXTERN
 
ZEXPORT
 
gzgëc
 
OF
((
gzFûe
 
fûe
));

747 
ZEXTERN
 
ZEXPORT
 
gzÊush
 
OF
((
gzFûe
 
fûe
, 
Êush
));

757 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek
 
OF
((
gzFûe
 
fûe
,

758 
z_off_t
 
off£t
, 
whí˚
));

775 
ZEXTERN
 
ZEXPORT
 
gzªwöd
 
OF
((
gzFûe
 
fûe
));

782 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ
 
OF
((
gzFûe
 
fûe
));

791 
ZEXTERN
 
ZEXPORT
 
gzeof
 
OF
((
gzFûe
 
fûe
));

797 
ZEXTERN
 
ZEXPORT
 
gz˛o£
 
OF
((
gzFûe
 
fûe
));

804 
ZEXTERN
 c⁄° * 
ZEXPORT
 
gzîr‹
 
OF
((
gzFûe
 
fûe
, *
î∫um
));

821 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

838 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32
 
OF
((uL⁄g 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

860 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
,

861 c⁄° *
vîsi⁄
, 
°ªam_size
));

862 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
,

863 c⁄° *
vîsi⁄
, 
°ªam_size
));

864 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
mëhod
,

865 
wödowBôs
, 
memLevñ
,

866 
°øãgy
, c⁄° *
vîsi⁄
,

867 
°ªam_size
));

868 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

869 c⁄° *
vîsi⁄
, 
°ªam_size
));

870  
	#deÊ©eInô
(
°rm
, 
Àvñ
) \

871 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, (
z_°ªam
))

	)
872  
	#öÊ©eInô
(
°rm
) \

873 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, (
z_°ªam
))

	)
874  
	#deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

875 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

876 (
°øãgy
), 
ZLIB_VERSION
, (
z_°ªam
))

	)
877  
	#öÊ©eInô2
(
°rm
, 
wödowBôs
) \

878 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, (
z_°ªam
))

	)
881 #i‡!
deföed
(
_Z_UTIL_H
Ë&& !deföed(
NO_DUMMY_DECL
)

882 
	söã∫Æ_°©e
 {
dummy
;};

885 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zEº‹
 
OF
((
îr
));

886 
ZEXTERN
 
ZEXPORT
 
öÊ©eSyncPoöt
 
OF
((
z_°ªamp
 
z
));

887 
ZEXTERN
 c⁄° 
uL⁄gf
 * 
ZEXPORT
 
gë_¸c_èbÀ
 
OF
(());

889 #ifde‡
__˝lu•lus


	@/usr/include/floatingpoint.h

8 #i‚de‡
_FLOATINGPOINT_H


9  
	#_FLOATINGPOINT_H


	)
11 #¥agm®
idít
 "@(#)floatingpoint.h 2.5 99/06/22 SMI"

13 #ifde‡
__STDC__


14 
	~<°dio_èg.h
>

16 
	~<sys/õìÂ.h
>

18 #ifde‡ 
__˝lu•lus


37 #ifde‡
__STDC__


38  
	#__P
(
p
) 
	)
p

39 #i‚def 
_FILEDEFED


40  
	#_FILEDEFED


	)
41 
__FILE
 
	tFILE
;

44  
	#__P
(
p
) ()

	)
47  
	#N_IEEE_EXCEPTION
 5

	)
49 
	tsigÂe_code_ty≥
;

51 (*
	gsigÂe_h™dÀr_ty≥
)();

53  
	#SIGFPE_DEFAULT
 ((*)())0

	)
54  
	#SIGFPE_IGNORE
 ((*)())1

	)
55  
	#SIGFPE_ABORT
 ((*)())2

	)
57 
sigÂe_h™dÀr_ty≥
 
sigÂe
 
__P
((
sigÂe_code_ty≥
, sigfpe_handler_type));

62 
	tsögÀ
;

64 #i‚de‡
_EXTENDED


65  
	#_EXTENDED


	)
66 
	texãnded
[3];

69 
	tquadru∂e
;

71 
	tÂ_ex˚±i⁄_fõld_ty≥
;

79  
	#DECIMAL_STRING_LENGTH
 512

	)
81 
	tdecimÆ_°rög
[
DECIMAL_STRING_LENGTH
];

84 
	s
{

85 
Â_˛ass_ty≥
 
	gÂ˛ass
;

86 
	gsign
;

87 
	gexp⁄ít
;

88 
decimÆ_°rög
 
	gds
;

91 
	gm‹e
;

94 
	gndigôs
;

97 } 
	tdecimÆ_ªc‹d
;

99 
	edecimÆ_f‹m
 {

100 
	gfixed_f‹m
,

103 
	gÊﬂtög_f‹m


107 
	s
{

108 
Â_dúe˘i⁄_ty≥
 
	grd
;

110 
decimÆ_f‹m
 
	gdf
;

112 
	gndigôs
;

113 } 
	tdecimÆ_mode
;

115 
	edecimÆ_°rög_f‹m
 {

116 
	gövÆid_f‹m
,

117 
	gwhôe•a˚_f‹m
,

118 
	gfixed_öt_f‹m
,

119 
	gfixed_ötdŸ_f‹m
,

120 
	gfixed_dŸ‰ac_f‹m
,

121 
	gfixed_ötdŸ‰ac_f‹m
,

122 
	gÊﬂtög_öt_f‹m
,

123 
	gÊﬂtög_ötdŸ_f‹m
,

124 
	gÊﬂtög_dŸ‰ac_f‹m
,

125 
	gÊﬂtög_ötdŸ‰ac_f‹m
,

126 
	göf_f‹m
,

127 
	göföôy_f‹m
,

128 
	g«n_f‹m
,

129 
	g«n°rög_f‹m


132 
sögÀ_to_decimÆ
 
__P
((
sögÀ
 *, 
decimÆ_mode
 *, 
decimÆ_ªc‹d
 *,

133 
Â_ex˚±i⁄_fõld_ty≥
 *));

134 
doubÀ_to_decimÆ
 
__P
((*, 
decimÆ_mode
 *, 
decimÆ_ªc‹d
 *,

135 
Â_ex˚±i⁄_fõld_ty≥
 *));

136 
exãnded_to_decimÆ
 
__P
((
exãnded
 *, 
decimÆ_mode
 *,

137 
decimÆ_ªc‹d
 *, 
Â_ex˚±i⁄_fõld_ty≥
 *));

138 
quadru∂e_to_decimÆ
 
__P
((
quadru∂e
 *, 
decimÆ_mode
 *,

139 
decimÆ_ªc‹d
 *, 
Â_ex˚±i⁄_fõld_ty≥
 *));

141 
decimÆ_to_sögÀ
 
__P
((
sögÀ
 *, 
decimÆ_mode
 *, 
decimÆ_ªc‹d
 *,

142 
Â_ex˚±i⁄_fõld_ty≥
 *));

143 
decimÆ_to_doubÀ
 
__P
((*, 
decimÆ_mode
 *, 
decimÆ_ªc‹d
 *,

144 
Â_ex˚±i⁄_fõld_ty≥
 *));

145 
decimÆ_to_exãnded
 
__P
((
exãnded
 *, 
decimÆ_mode
 *,

146 
decimÆ_ªc‹d
 *, 
Â_ex˚±i⁄_fõld_ty≥
 *));

147 
decimÆ_to_quadru∂e
 
__P
((
quadru∂e
 *, 
decimÆ_mode
 *,

148 
decimÆ_ªc‹d
 *, 
Â_ex˚±i⁄_fõld_ty≥
 *));

150 
°rög_to_decimÆ
 
__P
((**, , , 
decimÆ_ªc‹d
 *,

151 
decimÆ_°rög_f‹m
 *, **));

152 
func_to_decimÆ
 
__P
((**, , , 
decimÆ_ªc‹d
 *,

153 
decimÆ_°rög_f‹m
 *, **,

155 
fûe_to_decimÆ
 
__P
((**, , , 
decimÆ_ªc‹d
 *,

156 
decimÆ_°rög_f‹m
 *, **,

157 
FILE
 *, *));

159 *
£c⁄vît
 
__P
((
sögÀ
 *, , *, *, *));

160 *
sfc⁄vît
 
__P
((
sögÀ
 *, , *, *, *));

161 *
sgc⁄vît
 
__P
((
sögÀ
 *, , , *));

162 *
ec⁄vît
 
__P
((, , *, *, *));

163 *
fc⁄vît
 
__P
((, , *, *, *));

164 *
gc⁄vît
 
__P
((, , , *));

165 *
qec⁄vît
 
__P
((
quadru∂e
 *, , *, *, *));

166 *
qfc⁄vît
 
__P
((
quadru∂e
 *, , *, *, *));

167 *
qgc⁄vît
 
__P
((
quadru∂e
 *, , , *));

169 *
ecvt
 
__P
((, , *, *));

170 *
fcvt
 
__P
((, , *, *));

171 *
gcvt
 
__P
((, , *));

177 
©of
 
__P
((const *));

178 
°πod
 
__P
((const *, **));

180 #ifde‡ 
__˝lu•lus


	@/usr/include/iso/math_iso.h

5 #i‚de‡
_ISO_MATH_ISO_H


6  
	#_ISO_MATH_ISO_H


	)
8 #¥agm®
idít
 "@(#)math_iso.h 1.3 03/04/08 SMI"

10 #ifde‡
__˝lu•lus


14 #ifde‡
__STDC__


15  
	#__P
(
p
) 
	)
p

17  
	#__P
(
p
) ()

	)
20 
	u_h_vÆ
 {

21 
_i
[() / ()];

22 
_d
;

23 } 
	t_h_vÆ
;

25 #ifde‡
__STDC__


26 c⁄° 
_h_vÆ
 
__huge_vÆ
;

28 
_h_vÆ
 
__huge_vÆ
;

31  
	#HUGE_VAL
 
__huge_vÆ
.
_d


	)
33 #i‡
__˝lu•lus
 >= 199711L

34 
«me•a˚
 
	g°d
 {

37 
acos
 
__P
(());

38 
asö
 
__P
(());

39 
©™
 
__P
(());

40 
©™2
 
__P
((, ));

41 
cos
 
__P
(());

42 
sö
 
__P
(());

43 
èn
 
__P
(());

45 
cosh
 
__P
(());

46 
söh
 
__P
(());

47 
ènh
 
__P
(());

49 
exp
 
__P
(());

50 
‰exp
 
__P
((, *));

51 
ldexp
 
__P
((, ));

52 
log
 
__P
(());

53 
log10
 
__P
(());

54 
modf
 
__P
((, *));

56 
pow
 
__P
((, ));

57 
sqπ
 
__P
(());

59 
˚û
 
__P
(());

60 
Ábs
 
__P
(());

61 
Êo‹
 
__P
(());

62 
fmod
 
__P
((, ));

64 #i‡
deföed
(
__MATHERR_ERRNO_DONTCARE
)

65 #¥agm®
d€s_nŸ_ªad_globÆ_d©a
(
acos
, 
asö
, 
©™
, 
©™2
)

66 #¥agm®
d€s_nŸ_ªad_globÆ_d©a
(
cos
, 
sö
, 
èn
, 
cosh
, 
söh
, 
ènh
)

67 #¥agm®
d€s_nŸ_ªad_globÆ_d©a
(
exp
, 
log
, 
log10
, 
pow
, 
sqπ
)

68 #¥agm®
d€s_nŸ_ªad_globÆ_d©a
(
‰exp
, 
ldexp
, 
modf
)

69 #¥agm®
d€s_nŸ_ªad_globÆ_d©a
(
˚û
, 
Ábs
, 
Êo‹
, 
fmod
)

70 #¥agm®
d€s_nŸ_wrôe_globÆ_d©a
(
acos
, 
asö
, 
©™
, 
©™2
)

71 #¥agm®
d€s_nŸ_wrôe_globÆ_d©a
(
cos
, 
sö
, 
èn
, 
cosh
, 
söh
, 
ènh
)

72 #¥agm®
d€s_nŸ_wrôe_globÆ_d©a
(
exp
, 
log
, 
log10
, 
pow
, 
sqπ
)

73 #¥agm®
d€s_nŸ_wrôe_globÆ_d©a
(
ldexp
)

74 #¥agm®
d€s_nŸ_wrôe_globÆ_d©a
(
˚û
, 
Ábs
, 
Êo‹
, 
fmod
)

75 #¥agm®
no_side_ef„˘
(
acos
, 
asö
, 
©™
, 
©™2
)

76 #¥agm®
no_side_ef„˘
(
cos
, 
sö
, 
èn
, 
cosh
, 
söh
, 
ènh
)

77 #¥agm®
no_side_ef„˘
(
exp
, 
log
, 
log10
, 
pow
, 
sqπ
)

78 #¥agm®
no_side_ef„˘
(
ldexp
)

79 #¥agm®
no_side_ef„˘
(
˚û
, 
Ábs
, 
Êo‹
, 
fmod
)

82 #i‡
__˝lu•lus
 >= 199711L

83 
__acosf
();

84 
__asöf
();

85 
__©™f
();

86 
__©™2f
(, );

87 
__˚ûf
();

88 
__cosf
();

89 
__coshf
();

90 
__expf
();

91 
__Ábsf
();

92 
__Êo‹f
();

93 
__fmodf
(, );

94 
__‰expf
(, *);

95 
__ldexpf
(, );

96 
__logf
();

97 
__log10f
();

98 
__modff
(, *);

99 
__powf
(, );

100 
__söf
();

101 
__söhf
();

102 
__sqπf
();

103 
__ènf
();

104 
__ènhf
();

106 
__aco¶
();

107 
__asöl
();

108 
__©™l
();

109 
__©™2l
(, );

110 
__˚ûl
();

111 
__co¶
();

112 
__coshl
();

113 
__ex∂
();

114 
__Áb¶
();

115 
__Êo‹l
();

116 
__fmodl
(, );

117 
__‰ex∂
(, *);

118 
__ldex∂
(, );

119 
__logl
();

120 
__log10l
();

121 
__modÊ
(, *);

122 
__powl
(, );

123 
__söl
();

124 
__söhl
();

125 
__sqπl
();

126 
__è∆
();

127 
__ènhl
();

130 #undef 
__X


131 #undef 
__Y


132 
ölöe
 
abs
(
__X
Ë{  
Ábs
(__X); }

133 
ölöe
 
pow
(
__X
, 
__Y
) { 

134 
pow
(
__X
, (Ë(
__Y
)); }

136 
ölöe
 
abs
(
__X
Ë{  
__Ábsf
(__X); }

137 
ölöe
 
acos
(
__X
Ë{  
__acosf
(__X); }

138 
ölöe
 
asö
(
__X
Ë{  
__asöf
(__X); }

139 
ölöe
 
©™
(
__X
Ë{  
__©™f
(__X); }

140 
ölöe
 
©™2
(
__X
, 
__Y
Ë{  
__©™2f
(__X, __Y); }

141 
ölöe
 
˚û
(
__X
Ë{  
__˚ûf
(__X); }

142 
ölöe
 
cos
(
__X
Ë{  
__cosf
(__X); }

143 
ölöe
 
cosh
(
__X
Ë{  
__coshf
(__X); }

144 
ölöe
 
exp
(
__X
Ë{  
__expf
(__X); }

145 
ölöe
 
Ábs
(
__X
Ë{  
__Ábsf
(__X); }

146 
ölöe
 
Êo‹
(
__X
Ë{  
__Êo‹f
(__X); }

147 
ölöe
 
fmod
(
__X
, 
__Y
Ë{  
__fmodf
(__X, __Y); }

148 
ölöe
 
‰exp
(
__X
, *
__Y
Ë{  
__‰expf
(__X, __Y); }

149 
ölöe
 
ldexp
(
__X
, 
__Y
Ë{  
__ldexpf
(__X, __Y); }

150 
ölöe
 
log
(
__X
Ë{  
__logf
(__X); }

151 
ölöe
 
log10
(
__X
Ë{  
__log10f
(__X); }

152 
ölöe
 
modf
(
__X
, *
__Y
Ë{  
__modff
(__X, __Y); }

153 
ölöe
 
pow
(
__X
, 
__Y
Ë{  
__powf
(__X, __Y); }

154 
ölöe
 
pow
(
__X
, 
__Y
) { 

155 
pow
((Ë(
__X
), (Ë(
__Y
)); }

156 
ölöe
 
sö
(
__X
Ë{  
__söf
(__X); }

157 
ölöe
 
söh
(
__X
Ë{  
__söhf
(__X); }

158 
ölöe
 
sqπ
(
__X
Ë{  
__sqπf
(__X); }

159 
ölöe
 
èn
(
__X
Ë{  
__ènf
(__X); }

160 
ölöe
 
ènh
(
__X
Ë{  
__ènhf
(__X); }

162 
ölöe
 
abs
(
__X
Ë{  
__Áb¶
(__X); }

163 
ölöe
 
acos
(
__X
Ë{  
__aco¶
(__X); }

164 
ölöe
 
asö
(
__X
Ë{  
__asöl
(__X); }

165 
ölöe
 
©™
(
__X
Ë{  
__©™l
(__X); }

166 
ölöe
 
©™2
(
__X
, 
__Y
) { 

167 
__©™2l
(
__X
, 
__Y
); }

168 
ölöe
 
˚û
(
__X
Ë{  
__˚ûl
(__X); }

169 
ölöe
 
cos
(
__X
Ë{  
__co¶
(__X); }

170 
ölöe
 
cosh
(
__X
Ë{  
__coshl
(__X); }

171 
ölöe
 
exp
(
__X
Ë{  
__ex∂
(__X); }

172 
ölöe
 
Ábs
(
__X
Ë{  
__Áb¶
(__X); }

173 
ölöe
 
Êo‹
(
__X
Ë{  
__Êo‹l
(__X); }

174 
ölöe
 
fmod
(
__X
, 
__Y
) { 

175 
__fmodl
(
__X
, 
__Y
); }

176 
ölöe
 
‰exp
(
__X
, *
__Y
) { 

177 
__‰ex∂
(
__X
, 
__Y
); }

178 
ölöe
 
ldexp
(
__X
, 
__Y
) { 

179 
__ldex∂
(
__X
, 
__Y
); }

180 
ölöe
 
log
(
__X
Ë{  
__logl
(__X); }

181 
ölöe
 
log10
(
__X
Ë{  
__log10l
(__X); }

182 
ölöe
 
modf
(
__X
, *
__Y
) { 

183 
__modÊ
(
__X
, 
__Y
); }

184 
ölöe
 
pow
(
__X
, 
__Y
) { 

185 
__powl
(
__X
, 
__Y
); }

186 
ölöe
 
pow
(
__X
, 
__Y
) { 

187 
__powl
(
__X
, (Ë(
__Y
)); }

188 
ölöe
 
sö
(
__X
Ë{  
__söl
(__X); }

189 
ölöe
 
söh
(
__X
Ë{  
__söhl
(__X); }

190 
ölöe
 
sqπ
(
__X
Ë{  
__sqπl
(__X); }

191 
ölöe
 
èn
(
__X
Ë{  
__è∆
(__X); }

192 
ölöe
 
ènh
(
__X
Ë{  
__ènhl
(__X); }

196 #i‡
__˝lu•lus
 >= 199711L

200 #ifde‡
__˝lu•lus


	@/usr/include/iso/stdio_iso.h

29 #i‚de‡
_ISO_STDIO_ISO_H


30  
	#_ISO_STDIO_ISO_H


	)
32 #¥agm®
idít
 "@(#)stdio_iso.h 1.2 99/10/25 SMI"

35 
	~<sys/„©uª_ã°s.h
>

36 
	~<sys/va_li°.h
>

37 
	~<°dio_èg.h
>

38 
	~<°dio_im∂.h
>

48 #ifdef 
__˝lu•lus


52 #i‡!
deföed
(
_LP64
Ë&& (
_FILE_OFFSET_BITS
 =64 || deföed(
_LARGEFILE64_SOURCE
))

58 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

59 
	t__l⁄gl⁄g_t
;

62 
	u
{

63 
	m_d
;

64 
	m_l
[2];

65 } 
	t__l⁄gl⁄g_t
;

69 #i‡
__˝lu•lus
 >= 199711L

70 
«me•a˚
 
	g°d
 {

73 #i‡!
deföed
(
_FILEDEFED
Ë|| 
__˝lu•lus
 >= 199711L

74  
	#_FILEDEFED


	)
75 
__FILE
 
	tFILE
;

78 #i‡!
deföed
(
_SIZE_T
Ë|| 
__˝lu•lus
 >= 199711L

79  
	#_SIZE_T


	)
80 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

81 
	tsize_t
;

83 
	tsize_t
;

87 #i‡
deföed
(
_LP64
Ë|| 
_FILE_OFFSET_BITS
 == 32

88 
	tÂos_t
;

90 
__l⁄gl⁄g_t
 
	tÂos_t
;

93 #i‡
__˝lu•lus
 >= 199711L

97 #i‚def 
NULL


98 #i‡
deföed
(
_LP64
Ë&& !deföed(
__˝lu•lus
)

99  
	#NULL
 0L

	)
101  
	#NULL
 0

	)
105  
	#BUFSIZ
 1024

	)
113 #i‡
deföed
(
__i386
)

114  
	#_NFILE
 60

	)
116  
	#_NFILE
 20

	)
119  
	#_SBFSIZ
 8

	)
121  
	#_IOFBF
 0000

	)
122  
	#_IOLBF
 0100

	)
123  
	#_IONBF
 0004

	)
124  
	#_IOEOF
 0020

	)
125  
	#_IOERR
 0040

	)
127  
	#_IOREAD
 0001

	)
128  
	#_IOWRT
 0002

	)
129  
	#_IORW
 0200

	)
130  
	#_IOMYBUF
 0010

	)
132 #i‚de‡
EOF


133  
	#EOF
 (-1)

	)
136  
	#FOPEN_MAX
 
_NFILE


	)
137  
	#FILENAME_MAX
 1024

	)
139  
	#SEEK_SET
 0

	)
140  
	#SEEK_CUR
 1

	)
141  
	#SEEK_END
 2

	)
142  
	#TMP_MAX
 17576

	)
144  
	#L_tm≤am
 25

	)
146 #i‡
deföed
(
__STDC__
)

147 
__FILE
 
__iob
[
_NFILE
];

148  
	#°dö
 (&
__iob
[0])

	)
149  
	#°dout
 (&
__iob
[1])

	)
150  
	#°dîr
 (&
__iob
[2])

	)
152 
__FILE
 
_iob
[
_NFILE
];

153  
	#°dö
 (&
_iob
[0])

	)
154  
	#°dout
 (&
_iob
[1])

	)
155  
	#°dîr
 (&
_iob
[2])

	)
158 #i‡
__˝lu•lus
 >= 199711L

159 
«me•a˚
 
	g°d
 {

162 #i‡
deföed
(
__STDC__
)

164 
ªmove
(const *);

165 
ª«me
(const *, const *);

166 
FILE
 *
tmpfûe
();

167 *
tm≤am
(*);

168 
f˛o£
(
FILE
 *);

169 
fÊush
(
FILE
 *);

170 
FILE
 *
f›í
(const *, const *);

171 
FILE
 *
‰e›í
(const *, const *, FILE *);

172 
£tbuf
(
FILE
 *, *);

173 
£tvbuf
(
FILE
 *, *, , 
size_t
);

175 
Ârötf
(
FILE
 *, const *, ...);

177 
fsˇnf
(
FILE
 *, const *, ...);

179 
¥ötf
(const *, ...);

181 
sˇnf
(const *, ...);

183 
•rötf
(*, const *, ...);

185 
ssˇnf
(const *, const *, ...);

186 
vÂrötf
(
FILE
 *, c⁄° *, 
__va_li°
);

187 
v¥ötf
(c⁄° *, 
__va_li°
);

188 
v•rötf
(*, c⁄° *, 
__va_li°
);

189 
fgëc
(
FILE
 *);

190 *
fgës
(*, , 
FILE
 *);

191 
Âutc
(, 
FILE
 *);

192 
Âuts
(c⁄° *, 
FILE
 *);

193 #i‡(
__˝lu•lus
 >199711L && (
deföed
(
_LP64
Ë|| deföed(
_REENTRANT
))) || \

194 
	g__˝lu•lus
 < 199711L

195 
gëc
(
FILE
 *);

196 
putc
(, 
FILE
 *);

198 #i‡(
__˝lu•lus
 >199711L && 
deföed
(
_REENTRANT
)) || \

199 
	g__˝lu•lus
 < 199711L

200 
gëch¨
();

201 
putch¨
();

203 *
gës
(*);

204 
puts
(const *);

205 
ungëc
(, 
FILE
 *);

206 
size_t
 
‰ód
(*, size_t, size_t, 
FILE
 *);

207 
size_t
 
fwrôe
(c⁄° *, size_t, size_t, 
FILE
 *);

208 
fgëpos
(
FILE
 *, 
Âos_t
 *);

209 
f£ek
(
FILE
 *, , );

210 
f£ços
(
FILE
 *, c⁄° 
Âos_t
 *);

211 
·ñl
(
FILE
 *);

212 
ªwöd
(
FILE
 *);

213 #i‡(
__˝lu•lus
 >199711L && (
deföed
(
_LP64
Ë|| deföed(
_REENTRANT
))) || \

214 
	g__˝lu•lus
 < 199711L

215 
˛óªº
(
FILE
 *);

216 
„of
(
FILE
 *);

217 
„º‹
(
FILE
 *);

219 
≥º‹
(const *);

221 #i‚def 
_LP64


222 
__fûbuf
(
FILE
 *);

223 
__Êsbuf
(, 
FILE
 *);

228 
ªmove
();

229 
ª«me
();

230 
FILE
 *
tmpfûe
();

231 *
tm≤am
();

232 
f˛o£
();

233 
fÊush
();

234 
FILE
 *
f›í
();

235 
FILE
 *
‰e›í
();

236 
£tbuf
();

237 
£tvbuf
();

238 
Ârötf
();

239 
fsˇnf
();

240 
¥ötf
();

241 
sˇnf
();

242 
•rötf
();

243 
ssˇnf
();

244 
vÂrötf
();

245 
v¥ötf
();

246 
v•rötf
();

247 
fgëc
();

248 *
fgës
();

249 
Âutc
();

250 
Âuts
();

251 
gëc
();

252 
gëch¨
();

253 *
gës
();

254 
putc
();

255 
putch¨
();

256 
puts
();

257 
ungëc
();

258 
size_t
 
‰ód
();

259 
size_t
 
fwrôe
();

260 
fgëpos
();

261 
f£ek
();

262 
f£ços
();

263 
·ñl
();

264 
ªwöd
();

265 
˛óªº
();

266 
„of
();

267 
„º‹
();

268 
≥º‹
();

270 #i‚def 
_LP64


271 
_fûbuf
();

272 
_Êsbuf
();

277 #i‡
__˝lu•lus
 >= 199711L

281 #i‡!
deföed
(
__löt
)

283 #i‚def 
_REENTRANT


285 #i‚def 
_LP64


286 #ifdef 
__STDC__


287 #i‡
__˝lu•lus
 >= 199711L

288 
«me•a˚
 
	g°d
 {

289 
ölöe
 
gëc
(
FILE
 *
_p
) {

290  (--
	g_p
->
	g_˙t
 < 0 ? 
__fûbuf
(
_p
Ë: ()*_p->
_±r
++); }

291 
ölöe
 
putc
(
_x
, 
FILE
 *
_p
) {

292  (--
	g_p
->
	g_˙t
 < 0 ? 
__Êsbuf
(
_x
, 
_p
)

293 : ()(*
_p
->
_±r
++ = (Ë
_x
)); }

296  
	#gëc
(
p
) (--’)->
_˙t
 < 0 ? 
	`__fûbuf
’Ë: ()*’)->
_±r
++)

	)
297  
	#putc
(
x
, 
p
) (--’)->
_˙t
 < 0 ? 
	`__Êsbuf
((x), (p)) \

298 : ()(*(
p
)->
_±r
++ = (Ë(
x
)))

	)
301  
	#gëc
(
p
) (--’)->
_˙t
 < 0 ? 
	`_fûbuf
’Ë: (Ë*’)->
_±r
++)

	)
302  
	#putc
(
x
, 
p
) (--’)->
_˙t
 < 0 ? 
	`_Êsbuf
((x), (p)) : \

303 (Ë(*(
p
)->
_±r
++ = (Ë(
x
)))

	)
307 #i‡
__˝lu•lus
 >= 199711L

308 
«me•a˚
 
	g°d
 {

309 
ölöe
 
gëch¨
(Ë{  
gëc
(
°dö
); }

310 
ölöe
 
putch¨
(
_x
Ë{  
putc
(_x, 
°dout
); }

313  
	#gëch¨
() 
	`gëc
(
°dö
)

	)
314  
	#putch¨
(
x
) 
	`putc
((x), 
°dout
)

	)
317 #i‚def 
_LP64


318 #i‡
__˝lu•lus
 >= 199711L

319 
«me•a˚
 
	g°d
 {

320 
ölöe
 
˛óªº
(
FILE
 *
_p
Ë{ 
	g_p
->
	g_Êag
 &~(
_IOERR
 | 
_IOEOF
); }

321 
ölöe
 
„of
(
FILE
 *
_p
Ë{  
	g_p
->
	g_Êag
 & 
	g_IOEOF
; }

322 
ölöe
 
„º‹
(
FILE
 *
_p
Ë{  
	g_p
->
	g_Êag
 & 
	g_IOERR
; }

325  
	#˛óªº
(
p
) (()(’)->
_Êag
 &~(
_IOERR
 | 
_IOEOF
)))

	)
326  
	#„of
(
p
) (’)->
_Êag
 & 
_IOEOF
)

	)
327  
	#„º‹
(
p
) (’)->
_Êag
 & 
_IOERR
)

	)
335 #ifdef 
__˝lu•lus


	@/usr/include/iso/stdlib_iso.h

25 #i‚de‡
_ISO_STDLIB_ISO_H


26  
	#_ISO_STDLIB_ISO_H


	)
28 #¥agm®
idít
 "@(#)stdlib_iso.h 1.3 01/03/09 SMI"

30 
	~<sys/„©uª_ã°s.h
>

32 #ifdef 
__˝lu•lus


36 #i‡
deföed
(
__STDC__
)

37 
__˘y≥
[];

38  
	#MB_CUR_MAX
 
__˘y≥
[520]

	)
40 
_˘y≥
[];

41  
	#MB_CUR_MAX
 
_˘y≥
[520]

	)
44 #i‡
__˝lu•lus
 >= 199711L

45 
«me•a˚
 
	g°d
 {

48 
	s
{

49 
	gquŸ
;

50 
	gªm
;

51 } 
	tdiv_t
;

53 
	s
{

54 
	gquŸ
;

55 
	gªm
;

56 } 
	tldiv_t
;

58 #i‡!
deföed
(
_SIZE_T
Ë|| 
__˝lu•lus
 >= 199711L

59  
	#_SIZE_T


	)
60 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

61 
	tsize_t
;

63 
	tsize_t
;

67 #i‚def 
NULL


68 #i‡
deföed
(
_LP64
Ë&& !deföed(
__˝lu•lus
)

69  
	#NULL
 0L

	)
71  
	#NULL
 0

	)
75  
	#EXIT_FAILURE
 1

	)
76  
	#EXIT_SUCCESS
 0

	)
77  
	#RAND_MAX
 32767

	)
79 #i‚de‡
_WCHAR_T


80  
	#_WCHAR_T


	)
81 #i‡
deföed
(
_LP64
)

82 
	twch¨_t
;

84 
	twch¨_t
;

88 #i‡
deföed
(
__STDC__
)

90 
ab‹t
();

91 
abs
();

92 
©exô
((*)());

93 
©of
(const *);

94 
©oi
(const *);

95 
©ﬁ
(const *);

96 *
b£¨ch
(c⁄° *, c⁄° *, 
size_t
, size_t,

98 *
ˇŒoc
(
size_t
, size_t);

99 
div_t
 
div
(, );

100 
exô
();

101 
‰ì
(*);

102 *
gëív
(const *);

103 
œbs
();

104 
ldiv_t
 
ldiv
(, );

105 *
mÆloc
(
size_t
);

106 
mbÀn
(c⁄° *, 
size_t
);

107 
size_t
 
mb°owcs
(
wch¨_t
 *, const *, size_t);

108 
mbtowc
(
wch¨_t
 *, c⁄° *, 
size_t
);

109 
qs‹t
(*, 
size_t
, size_t,

111 
ønd
();

112 *
ªÆloc
(*, 
size_t
);

113 
§™d
();

114 
°πod
(const *, **);

115 
°πﬁ
(const *, **, );

116 
°πoul
(const *, **, );

117 
sy°em
(const *);

118 
w˘omb
(*, 
wch¨_t
);

119 
size_t
 
wc°ombs
(*, c⁄° 
wch¨_t
 *, size_t);

121 #i‡
__˝lu•lus
 >= 199711L

123 
ölöe
 
abs
(
_l
Ë{  
œbs
(_l); }

124 
ölöe
 
ldiv_t
 
div
(
_l1
, 
_l2
Ë{  
ldiv
(_l1, _l2); }

130 
ab‹t
();

131 
abs
();

132 
©exô
();

133 
©of
();

134 
©oi
();

135 
©ﬁ
();

136 *
b£¨ch
();

137 *
ˇŒoc
();

138 
div_t
 
div
();

139 
exô
();

140 
‰ì
();

141 *
gëív
();

142 
œbs
();

143 
ldiv_t
 
ldiv
();

144 *
mÆloc
();

145 
mbÀn
();

146 
size_t
 
mb°owcs
();

147 
mbtowc
();

148 
qs‹t
();

149 
ønd
();

150 *
ªÆloc
();

151 
§™d
();

152 
°πod
();

153 
°πﬁ
();

154 
°πoul
();

155 
sy°em
();

156 
w˘omb
();

157 
size_t
 
wc°ombs
();

161 #i‡
__˝lu•lus
 >= 199711L

165 #ifdef 
__˝lu•lus


	@/usr/include/iso/string_iso.h

25 #i‚de‡
_ISO_STRING_ISO_H


26  
	#_ISO_STRING_ISO_H


	)
28 #¥agm®
idít
 "@(#)string_iso.h 1.2 99/11/09 SMI"

31 
	~<sys/„©uª_ã°s.h
>

33 #ifdef 
__˝lu•lus


37 #i‡
__˝lu•lus
 >= 199711L

38 
«me•a˚
 
°d
 {

41 #i‡!
deföed
(
_SIZE_T
Ë|| 
__˝lu•lus
 >= 199711L

42  
	#_SIZE_T


	)
43 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

44 
	tsize_t
;

46 
	tsize_t
;

50 #i‚def 
NULL


51 #i‡
deföed
(
_LP64
Ë&& !deföed(
__˝lu•lus
)

52  
	#NULL
 0L

	)
54  
	#NULL
 0

	)
58 #i‡
deföed
(
__STDC__
)

60 
memcmp
(c⁄° *, c⁄° *, 
size_t
);

61 *
mem˝y
(*, c⁄° *, 
size_t
);

62 *
memmove
(*, c⁄° *, 
size_t
);

63 *
mem£t
(*, , 
size_t
);

64 *
°rˇt
(*, const *);

65 
°rcmp
(const *, const *);

66 *
°r˝y
(*, const *);

67 
°rcﬁl
(const *, const *);

68 
size_t
 
°rc•n
(const *, const *);

69 *
°ªº‹
();

70 
size_t
 
°æí
(const *);

71 *
°∫ˇt
(*, c⁄° *, 
size_t
);

72 
°∫cmp
(c⁄° *, c⁄° *, 
size_t
);

73 *
°∫˝y
(*, c⁄° *, 
size_t
);

74 
size_t
 
°r•n
(const *, const *);

75 *
°πok
(*, const *);

76 
size_t
 
°rx‰m
(*, const *, size_t);

77 #i‡
__˝lu•lus
 >= 199711L

78 c⁄° *
°rchr
(const *, );

80 
ölöe
 *
°rchr
(*
__s
, 
__c
) {

81  (*)
°rchr
((c⁄° *)
__s
, 
__c
);

84 c⁄° *
°Ωbrk
(const *, const *);

86 
ölöe
 * 
°Ωbrk
(*
__s1
, c⁄° *
__s2
) {

87  (*)
°Ωbrk
((c⁄° *)
__s1
, 
__s2
);

90 c⁄° *
°ºchr
(const *, );

92 
ölöe
 * 
°ºchr
(*
__s
, 
__c
) {

93  (*)
°ºchr
((c⁄° *)
__s
, 
__c
);

96 c⁄° *
°r°r
(const *, const *);

98 
ölöe
 *
°r°r
(*
__s1
, c⁄° *
__s2
) {

99  (*)
°r°r
((c⁄° *)
__s1
, 
__s2
);

102 c⁄° *
memchr
(c⁄° *, , 
size_t
);

103 #i‚de‡
_MEMCHR_INLINE


104  
	#_MEMCHR_INLINE


	)
106 
ölöe
 * 
memchr
(* 
__s
, 
__c
, 
size_t
 
__n
) {

107  (*)
memchr
((c⁄° *)
__s
, 
__c
, 
__n
);

112 *
memchr
(c⁄° *, , 
size_t
);

113 *
°rchr
(const *, );

114 *
°Ωbrk
(const *, const *);

115 *
°ºchr
(const *, );

116 *
°r°r
(const *, const *);

121 *
memchr
();

122 
memcmp
();

123 *
mem˝y
();

124 *
memmove
();

125 *
mem£t
();

126 *
°rˇt
();

127 *
°rchr
();

128 
°rcmp
();

129 
°rcﬁl
();

130 *
°r˝y
();

131 
size_t
 
°rc•n
();

132 *
°ªº‹
();

133 
size_t
 
°æí
();

134 *
°∫ˇt
();

135 
°∫cmp
();

136 *
°∫˝y
();

137 *
°Ωbrk
();

138 *
°ºchr
();

139 
size_t
 
°r•n
();

140 *
°r°r
();

141 *
°πok
();

142 
size_t
 
°rx‰m
();

146 #i‡
__˝lu•lus
 >= 199711L

150 #ifdef 
__˝lu•lus


	@/usr/include/iso/time_iso.h

25 #i‚de‡
_ISO_TIME_ISO_H


26  
	#_ISO_TIME_ISO_H


	)
28 #¥agm®
idít
 "@(#)time_iso.h 1.1 99/08/09 SMI"

30 
	~<sys/„©uª_ã°s.h
>

32 #ifdef 
__˝lu•lus


36 #i‡
__˝lu•lus
 >= 199711L

37 
«me•a˚
 
°d
 {

40 #i‚de‡
NULL


41 #i‡
deföed
(
_LP64
Ë&& !deföed(
__˝lu•lus
)

42  
	#NULL
 0L

	)
44  
	#NULL
 0

	)
48 #i‡!
deföed
(
_SIZE_T
Ë|| 
__˝lu•lus
 >= 199711L

49  
	#_SIZE_T


	)
50 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

51 
	tsize_t
;

53 
	tsize_t
;

57 #i‡!
deföed
(
_CLOCK_T
Ë|| 
__˝lu•lus
 >= 199711L

58  
	#_CLOCK_T


	)
59 
	t˛ock_t
;

62 #i‡!
deföed
(
_TIME_T
Ë|| 
__˝lu•lus
 >= 199711L

63  
	#_TIME_T


	)
64 
	ttime_t
;

67  
	#CLOCKS_PER_SEC
 1000000

	)
69 
	stm
 {

70 
	mtm_£c
;

71 
	mtm_mö
;

72 
	mtm_hour
;

73 
	mtm_mday
;

74 
	mtm_m⁄
;

75 
	mtm_yór
;

76 
	mtm_wday
;

77 
	mtm_yday
;

78 
	mtm_isd°
;

82 #i‡
deföed
(
__STDC__
)

84 *
as˘ime
(c⁄° 
tm
 *);

85 
˛ock_t
 
˛ock
();

86 *
˘ime
(c⁄° 
time_t
 *);

87 
dif·ime
(
time_t
,Åime_t);

88 
tm
 *
gmtime
(c⁄° 
time_t
 *);

89 
tm
 *
loˇ…ime
(c⁄° 
time_t
 *);

90 
time_t
 
mktime
(
tm
 *);

91 
time_t
 
time
(time_t *);

92 
size_t
 
°r·ime
(*, size_t, c⁄° *, c⁄° 
tm
 *);

96 *
as˘ime
();

97 
˛ock_t
 
˛ock
();

98 *
˘ime
();

99 
dif·ime
();

100 
tm
 *
gmtime
();

101 
tm
 *
loˇ…ime
();

102 
time_t
 
mktime
();

103 
time_t
 
time
();

104 
size_t
 
°r·ime
();

108 #i‡
__˝lu•lus
 >= 199711L

112 #ifdef 
__˝lu•lus


	@/usr/include/sys/feature_tests.h

10 #i‚de‡
_SYS_FEATURE_TESTS_H


11  
	#_SYS_FEATURE_TESTS_H


	)
13 #¥agm®
idít
 "@(#)feature_tests.h 1.18 99/07/26 SMI"

15 
	~<sys/iß_defs.h
>

17 #ifdef 
__˝lu•lus


30 #if 
deföed
(
_POSIX_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
)

31  
	#_POSIX_C_SOURCE
 1

	)
63 #i‡ ((
__STDC__
 - 0 == 0) && \

64 !
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

65 
deföed
(
_KERNEL
Ë|| deföed(
_KMEMUSER
) || \

66 
	$deföed
(
__EXTENSIONS__
)

67 #undef 
_LARGEFILE64_SOURCE


68  
	#_LARGEFILE64_SOURCE
 1

	)
70 #if 
_LARGEFILE64_SOURCE
 - 0 == 1

71 #undef 
_LARGEFILE_SOURCE


72  
	#_LARGEFILE_SOURCE
 1

	)
87 #i‡
	`deföed
(
_LP64
)

88 #i‚de‡
_FILE_OFFSET_BITS


89  
	#_FILE_OFFSET_BITS
 64

	)
91 #if 
_FILE_OFFSET_BITS
 - 0 != 64

95 #i‚def 
_FILE_OFFSET_BITS


96  
	#_FILE_OFFSET_BITS
 32

	)
98 #if 
_FILE_OFFSET_BITS
 - 0 != 32 && _FILE_OFFSET_BITS - 0 != 64

119 #i‡(
	`deföed
(
_XOPEN_SOURCE
Ë&& 
_XOPEN_SOURCE_EXTENDED
 - 0 == 1)

120  
	#_XPG4_2


	)
138 #i‡(
_XOPEN_SOURCE
 - 0 == 500)

139  
	#_XPG5


	)
140  
	#_XPG4_2


	)
141 #undef 
_POSIX_C_SOURCE


142  
	#_POSIX_C_SOURCE
 199506L

	)
143  
	#_POSIX_PTHREAD_SEMANTICS
 1

	)
162 #i‚def 
_XOPEN_VERSION


163 #ifdef 
_XPG5


164  
	#_XOPEN_VERSION
 500

	)
166 #ifdef 
_XPG4_2


167  
	#_XOPEN_VERSION
 4

	)
169  
	#_XOPEN_VERSION
 3

	)
178  
	#_ISO_CPP_14882_1998


	)
180 #ifdef 
__˝lu•lus


181 
	}
}

	@/usr/include/sys/time_impl.h

16 #i‚de‡
_SYS_TIME_IMPL_H


17  
	#_SYS_TIME_IMPL_H


	)
19 #¥agm®
idít
 "@(#)time_impl.h 1.7 01/09/06 SMI"

21 
	~<sys/„©uª_ã°s.h
>

23 #ifdef 
__˝lu•lus


27 #i‚def 
_ASM


29 #i‚de‡
_TIME_T


30  
	#_TIME_T


	)
31 
	ttime_t
;

38 
	stime•ec
 {

39 
time_t
 
	mtv_£c
;

40 
	mtv_n£c
;

41 } 
	ttime•ec_t
;

43 #i‡
deföed
(
_SYSCALL32
)

45 
	~<sys/ty≥s32.h
>

47  
	#TIMESPEC32_TO_TIMESPEC
(
ts
, 
ts32
) { \

48 (
ts
)->
tv_£c
 = (
time_t
)(
ts32
)->tv_sec; \

49 (
ts
)->
tv_n£c
 = (
ts32
)->tv_nsec; \

50 }

	)
52  
	#TIMESPEC_TO_TIMESPEC32
(
ts32
, 
ts
) { \

53 (
ts32
)->
tv_£c
 = (
time32_t
)(
ts
)->tv_sec; \

54 (
ts32
)->
tv_n£c
 = (
ts
)->tv_nsec; \

55 }

	)
57  
	#TIMESPEC_OVERFLOW
(
ts
) \

58 ((
ts
)->
tv_£c
 < 
TIME32_MIN
 || (ts)->tv_£¯> 
TIME32_MAX
)

	)
62 
time•ec
 
	ttime°ruc_t
;

69 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

70 
	$deföed
(
__EXTENSIONS__
)

71  
	#time°ruc
 
time•ec


	)
77 
	sôimî•ec
 {

78 
time•ec
 
ô_öãrvÆ
;

79 
time•ec
 
ô_vÆue
;

80 } 
	tôimî•ec_t
;

82 #i‡
	`deföed
(
_SYSCALL32
)

84  
	#ITIMERSPEC32_TO_ITIMERSPEC
(
ô
, 
ô32
) { \

85 
	`TIMESPEC32_TO_TIMESPEC
(&(
ô
)->
ô_öãrvÆ
, &(
ô32
)->it_interval); \

86 
	`TIMESPEC32_TO_TIMESPEC
(&(
ô
)->
ô_vÆue
, &(
ô32
)->it_value); \

87 
	}

	)
}

89  
	#ITIMERSPEC_TO_ITIMERSPEC32
(
ô32
, 
ô
) { \

90 
	`TIMESPEC_TO_TIMESPEC32
(&(
ô32
)->
ô_öãrvÆ
, &(
ô
)->it_interval); \

91 
	`TIMESPEC_TO_TIMESPEC32
(&(
ô32
)->
ô_vÆue
, &(
ô
)->it_value); \

92 }

	)
94  
	#ITIMERSPEC_OVERFLOW
(
ô
) \

95 (
	`TIMESPEC_OVERFLOW
(&(
ô
)->
ô_öãrvÆ
) && \

96 
	`TIMESPEC_OVERFLOW
(&(
ô
)->
ô_vÆue
))

	)
102  
	#__CLOCK_REALTIME0
 0

	)
103  
	#CLOCK_VIRTUAL
 1

	)
104  
	#CLOCK_PROF
 2

	)
105  
	#CLOCK_REALTIME
 3

	)
106  
	#CLOCK_HIGHRES
 4

	)
108 #ifde‡
_KERNEL


109  
	#CLOCK_MAX
 5

	)
112  
	#TIMER_RELTIME
 0x0

	)
113  
	#TIMER_ABSTIME
 0x1

	)
115 #ifdef 
__˝lu•lus


	@/usr/include/sys/types.h

13 #i‚de‡
_SYS_TYPES_H


14  
	#_SYS_TYPES_H


	)
16 #¥agm®
idít
 "@(#)types.h 1.75 04/01/06 SMI"

18 
	~<sys/iß_defs.h
>

19 
	~<sys/„©uª_ã°s.h
>

24 
	~<sys/machty≥s.h
>

33 #ifdef 
_KERNEL


34 
	~<sys/öây≥s.h
>

36 
	~<sys/öt_ty≥s.h
>

39 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_SYSCALL32
)

40 
	~<sys/ty≥s32.h
>

43 #ifdef 
__˝lu•lus


52 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

53 
	tl⁄gl⁄g_t
;

54 
	tu_l⁄gl⁄g_t
;

57 
	u
{

58 
	m_d
;

59 
öt32_t
 
	m_l
[2];

60 } 
	tl⁄gl⁄g_t
;

61 
	u
{

62 
	m_d
;

63 
uöt32_t
 
	m_l
[2];

64 } 
	tu_l⁄gl⁄g_t
;

72 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

73 
öt32_t
 
	tt_sˇœr_t
;

74 
uöt32_t
 
	tt_usˇœr_t
;

76 
	tt_sˇœr_t
;

77 
	tt_usˇœr_t
;

83 
	tuch¨_t
;

84 
	tush‹t_t
;

85 
	tuöt_t
;

86 
	tul⁄g_t
;

88 *
	tˇddr_t
;

89 
	tdaddr_t
;

90 
	t˙t_t
;

92 #i‡!
deföed
(
_PTRDIFF_T
Ë|| 
__˝lu•lus
 >= 199711L

93  
	#_PTRDIFF_T


	)
94 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

95 
	t±rdiff_t
;

97 
	t±rdiff_t
;

104 
ul⁄g_t
 
	tp‚_t
;

105 
ul⁄g_t
 
	tpg˙t_t
;

106 
	t•g˙t_t
;

108 
uch¨_t
 
	tu£_t
;

109 
	tsysid_t
;

110 
	tödex_t
;

111 *
	ttimeout_id_t
;

112 *
	tbufˇŒ_id_t
;

122 #i‚de‡
_OFF_T


123  
	#_OFF_T


	)
125 #i‡
deföed
(
_LP64
Ë|| 
_FILE_OFFSET_BITS
 == 32

126 
	toff_t
;

127 #ñi‡
_FILE_OFFSET_BITS
 == 64

128 
l⁄gl⁄g_t
 
	toff_t
;

131 #i‡
deföed
(
_LARGEFILE64_SOURCE
)

132 #ifde‡
_LP64


133 
off_t
 
	toff64_t
;

135 
l⁄gl⁄g_t
 
	toff64_t
;

141 #i‡
deföed
(
_LP64
Ë|| 
_FILE_OFFSET_BITS
 == 32

142 
ul⁄g_t
 
	töo_t
;

143 
	tblk˙t_t
;

144 
ul⁄g_t
 
	tfsblk˙t_t
;

145 
ul⁄g_t
 
	tfsfû˙t_t
;

146 #ñi‡
_FILE_OFFSET_BITS
 == 64

147 
u_l⁄gl⁄g_t
 
	töo_t
;

148 
l⁄gl⁄g_t
 
	tblk˙t_t
;

149 
u_l⁄gl⁄g_t
 
	tfsblk˙t_t
;

150 
u_l⁄gl⁄g_t
 
	tfsfû˙t_t
;

153 #i‡
deföed
(
_LARGEFILE64_SOURCE
)

154 #ifde‡
_LP64


155 
öo_t
 
	töo64_t
;

156 
blk˙t_t
 
	tblk˙t64_t
;

157 
fsblk˙t_t
 
	tfsblk˙t64_t
;

158 
fsfû˙t_t
 
	tfsfû˙t64_t
;

160 
u_l⁄gl⁄g_t
 
	töo64_t
;

161 
l⁄gl⁄g_t
 
	tblk˙t64_t
;

162 
u_l⁄gl⁄g_t
 
	tfsblk˙t64_t
;

163 
u_l⁄gl⁄g_t
 
	tfsfû˙t64_t
;

167 #ifde‡
_LP64


168 
	tblksize_t
;

170 
	tblksize_t
;

173 #i‡
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XOPEN_SOURCE
)

174 
	e
{ 
	g_B_FALSE
, 
	g_B_TRUE
 } 
	tboﬁón_t
;

176 
	e
{ 
	gB_FALSE
, 
	gB_TRUE
 } 
	tboﬁón_t
;

191 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

192 
öt64_t
 
	t∑d64_t
;

193 
uöt64_t
 
	tu∑d64_t
;

195 
	u
{

196 
	g_d
;

197 
öt32_t
 
	g_l
[2];

198 } 
	t∑d64_t
;

199 
	u
{

200 
	g_d
;

201 
uöt32_t
 
	g_l
[2];

202 } 
	tu∑d64_t
;

205 
	u
{

206 
	g_q
;

207 
öt32_t
 
	g_l
[4];

208 } 
	t∑d128_t
;

210 
	u
{

211 
	g_q
;

212 
uöt32_t
 
	g_l
[4];

213 } 
	tu∑d128_t
;

215 
l⁄gl⁄g_t
 
	toff£t_t
;

216 
u_l⁄gl⁄g_t
 
	tu_off£t_t
;

217 
u_l⁄gl⁄g_t
 
	tÀn_t
;

218 
u_l⁄gl⁄g_t
 
	tdiskaddr_t
;

225 #ifde‡
_LONG_LONG_LTOH


226 
	u
{

227 
off£t_t
 
	g_f
;

228 
	s
{

229 
öt32_t
 
	g_l
;

230 
öt32_t
 
	g_u
;

231 } 
	g_p
;

232 } 
	tŒoff_t
;

235 #ifde‡
_LONG_LONG_HTOL


236 
	u
{

237 
off£t_t
 
	g_f
;

238 
	s
{

239 
öt32_t
 
	g_u
;

240 
öt32_t
 
	g_l
;

241 } 
	g_p
;

242 } 
	tŒoff_t
;

245 #ifde‡
_LONG_LONG_LTOH


246 
	u
{

247 
l⁄gl⁄g_t
 
	g_f
;

248 
	s
{

249 
öt32_t
 
	g_l
;

250 
öt32_t
 
	g_u
;

251 } 
	g_p
;

252 } 
	tŒdaddr_t
;

255 #ifde‡
_LONG_LONG_HTOL


256 
	u
{

257 
l⁄gl⁄g_t
 
	g_f
;

258 
	s
{

259 
öt32_t
 
	g_u
;

260 
öt32_t
 
	g_l
;

261 } 
	g_p
;

262 } 
	tŒdaddr_t
;

265 
uöt_t
 
	tk_Êt£t_t
;

276 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

277 
	tid_t
;

279 
	tid_t
;

286 
uöt_t
 
	tu£c⁄ds_t
;

288 #i‚def 
_SUSECONDS_T


289  
	#_SUSECONDS_T


	)
290 
	tsu£c⁄ds_t
;

296 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

297 
uöt_t
 
	tmaj‹_t
;

298 
uöt_t
 
	tmö‹_t
;

300 
ul⁄g_t
 
	tmaj‹_t
;

301 
ul⁄g_t
 
	tmö‹_t
;

307 
	t¥i_t
;

320 
ush‹t_t
 
	to_mode_t
;

321 
	to_dev_t
;

322 
ush‹t_t
 
	to_uid_t
;

323 
o_uid_t
 
	to_gid_t
;

324 
	to_∆ök_t
;

325 
	to_pid_t
;

326 
ush‹t_t
 
	to_öo_t
;

332 
	tkey_t
;

333 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

334 
uöt_t
 
	tmode_t
;

336 
ul⁄g_t
 
	tmode_t
;

339 #i‚def 
_UID_T


340  
	#_UID_T


	)
341 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

342 
	tuid_t
;

344 
	tuid_t
;

348 
uid_t
 
	tgid_t
;

350 
id_t
 
	tèskid_t
;

351 
id_t
 
	t¥ojid_t
;

358 
uöt_t
 
	t±hªad_t
;

359 
uöt_t
 
	t±hªad_key_t
;

362  
	#_MUTEX_MAGIC
 0x4d58

	)
363  
	#_SEMA_MAGIC
 0x534d

	)
364  
	#_COND_MAGIC
 0x4356

	)
365  
	#_RWL_MAGIC
 0x5257

	)
367 
	s_±hªad_muãx
 {

368 
	s
{

369 
uöt16_t
 
	g__±hªad_muãx_Êag1
;

370 
uöt8_t
 
	g__±hªad_muãx_Êag2
;

371 
uöt8_t
 
	g__±hªad_muãx_˚ûög
;

372 
uöt16_t
 
	g__±hªad_muãx_ty≥
;

373 
uöt16_t
 
	g__±hªad_muãx_magic
;

374 } 
	g__±hªad_muãx_Êags
;

375 
	u
{

376 
	s
{

377 
uöt8_t
 
	g__±hªad_muãx_∑d
[8];

378 } 
	g__±hªad_muãx_lock64
;

379 
	s
{

380 
uöt32_t
 
	g__±hªad_ow√Ωid
;

381 
uöt32_t
 
	g__±hªad_lockw‹d
;

382 } 
	g__±hªad_muãx_lock32
;

383 
u∑d64_t
 
	g__±hªad_muãx_ow√r64
;

384 } 
	g__±hªad_muãx_lock
;

385 
u∑d64_t
 
	g__±hªad_muãx_d©a
;

386 } 
	t±hªad_muãx_t
;

388 
	s_±hªad_c⁄d
 {

389 
	s
{

390 
uöt8_t
 
	g__±hªad_c⁄d_Êag
[4];

391 
uöt16_t
 
	g__±hªad_c⁄d_ty≥
;

392 
uöt16_t
 
	g__±hªad_c⁄d_magic
;

393 } 
	g__±hªad_c⁄d_Êags
;

394 
u∑d64_t
 
	g__±hªad_c⁄d_d©a
;

395 } 
	t±hªad_c⁄d_t
;

400 
	s_±hªad_rwlock
 {

401 
öt32_t
 
	g__±hªad_rwlock_ªadîs
;

402 
uöt16_t
 
	g__±hªad_rwlock_ty≥
;

403 
uöt16_t
 
	g__±hªad_rwlock_magic
;

404 
±hªad_muãx_t
 
	g__±hªad_rwlock_muãx
;

405 
±hªad_c⁄d_t
 
	g__±hªad_rwlock_ªadîcv
;

406 
±hªad_c⁄d_t
 
	g__±hªad_rwlock_wrôîcv
;

407 } 
	t±hªad_rwlock_t
;

412 
	s_±hªad_©å
 {

413 *
	g__±hªad_©åp
;

414 } 
	t±hªad_©å_t
;

419 
	s_±hªad_muãx©å
 {

420 *
	g__±hªad_muãx©åp
;

421 } 
	t±hªad_muãx©å_t
;

426 
	s_±hªad_c⁄d©å
 {

427 *
	g__±hªad_c⁄d©åp
;

428 } 
	t±hªad_c⁄d©å_t
;

433 
	s_⁄˚
 {

434 
u∑d64_t
 
	g__±hªad_⁄˚_∑d
[4];

435 } 
	t±hªad_⁄˚_t
;

441 
	s_±hªad_rwlock©å
 {

442 *
	g__±hªad_rwlock©åp
;

443 } 
	t±hªad_rwlock©å_t
;

445 
ul⁄g_t
 
	tdev_t
;

447 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

448 
uöt_t
 
	t∆ök_t
;

449 
	tpid_t
;

451 
ul⁄g_t
 
	t∆ök_t
;

452 
	tpid_t
;

455 #i‚de‡
_SIZE_T


456  
	#_SIZE_T


	)
457 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

458 
ul⁄g_t
 
	tsize_t
;

460 
uöt_t
 
	tsize_t
;

464 #i‚de‡
_SSIZE_T


465  
	#_SSIZE_T


	)
466 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

467 
	tssize_t
;

469 
	tssize_t
;

473 #i‚de‡
_TIME_T


474  
	#_TIME_T


	)
475 
	ttime_t
;

478 #i‚de‡
_CLOCK_T


479  
	#_CLOCK_T


	)
480 
	t˛ock_t
;

483 #i‚de‡
_CLOCKID_T


484  
	#_CLOCKID_T


	)
485 
	t˛ockid_t
;

488 #i‚de‡
_TIMER_T


489  
	#_TIMER_T


	)
490 
	ttimî_t
;

493 #i‡
deföed
(
__EXTENSIONS__
) || \

494 (!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
))

497 
	tunch¨
;

498 
	tush‹t
;

499 
	tuöt
;

500 
	tul⁄g
;

503 #i‡
deföed
(
_KERNEL
)

505  
	#SHRT_MIN
 (-32768)

	)
506  
	#SHRT_MAX
 32767

	)
507  
	#USHRT_MAX
 65535

	)
508  
	#INT_MIN
 (-2147483647-1Ë

	)
509  
	#INT_MAX
 2147483647

	)
510  
	#UINT_MAX
 4294967295U

	)
511 #i‡
deföed
(
_LP64
)

512  
	#LONG_MIN
 (-9223372036854775807L-1L)

	)
514  
	#LONG_MAX
 9223372036854775807L

	)
516  
	#ULONG_MAX
 18446744073709551615UL

	)
519  
	#LONG_MIN
 (-2147483647L-1L)

	)
521  
	#LONG_MAX
 2147483647L

	)
522  
	#ULONG_MAX
 4294967295UL

	)
527  
	#P_MYPID
 ((
pid_t
)0)

	)
534  
	#P_MYID
 (-1)

	)
535  
	#NOPID
 (
pid_t
)(-1)

	)
537 #i‚de‡
NODEV


538  
	#NODEV
 (
dev_t
)(-1l)

	)
539 #ifde‡
_SYSCALL32


540  
	#NODEV32
 (
dev32_t
)(-1)

	)
548  
	#PFN_INVALID
 ((
p‚_t
)-1)

	)
551 
	tu_ch¨
;

552 
	tu_sh‹t
;

553 
	tu_öt
;

554 
	tu_l⁄g
;

555 
	s_quad
 { 
	gvÆ
[2]; } 
	tquad_t
;

556 
quad_t
 
	tquad
;

563 
	~<sys/£À˘.h
>

577  
	#_VOID
 

	)
579 #ifdef 
__˝lu•lus


	@/usr/include/sys/wait.h

13 #i‚de‡
_SYS_WAIT_H


14  
	#_SYS_WAIT_H


	)
16 #¥agm®
idít
 "@(#)wait.h 1.21 97/04/08 SMI"

18 
	~<sys/„©uª_ã°s.h
>

20 
	~<sys/ty≥s.h
>

22 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

23 
deföed
(
_XPG4_2
Ë|| 
	$deföed
(
__EXTENSIONS__
)

24 
	~<sys/ªsour˚.h
>

25 
	~<sys/sigöfo.h
>

26 
	~<sys/¥oc£t.h
>

29 #ifdef 
__˝lu•lus


37  
	#WUNTRACED
 0004

	)
38  
	#WNOHANG
 0100

	)
41 #i‡(!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

42 
	`deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

43  
	#WEXITED
 0001

	)
44  
	#WTRAPPED
 0002

	)
45  
	#WSTOPPED
 
WUNTRACED


	)
46  
	#WCONTINUED
 0010

	)
47  
	#WNOWAIT
 0200

	)
48  
	#_WNOCHLD
 0400

	)
49  
	#WOPTMASK
 (
WEXITED
|
WTRAPPED
|
WSTOPPED
|
WCONTINUED
|
WNOHANG
|
WNOWAIT
|
_WNOCHLD
)

	)
56 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
) || \

57 
	`deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

59  
	#WSTOPFLG
 0177

	)
60  
	#WCONTFLG
 0177777

	)
61  
	#WCOREFLG
 0200

	)
62  
	#WSIGMASK
 0177

	)
64  
	#WLOBYTE
(
°©
) (()((°©)&0377))

	)
65  
	#WHIBYTE
(
°©
) (()(((°©)>>8)&0377))

	)
66  
	#WWORD
(
°©
) (()((°©))&0177777)

	)
68  
	#WIFCONTINUED
(
°©
) (
	`WWORD
(°©Ë=
WCONTFLG
)

	)
69  
	#WCOREDUMP
(
°©
) ((°©)&
WCOREFLG
)

	)
73  
	#WIFEXITED
(
°©
) (()((°©)&0xFFË=0)

	)
74  
	#WIFSIGNALED
(
°©
) (()((stat)&0xFF) > 0 && \

75 ()((
°©
)&0xFF00Ë=0)

	)
76  
	#WIFSTOPPED
(
°©
) (()((stat)&0xFF) == 0177 && \

77 ()((
°©
)&0xFF00Ë!0)

	)
78  
	#WEXITSTATUS
(
°©
) (()(((°©)>>8)&0xFF))

	)
79  
	#WTERMSIG
(
°©
) (()((°©)&0x7F))

	)
80  
	#WSTOPSIG
(
°©
) (()(((°©)>>8)&0xFF))

	)
83 #i‡!
	`deföed
(
_KERNEL
)

84 #i‡
	`deföed
(
__STDC__
)

86 
pid_t
 
	`waô
(*);

87 
pid_t
 
	`waôpid
(pid_t, *, );

88 #i‡(!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

89 
	`deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

90 
	`waôid
(
idty≥_t
, 
id_t
, 
sigöfo_t
 *, );

91 
pid_t
 
	`waô3
(*, , 
rußge
 *);

94 #i‡(!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

95 
	`deföed
(
__EXTENSIONS__
)

96 
pid_t
 
	`waô4
’id_t, *, , 
rußge
 *);

101 
pid_t
 
	`waô
();

102 
pid_t
 
	`waôpid
();

103 #i‡(!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

104 
	`deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

105 
	`waôid
();

106 
pid_t
 
	`waô3
();

109 #i‡(!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

110 
	`deföed
(
__EXTENSIONS__
)

111 
pid_t
 
	`waô4
();

117 #ifdef 
__˝lu•lus


118 
	}
}

	@/usr/include/zconf.h

8 #i‚de‡
_ZCONF_H


9  
	#_ZCONF_H


	)
15 #ifde‡
Z_PREFIX


16  
	#deÊ©eInô_
 
z_deÊ©eInô_


	)
17  
	#deÊ©e
 
z_deÊ©e


	)
18  
	#deÊ©eEnd
 
z_deÊ©eEnd


	)
19  
	#öÊ©eInô_
 
z_öÊ©eInô_


	)
20  
	#öÊ©e
 
z_öÊ©e


	)
21  
	#öÊ©eEnd
 
z_öÊ©eEnd


	)
22  
	#deÊ©eInô2_
 
z_deÊ©eInô2_


	)
23  
	#deÊ©eSëDi˘i⁄¨y
 
z_deÊ©eSëDi˘i⁄¨y


	)
24  
	#deÊ©eC›y
 
z_deÊ©eC›y


	)
25  
	#deÊ©eRe£t
 
z_deÊ©eRe£t


	)
26  
	#deÊ©eP¨ams
 
z_deÊ©eP¨ams


	)
27  
	#öÊ©eInô2_
 
z_öÊ©eInô2_


	)
28  
	#öÊ©eSëDi˘i⁄¨y
 
z_öÊ©eSëDi˘i⁄¨y


	)
29  
	#öÊ©eSync
 
z_öÊ©eSync


	)
30  
	#öÊ©eSyncPoöt
 
z_öÊ©eSyncPoöt


	)
31  
	#öÊ©eRe£t
 
z_öÊ©eRe£t


	)
32  
	#com¥ess
 
z_com¥ess


	)
33  
	#com¥ess2
 
z_com¥ess2


	)
34  
	#uncom¥ess
 
z_uncom¥ess


	)
35  
	#adÀr32
 
z_adÀr32


	)
36  
	#¸c32
 
z_¸c32


	)
37  
	#gë_¸c_èbÀ
 
z_gë_¸c_èbÀ


	)
39  
	#Byã
 
z_Byã


	)
40  
	#uI¡
 
z_uI¡


	)
41  
	#uL⁄g
 
z_uL⁄g


	)
42  
	#Byãf
 
z_Byãf


	)
43  
	#ch¨f
 
z_ch¨f


	)
44  
	#ötf
 
z_ötf


	)
45  
	#uI¡f
 
z_uI¡f


	)
46  
	#uL⁄gf
 
z_uL⁄gf


	)
47  
	#voidpf
 
z_voidpf


	)
48  
	#voidp
 
z_voidp


	)
51 #i‡(
deföed
(
_WIN32
Ë|| deföed(
__WIN32__
)Ë&& !deföed(
WIN32
)

52  
	#WIN32


	)
54 #i‡
deföed
(
__GNUC__
Ë|| deföed(
WIN32
Ë|| deföed(
__386__
Ë|| deföed(
i386
)

55 # i‚de‡
__32BIT__


56  
	#__32BIT__


	)
59 #i‡
deföed
(
__MSDOS__
Ë&& !deföed(
MSDOS
)

60  
	#MSDOS


	)
67 #i‡
deföed
(
MSDOS
Ë&& !deföed(
__32BIT__
)

68  
	#MAXSEG_64K


	)
70 #ifde‡
MSDOS


71  
	#UNALIGNED_OK


	)
74 #i‡(
deföed
(
MSDOS
Ë|| deföed(
_WINDOWS
Ë|| deföed(
WIN32
)Ë && !deföed(
STDC
)

75  
	#STDC


	)
77 #i‡
deföed
(
__STDC__
Ë|| deföed(
__˝lu•lus
Ë|| deföed(
__OS2__
)

78 # i‚de‡
STDC


79  
	#STDC


	)
83 #i‚de‡
STDC


85  c⁄°

	)
90 #i‡
deföed
(
__MWERKS__
Ë|| deföed(
≠∂ec
Ë||deföed(
THINK_C
Ë||deföed(
__SC__
)

91  
	#NO_DUMMY_DECL


	)
95 #i‡
deföed
(
__BORLANDC__
) && (__BORLANDC__ < 0x500)

96  
	#NEED_DUMMY_RETURN


	)
101 #i‚de‡
MAX_MEM_LEVEL


102 # ifde‡
MAXSEG_64K


103  
	#MAX_MEM_LEVEL
 8

	)
105  
	#MAX_MEM_LEVEL
 9

	)
114 #i‚de‡
MAX_WBITS


115  
	#MAX_WBITS
 15

	)
133 #i‚de‡
OF


134 # ifde‡
STDC


135  
	#OF
(
¨gs
Ë 
	)
args

137  
	#OF
(
¨gs
Ë ()

	)
147 #i‡(
deföed
(
M_I86SM
Ë|| deföed(
M_I86MM
)Ë&& !deföed(
__32BIT__
)

149  
	#SMALL_MEDIUM


	)
150 # ifde‡
_MSC_VER


151  
	#FAR
 
_Ár


	)
153  
	#FAR
 
Ár


	)
156 #i‡
deföed
(
__BORLANDC__
Ë&& (deföed(
__SMALL__
Ë|| deföed(
__MEDIUM__
))

157 # i‚de‡
__32BIT__


158  
	#SMALL_MEDIUM


	)
159  
	#FAR
 
_Ár


	)
164 #i‡
deföed
(
ZLIB_DLL
)

165 # i‡
deföed
(
_WINDOWS
Ë|| deföed(
WINDOWS
)

166 # ifde‡
FAR


167 # unde‡
FAR


169 
	~<wödows.h
>

170  
	#ZEXPORT
 
WINAPI


	)
171 # ifde‡
WIN32


172  
	#ZEXPORTVA
 
WINAPIV


	)
174  
	#ZEXPORTVA
 
FAR
 
_cde˛
 
_exp‹t


	)
177 # i‡
deföed
 (
__BORLANDC__
)

178 # i‡(
__BORLANDC__
 >0x0500Ë&& 
deföed
 (
WIN32
)

179 
	~<wödows.h
>

180  
	#ZEXPORT
 
	`__de˛•ec
(
dŒexp‹t
Ë
WINAPI


	)
181  
	#ZEXPORTRVA
 
	`__de˛•ec
(
dŒexp‹t
Ë
WINAPIV


	)
183 # i‡
deföed
 (
_Wödows
Ë&& deföed (
__DLL__
)

184  
	#ZEXPORT
 
_exp‹t


	)
185  
	#ZEXPORTVA
 
_exp‹t


	)
191 #i‡
deföed
 (
__BEOS__
)

192 # i‡
deföed
 (
ZLIB_DLL
)

193  
	#ZEXTERN
 
	`__de˛•ec
(
dŒexp‹t
)

	)
195  
	#ZEXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)
199 #i‚de‡
ZEXPORT


200  
	#ZEXPORT


	)
202 #i‚de‡
ZEXPORTVA


203  
	#ZEXPORTVA


	)
205 #i‚de‡
ZEXTERN


206  
	#ZEXTERN
 

	)
209 #i‚de‡
FAR


210  
	#FAR


	)
213 #i‡!
deföed
(
MACOS
Ë&& !deföed(
TARGET_OS_MAC
)

214 
	tByã
;

216 
	tuI¡
;

217 
	tuL⁄g
;

219 #ifde‡
SMALL_MEDIUM


221  
	#Byãf
 
Byã
 
FAR


	)
223 
Byã
 
	tFAR
 
	tByãf
;

225 
	tFAR
 
	tch¨f
;

226 
	tFAR
 
	tötf
;

227 
uI¡
 
	tFAR
 
	tuI¡f
;

228 
uL⁄g
 
	tFAR
 
	tuL⁄gf
;

230 #ifde‡
STDC


231 
	tFAR
 *
	tvoidpf
;

232 *
	tvoidp
;

234 
Byã
 
	tFAR
 *
	tvoidpf
;

235 
Byã
 *
	tvoidp
;

238 #ifde‡
HAVE_UNISTD_H


239 
	~<sys/ty≥s.h
>

240 
	~<uni°d.h
>

241  
	#z_off_t
 
off_t


	)
243 #i‚de‡
SEEK_SET


244  
	#SEEK_SET
 0

	)
245  
	#SEEK_CUR
 1

	)
246  
	#SEEK_END
 2

	)
248 #i‚de‡
z_off_t


249  
	#z_off_t
 

	)
253 #i‡
deföed
(
__MVS__
)

254 #Öøgm®
m≠
(
deÊ©eInô_
,"DEIN")

255 #Öøgm®
m≠
(
deÊ©eInô2_
,"DEIN2")

256 #Öøgm®
m≠
(
deÊ©eEnd
,"DEEND")

257 #Öøgm®
m≠
(
öÊ©eInô_
,"ININ")

258 #Öøgm®
m≠
(
öÊ©eInô2_
,"ININ2")

259 #Öøgm®
m≠
(
öÊ©eEnd
,"INEND")

260 #Öøgm®
m≠
(
öÊ©eSync
,"INSY")

261 #Öøgm®
m≠
(
öÊ©eSëDi˘i⁄¨y
,"INSEDI")

262 #Öøgm®
m≠
(
öÊ©e_blocks
,"INBL")

263 #Öøgm®
m≠
(
öÊ©e_blocks_√w
,"INBLNE")

264 #Öøgm®
m≠
(
öÊ©e_blocks_‰ì
,"INBLFR")

265 #Öøgm®
m≠
(
öÊ©e_blocks_ª£t
,"INBLRE")

266 #Öøgm®
m≠
(
öÊ©e_codes_‰ì
,"INCOFR")

267 #Öøgm®
m≠
(
öÊ©e_codes
,"INCO")

268 #Öøgm®
m≠
(
öÊ©e_Á°
,"INFA")

269 #Öøgm®
m≠
(
öÊ©e_Êush
,"INFLU")

270 #Öøgm®
m≠
(
öÊ©e_mask
,"INMA")

271 #Öøgm®
m≠
(
öÊ©e_£t_di˘i⁄¨y
,"INSEDI2")

272 #Öøgm®
m≠
(
öÊ©e_c›yright
,"INCOPY")

273 #Öøgm®
m≠
(
öÊ©e_åìs_bôs
,"INTRBI")

274 #Öøgm®
m≠
(
öÊ©e_åìs_dy«mic
,"INTRDY")

275 #Öøgm®
m≠
(
öÊ©e_åìs_fixed
,"INTRFI")

276 #Öøgm®
m≠
(
öÊ©e_åìs_‰ì
,"INTRFR")

	@/usr/include/stdio_impl.h

6 #i‚de‡
_STDIO_IMPL_H


7  
	#_STDIO_IMPL_H


	)
9 #¥agm®
idít
 "@(#)stdio_impl.h 1.13 01/11/16 SMI"

11 
	~<sys/iß_defs.h
>

13 #ifdef 
__˝lu•lus


17 #i‚de‡
_SSIZE_T


18  
	#_SSIZE_T


	)
19 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

20 
	tssize_t
;

22 
	tssize_t
;

26 #ifdef 
_LP64


28 #i‚def 
_FILE64_H


30 
	s__FILE_TAG
 {

31 
	g__∑d
[16];

38 
	s__FILE_TAG


40 #ifde‡
_STDIO_REVERSE


41 *
	g_±r
;

42 
ssize_t
 
	g_˙t
;

44 
ssize_t
 
	g_˙t
;

45 *
	g_±r
;

47 *
	g_ba£
;

48 
	g_Êag
;

49 
	g_fûe
;

50 
	g__‹õ¡©i⁄
:2;

51 
	g__i⁄ﬁock
:1;

52 
	g__£ekabÀ
:1;

53 
	g__fûÀr
:4;

58 #ifdef 
__˝lu•lus


	@/usr/include/stdio_tag.h

6 #i‚de‡
_STDIO_TAG_H


7  
	#_STDIO_TAG_H


	)
9 #¥agm®
idít
 "@(#)stdio_tag.h 1.3 98/04/20 SMI"

11 #ifdef 
__˝lu•lus


15 #i‚def 
__FILE_TAG


16 #if 
deföed
(
__˝lu•lus
) && (__cplusplus < 54321L)

17  
	#__FILE_TAG
 
FILE


	)
19  
	#__FILE_TAG
 
__FILE


	)
21 
__FILE_TAG
 
	t__FILE
;

24 #ifdef 
__˝lu•lus


	@/usr/include/sys/ieeefp.h

5 #i‚de‡
_SYS_IEEEFP_H


6  
	#_SYS_IEEEFP_H


	)
8 #¥agm®
idít
 "@(#)ieeefp.h 2.8 99/10/29"

10 #ifde‡ 
__˝lu•lus


17 #i‡
deföed
(
•¨c
Ë|| deföed(
__•¨c
)

18 
	eÂ_dúe˘i⁄_ty≥
 {

19 
Â_√¨e°
 = 0,

20 
Â_tozîo
 = 1,

21 
Â_posôive
 = 2,

22 
Â_√g©ive
 = 3

25 
	eÂ_¥ecisi⁄_ty≥
 {

26 
	mÂ_exãnded
 = 0,

27 
	mÂ_sögÀ
 = 1,

28 
	mÂ_doubÀ
 = 2,

29 
	mÂ_¥ecisi⁄_3
 = 3

32 
	eÂ_ex˚±i⁄_ty≥
 {

33 
	mÂ_öexa˘
 = 0,

34 
	mÂ_divisi⁄
 = 1,

35 
	mÂ_undîÊow
 = 2,

36 
	mÂ_ovîÊow
 = 3,

37 
	mÂ_övÆid
 = 4

40 
	eÂ_å≠_íabÀ_ty≥
 {

41 
	mÂ_å≠_öexa˘
 = 0,

42 
	mÂ_å≠_divisi⁄
 = 1,

43 
	mÂ_å≠_undîÊow
 = 2,

44 
	mÂ_å≠_ovîÊow
 = 3,

45 
	mÂ_å≠_övÆid
 = 4

49 #i‡
deföed
(
i386
Ë|| deföed(
__i386
Ë|| deföed(
__ü64
)

50 
	eÂ_dúe˘i⁄_ty≥
 {

51 
	mÂ_√¨e°
 = 0,

52 
	mÂ_√g©ive
 = 1,

53 
	mÂ_posôive
 = 2,

54 
	mÂ_tozîo
 = 3

57 
	eÂ_¥ecisi⁄_ty≥
 {

58 
	mÂ_sögÀ
 = 0,

59 
	mÂ_¥ecisi⁄_3
 = 1,

60 
	mÂ_doubÀ
 = 2,

61 
	mÂ_exãnded
 = 3

64 
	eÂ_ex˚±i⁄_ty≥
 {

65 
	mÂ_övÆid
 = 0,

66 
	mÂ_dí‹mÆized
 = 1,

67 
	mÂ_divisi⁄
 = 2,

68 
	mÂ_ovîÊow
 = 3,

69 
	mÂ_undîÊow
 = 4,

70 
	mÂ_öexa˘
 = 5

73 
	eÂ_å≠_íabÀ_ty≥
 {

74 
	mÂ_å≠_övÆid
 = 0,

75 
	mÂ_å≠_dí‹mÆized
 = 1,

76 
	mÂ_å≠_divisi⁄
 = 2,

77 
	mÂ_å≠_ovîÊow
 = 3,

78 
	mÂ_å≠_undîÊow
 = 4,

79 
	mÂ_å≠_öexa˘
 = 5

83 #i‡
deföed
(
__µc
)

84 
	eÂ_dúe˘i⁄_ty≥
 {

85 
	mÂ_√¨e°
 = 0,

86 
	mÂ_tozîo
 = 1,

87 
	mÂ_posôive
 = 2,

88 
	mÂ_√g©ive
 = 3

91 
	eÂ_¥ecisi⁄_ty≥
 {

92 
	mÂ_exãnded
 = 0,

93 
	mÂ_sögÀ
 = 1,

94 
	mÂ_doubÀ
 = 2,

95 
	mÂ_¥ecisi⁄_3
 = 3

98 
	eÂ_ex˚±i⁄_ty≥
 {

99 
	mÂ_övÆid_cvi
 = 8,

100 
	mÂ_övÆid_sqπ
 = 9,

101 
	mÂ_övÆid_so·
 = 10,

102 
	mÂ_övÆid_vc
 = 19,

103 
	mÂ_övÆid_imz
 = 20,

104 
	mÂ_övÆid_zdz
 = 21,

105 
	mÂ_övÆid_idi
 = 22,

106 
	mÂ_övÆid_isi
 = 23,

107 
	mÂ_övÆid_¢™
 = 24,

108 
	mÂ_öexa˘
 = 25,

109 
	mÂ_divisi⁄
 = 26,

110 
	mÂ_undîÊow
 = 27,

111 
	mÂ_ovîÊow
 = 28,

112 
	mÂ_övÆid
 = 29

115 
	eÂ_å≠_íabÀ_ty≥
 {

116 
	mÂ_å≠_öexa˘
 = 3,

117 
	mÂ_å≠_divisi⁄
 = 4,

118 
	mÂ_å≠_undîÊow
 = 5,

119 
	mÂ_å≠_ovîÊow
 = 6,

120 
	mÂ_å≠_övÆid
 = 7

124 
	eÂ_˛ass_ty≥
 {

125 
	gÂ_zîo
 = 0,

126 
	gÂ_subn‹mÆ
 = 1,

127 
	gÂ_n‹mÆ
 = 2,

128 
	gÂ_öföôy
 = 3,

129 
	gÂ_quõt
 = 4,

130 
	gÂ_sig«lög
 = 5

133 #ifde‡ 
__˝lu•lus


	@/usr/include/sys/int_types.h

6 #i‚de‡
_SYS_INT_TYPES_H


7  
	#_SYS_INT_TYPES_H


	)
9 #¥agm®
idít
 "@(#)int_types.h 1.6 97/08/20 SMI"

42 
	~<sys/iß_defs.h
>

44 #ifde‡
__˝lu•lus


61 #i‡
deföed
(
_CHAR_IS_SIGNED
)

62 
	töt8_t
;

64 #i‡
deföed
(
__STDC__
)

65 sig√d 
	töt8_t
;

68 
	töt16_t
;

69 
	töt32_t
;

70 #ifdef 
_LP64


71 
	töt64_t
;

73 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

74 
	töt64_t
;

78 
	tuöt8_t
;

79 
	tuöt16_t
;

80 
	tuöt32_t
;

81 #ifdef 
_LP64


82 
	tuöt64_t
;

84 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

85 
	tuöt64_t
;

93 #i‡
deföed
(
_LP64
Ë|| (
__STDC__
 - 0 =0 && !deföed(
_NO_LONGLONG
))

94 
öt64_t
 
	tötmax_t
;

95 
uöt64_t
 
	tuötmax_t
;

97 
öt32_t
 
	tötmax_t
;

98 
uöt32_t
 
	tuötmax_t
;

106 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

107 
	töçå_t
;

108 
	tuöçå_t
;

110 
	töçå_t
;

111 
	tuöçå_t
;

118 #i‡
deföed
(
_CHAR_IS_SIGNED
)

119 
	töt_Àa°8_t
;

121 #i‡
deföed
(
__STDC__
)

122 sig√d 
	töt_Àa°8_t
;

125 
	töt_Àa°16_t
;

126 
	töt_Àa°32_t
;

127 #ifdef 
_LP64


128 
	töt_Àa°64_t
;

130 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

131 
	töt_Àa°64_t
;

135 
	tuöt_Àa°8_t
;

136 
	tuöt_Àa°16_t
;

137 
	tuöt_Àa°32_t
;

138 #ifdef 
_LP64


139 
	tuöt_Àa°64_t
;

141 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

142 
	tuöt_Àa°64_t
;

146 #ifde‡
__˝lu•lus


	@/usr/include/sys/inttypes.h

6 #i‚de‡
_SYS_INTTYPES_H


7  
	#_SYS_INTTYPES_H


	)
9 #¥agm®
idít
 "@(#)inttypes.h 1.2 98/01/16 SMI"

38 
	~<sys/öt_ty≥s.h
>

39 #i‡!
deföed
(
_XOPEN_SOURCE
Ë|| deföed(
__EXTENSIONS__
)

40 
	~<sys/öt_limôs.h
>

41 
	~<sys/öt_c⁄°.h
>

42 
	~<sys/öt_fmtio.h
>

	@/usr/include/sys/isa_defs.h

6 #i‚def 
_SYS_ISA_DEFS_H


7  
	#_SYS_ISA_DEFS_H


	)
9 #¥agm®
idít
 "@(#)isa_defs.h 1.20 99/05/04 SMI"

157 #ifdef 
__˝lu•lus


168 #i‡
deföed
(
__ü64
)

173  
	#_LITTLE_ENDIAN


	)
174  
	#_STACK_GROWS_DOWNWARD


	)
175  
	#_LONG_LONG_LTOH


	)
176  
	#_BIT_FIELDS_LTOH


	)
177  
	#_IEEE_754


	)
178  
	#_CHAR_IS_SIGNED


	)
179  
	#_CHAR_ALIGNMENT
 1

	)
180  
	#_SHORT_ALIGNMENT
 2

	)
181  
	#_INT_ALIGNMENT
 4

	)
182  
	#_LONG_ALIGNMENT
 8

	)
183  
	#_LONG_LONG_ALIGNMENT
 8

	)
184  
	#_DOUBLE_ALIGNMENT
 8

	)
185  
	#_LONG_DOUBLE_ALIGNMENT
 16

	)
186  
	#_POINTER_ALIGNMENT
 8

	)
187  
	#_MAX_ALIGNMENT
 16

	)
188  
	#_ALIGNMENT_REQUIRED
 1

	)
193  
	#_LP64


	)
194 #i‡!
deföed
(
_I32LPx
Ë&& deföed(
_KERNEL
)

195  
	#_I32LPx


	)
197  
	#_MULTI_DATAMODEL


	)
198  
	#_SUNOS_VTOC_16


	)
199  
	#_DMA_USES_PHYSADDR


	)
200  
	#_FIRMWARE_NEEDS_FDISK


	)
201  
	#_CONSOLE_OUTPUT_VIA_SOFTWARE


	)
208 #ñi‡
deföed
(
__i386
Ë|| deföed(
i386
)

213 #i‡!
deföed
(
__i386
)

214  
	#__i386


	)
220  
	#_LITTLE_ENDIAN


	)
221  
	#_STACK_GROWS_DOWNWARD


	)
222  
	#_LONG_LONG_LTOH


	)
223  
	#_BIT_FIELDS_LTOH


	)
224  
	#_IEEE_754


	)
225  
	#_CHAR_IS_SIGNED


	)
226  
	#_CHAR_ALIGNMENT
 1

	)
227  
	#_SHORT_ALIGNMENT
 2

	)
228  
	#_INT_ALIGNMENT
 4

	)
229  
	#_LONG_ALIGNMENT
 4

	)
230  
	#_LONG_LONG_ALIGNMENT
 4

	)
231  
	#_DOUBLE_ALIGNMENT
 4

	)
232  
	#_LONG_DOUBLE_ALIGNMENT
 4

	)
233  
	#_POINTER_ALIGNMENT
 4

	)
234  
	#_MAX_ALIGNMENT
 4

	)
235  
	#_ALIGNMENT_REQUIRED
 0

	)
236  
	#_DONT_USE_1275_GENERIC_NAMES


	)
240  
	#_ILP32


	)
241 #i‡!
deföed
(
_I32LPx
Ë&& deföed(
_KERNEL
)

242  
	#_I32LPx


	)
244  
	#_SUNOS_VTOC_16


	)
245  
	#_DMA_USES_PHYSADDR


	)
246  
	#_FIRMWARE_NEEDS_FDISK


	)
247  
	#_CONSOLE_OUTPUT_VIA_SOFTWARE


	)
267 #ñi‡
deföed
(
__•¨c
Ë|| deföed(
•¨c
)

272 #i‡!
deföed
(
__•¨c
)

273  
	#__•¨c


	)
279 #i‡
deföed
(
__•¨cv8
Ë&& deföed(
__•¨cv9
)

289 #i‡!
deföed
(
__•¨cv9
Ë&& !deföed(
__•¨cv8
)

290  
	#__•¨cv8


	)
297  
	#_BIG_ENDIAN


	)
298  
	#_STACK_GROWS_DOWNWARD


	)
299  
	#_LONG_LONG_HTOL


	)
300  
	#_BIT_FIELDS_HTOL


	)
301  
	#_IEEE_754


	)
302  
	#_CHAR_IS_SIGNED


	)
303  
	#_CHAR_ALIGNMENT
 1

	)
304  
	#_SHORT_ALIGNMENT
 2

	)
305  
	#_INT_ALIGNMENT
 4

	)
306  
	#_LONG_LONG_ALIGNMENT
 8

	)
307  
	#_DOUBLE_ALIGNMENT
 8

	)
308  
	#_ALIGNMENT_REQUIRED
 1

	)
313  
	#_SUNOS_VTOC_8


	)
314  
	#_DMA_USES_VIRTADDR


	)
315  
	#_NO_FDISK_PRESENT


	)
316  
	#_CONSOLE_OUTPUT_VIA_FIRMWARE


	)
322 #i‡
deföed
(
__•¨cv8
)

327  
	#_LONG_ALIGNMENT
 4

	)
328  
	#_LONG_DOUBLE_ALIGNMENT
 8

	)
329  
	#_POINTER_ALIGNMENT
 4

	)
330  
	#_MAX_ALIGNMENT
 8

	)
335  
	#_ILP32


	)
337 #i‡!
deföed
(
_I32LPx
Ë&& deföed(
_KERNEL
)

338  
	#_I32LPx


	)
345 #ñi‡
deföed
(
__•¨cv9
)

350  
	#_LONG_ALIGNMENT
 8

	)
351  
	#_LONG_DOUBLE_ALIGNMENT
 16

	)
352  
	#_POINTER_ALIGNMENT
 8

	)
353  
	#_MAX_ALIGNMENT
 16

	)
358  
	#_LP64


	)
359 #i‡!
deföed
(
_I32LPx
)

360  
	#_I32LPx


	)
362  
	#_MULTI_DATAMODEL


	)
375 #i‡
deföed
(
_ILP32
Ë&& deföed(
_LP64
)

379 #ifdef 
__˝lu•lus


	@/usr/include/sys/machtypes.h

13 #i‚de‡
_SYS_MACHTYPES_H


14  
	#_SYS_MACHTYPES_H


	)
16 #¥agm®
idít
 "@(#)machtypes.h 1.13 99/05/04 SMI"

18 
	~<sys/„©uª_ã°s.h
>

20 #ifdef 
__˝lu•lus


30 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

31 
	$deföed
(
__EXTENSIONS__
)

33 
	s_œbñ_t
 { 
vÆ
[2]; } 
	tœbñ_t
;

37 
	tlock_t
;

39 #ifdef 
__˝lu•lus


40 
	}
}

	@/usr/include/sys/procset.h

13 #i‚de‡
_SYS_PROCSET_H


14  
	#_SYS_PROCSET_H


	)
16 #¥agm®
idít
 "@(#)procset.h 1.20 00/01/11 SMI"

18 #ifdef 
__˝lu•lus


22 
	~<sys/„©uª_ã°s.h
>

23 
	~<sys/ty≥s.h
>

31  
	#P_INITPID
 1

	)
32  
	#P_INITUID
 0

	)
33  
	#P_INITPGID
 0

	)
42 #i‡!
deföed
(
	t_XPG4_2
Ë|| 
	tdeföed
(
	t__EXTENSIONS__
)

43 
	tidty≥


46 
P_PID
,

47 
P_PPID
,

48 
P_PGID
,

50 
P_SID
,

51 
P_CID
,

52 
P_UID
,

53 
P_GID
,

54 
P_ALL
,

55 
P_LWPID
,

56 
P_TASKID
,

57 
P_PROJID


58 } 
	tidty≥_t
;

66 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

67 
	eid›
 {

68 
POP_DIFF
,

71 
POP_AND
,

74 
POP_OR
,

77 
POP_XOR


80 } 
	tid›_t
;

88 
	s¥oc£t
 {

89 
id›_t
 
p_›
;

94 
idty≥_t
 
p_lidty≥
;

97 
id_t
 
p_lid
;

99 
idty≥_t
 
p_ridty≥
;

102 
id_t
 
p_rid
;

103 } 
	t¥oc£t_t
;

109  
	#£çroc£t
(
p•
, 
›
, 
…y≥
, 
lid
, 
πy≥
, 
rid
) \

110 (
p•
)->
p_›
 = (
›
); \

111 (
p•
)->
p_lidty≥
 = (
…y≥
); \

112 (
p•
)->
p_lid
 = (
lid
); \

113 (
p•
)->
p_ridty≥
 = (
πy≥
); \

114 (
p•
)->
p_rid
 = (
rid
);

	)
118 #ifde‡
_KERNEL


120 
	~<sys/¥oc.h
>

122 
dŸ›rocs
(
¥oc£t_t
 *
p•
, (*
fun˝
)(), *
¨g
);

123 
dŸﬁwp
(
¥oc£t_t
 *
p•
, (*
fun˝
)(), *
¨g
);

124 
¥ocö£t
(
¥oc_t
 *
µ
, 
¥oc£t_t
 *
p•
);

125 
sig£nd¥oc
(
¥oc_t
 *, 
sig£nd_t
 *);

126 
sig£nd£t
(
¥oc£t_t
 *, 
sig£nd_t
 *);

127 
boﬁón_t
 
cur_ö£t_⁄ly
(
¥oc£t_t
 *
p•
);

131 #ifdef 
__˝lu•lus


	@/usr/include/sys/resource.h

13 #i‚de‡
_SYS_RESOURCE_H


14  
	#_SYS_RESOURCE_H


	)
16 #¥agm®
idít
 "@(#)resource.h 1.29 03/10/14 SMI"

18 
	~<sys/„©uª_ã°s.h
>

20 
	~<sys/ty≥s.h
>

21 
	~<sys/time.h
>

23 #ifdef 
__˝lu•lus


30  
	#PRIO_PROCESS
 0

	)
31  
	#PRIO_PGRP
 1

	)
32  
	#PRIO_USER
 2

	)
33  
	#PRIO_GROUP
 3

	)
34  
	#PRIO_SESSION
 4

	)
35  
	#PRIO_LWP
 5

	)
36  
	#PRIO_TASK
 6

	)
37  
	#PRIO_PROJECT
 7

	)
42  
	#RLIMIT_CPU
 0

	)
43  
	#RLIMIT_FSIZE
 1

	)
44  
	#RLIMIT_DATA
 2

	)
45  
	#RLIMIT_STACK
 3

	)
46  
	#RLIMIT_CORE
 4

	)
47  
	#RLIMIT_NOFILE
 5

	)
48  
	#RLIMIT_VMEM
 6

	)
49  
	#RLIMIT_AS
 
RLIMIT_VMEM


	)
51  
	#RLIM_NLIMITS
 7

	)
53 #i‡
deföed
(
_LP64
)

55 
	tæim_t
;

57  
	#RLIM_INFINITY
 (-3l)

	)
58  
	#RLIM_SAVED_MAX
 (-2l)

	)
59  
	#RLIM_SAVED_CUR
 (-1l)

	)
67 #i‡
_FILE_OFFSET_BITS
 == 32

69 
	tæim_t
;

71  
	#RLIM_INFINITY
 0x7fffffff

	)
72  
	#RLIM_SAVED_MAX
 0x7fffff„

	)
73  
	#RLIM_SAVED_CUR
 0x7ffffffd

	)
77 
u_l⁄gl⁄g_t
 
	tæim_t
;

79  
	#RLIM_INFINITY
 ((
æim_t
)-3)

	)
80  
	#RLIM_SAVED_MAX
 ((
æim_t
)-2)

	)
81  
	#RLIM_SAVED_CUR
 ((
æim_t
)-1)

	)
87 #i‡
deföed
(
_SYSCALL32
)

91 
uöt32_t
 
	tæim32_t
;

93  
	#RLIM32_INFINITY
 0x7fffffff

	)
94  
	#RLIM32_SAVED_MAX
 0x7fffff„

	)
95  
	#RLIM32_SAVED_CUR
 0x7ffffffd

	)
97 
	sæimô32
 {

98 
æim32_t
 
æim_cur
;

99 
æim32_t
 
æim_max
;

104 
	sæimô
 {

105 
æim_t
 
æim_cur
;

106 
æim_t
 
æim_max
;

110 #ifdef 
_LARGEFILE64_SOURCE


112 
u_l⁄gl⁄g_t
 
	tæim64_t
;

114  
	#RLIM64_INFINITY
 ((
æim64_t
)-3)

	)
115  
	#RLIM64_SAVED_MAX
 ((
æim64_t
)-2)

	)
116  
	#RLIM64_SAVED_CUR
 ((
æim64_t
)-1)

	)
118 
	sæimô64
 {

119 
æim64_t
 
æim_cur
;

120 
æim64_t
 
æim_max
;

125 
	srußge
 {

126 
timevÆ
 
ru_utime
;

127 
timevÆ
 
ru_°ime
;

128 
ru_maxrss
;

129 
ru_ixrss
;

130 
ru_idrss
;

131 
ru_i§ss
;

132 
ru_möÊt
;

133 
ru_majÊt
;

134 
ru_nsw≠
;

135 
ru_öblock
;

136 
ru_oublock
;

137 
ru_msg¢d
;

138 
ru_msgrcv
;

139 
ru_nsig«ls
;

140 
ru_nvcsw
;

141 
ru_nivcsw
;

144  
	#_RUSAGESYS_GETRUSAGE
 0

	)
146 #i‡
deföed
(
_SYSCALL32
)

148 
	srußge32
 {

149 
timevÆ32
 
ru_utime
;

150 
timevÆ32
 
ru_°ime
;

151 
ru_maxrss
;

152 
ru_ixrss
;

153 
ru_idrss
;

154 
ru_i§ss
;

155 
ru_möÊt
;

156 
ru_majÊt
;

157 
ru_nsw≠
;

158 
ru_öblock
;

159 
ru_oublock
;

160 
ru_msg¢d
;

161 
ru_msgrcv
;

162 
ru_nsig«ls
;

163 
ru_nvcsw
;

164 
ru_nivcsw
;

169 #ifde‡
_KERNEL


171 
	~<sys/modñ.h
>

173 
æim64_t
 
æim_öföôy_m≠
[];

175 #i‡
deföed
(
_SYSCALL32_IMPL
Ë|| deföed(
__löt
)

176 
	g¥oc
;

177 
æim64_t
 
æim_öföôy_m≠_32
[];

182  
	#RUSAGE_SELF
 0

	)
183  
	#RUSAGE_CHILDREN
 -1

	)
186 #i‡!
deföed
(
_LP64
Ë&& 
_FILE_OFFSET_BITS
 == 64

190 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


191 #¥agm®
ªdeföe_exäame
 
£ålimô
 
£ålimô64


192 #¥agm®
ªdeföe_exäame
 
gëæimô
 
gëæimô64


194  
	#£ålimô
 
£ålimô64


	)
195  
	#gëæimô
 
gëæimô64


	)
196  
	#æimô
 
æimô64


	)
200 #i‡
deföed
(
_LP64
Ë&& deföed(
_LARGEFILE64_SOURCE
)

205 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


206 #¥agma 
ªdeföe_exäame
 
£ålimô64
 
£ålimô


207 #¥agma 
ªdeföe_exäame
 
gëæimô64
 
gëæimô


209  
	#£ålimô64
 
£ålimô


	)
210  
	#gëæimô64
 
gëæimô


	)
211  
	#æimô64
 
æimô


	)
215 #i‡
deföed
(
__STDC__
)

217 
£ålimô
(, c⁄° 
æimô
 *);

218 
gëæimô
(, 
æimô
 *);

221 #if 
deföed
(
_LARGEFILE64_SOURCE
Ë&& !((
_FILE_OFFSET_BITS
 == 64) && \

222 !
deföed
(
__PRAGMA_REDEFINE_EXTNAME
))

223 
£ålimô64
(, c⁄° 
æimô64
 *);

224 
gëæimô64
(, 
æimô64
 *);

227 
gë¥i‹ôy
(, 
id_t
);

228 
£çri‹ôy
(, 
id_t
, );

229 
gërußge
(, 
rußge
 *);

233 
gëæimô
();

234 
£ålimô
();

237 #if 
deföed
(
_LARGEFILE64_SOURCE
Ë&& !((
_FILE_OFFSET_BITS
 == 64) && \

238 !
deföed
(
__PRAGMA_REDEFINE_EXTNAME
))

239 
£ålimô64
();

240 
gëæimô64
();

243 
gë¥i‹ôy
();

244 
£çri‹ôy
();

245 
gërußge
();

251 #ifdef 
__˝lu•lus


	@/usr/include/sys/select.h

12 #i‚de‡
_SYS_SELECT_H


13  
	#_SYS_SELECT_H


	)
15 #¥agm®
idít
 "@(#)select.h 1.17 01/08/15 SMI"

17 
	~<sys/„©uª_ã°s.h
>

19 #i‚de‡
_KERNEL


20 
	~<sys/time.h
>

23 #ifdef 
__˝lu•lus


33 #i‚def 
FD_SETSIZE


34 #ifde‡
_LP64


35  
	#FD_SETSIZE
 65536

	)
37  
	#FD_SETSIZE
 1024

	)
39 #ñi‡
FD_SETSIZE
 > 1024 && !
deföed
(
_LP64
)

40 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


41 #¥agma 
ªdeföe_exäame
 
£À˘
 
£À˘_œrge_fd£t


43  
	#£À˘
 
£À˘_œrge_fd£t


	)
47 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

48 
	tfd_mask
;

50 
	tfds_mask
;

56  
	#_NBBY
 8

	)
57 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

58 #i‚de‡
NBBY


59  
	#NBBY
 
_NBBY


	)
63 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

64  
	#NFDBITS
 ( (
fd_mask
Ë* 
NBBY
)

	)
66  
	#FD_NFDBITS
 ( (
fds_mask
Ë* 
_NBBY
)

	)
68  
	#__howm™y
(
__x
, 
__y
) (((__x)+((__y)-1))/(__y))

	)
69 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

70 #i‚def 
howm™y


71  
	#howm™y
(
x
, 
y
) (((x)+((y)-1))/(y))

	)
75 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

76 
	sfd_£t
 {

78 
	s__fd_£t
 {

80 
	mfds_bôs
[
__howm™y
(
FD_SETSIZE
, 
FD_NFDBITS
)];

81 } 
	tfd_£t
;

83  
	#FD_SET
(
__n
, 
__p
) ((__p)->
fds_bôs
[(__n)/
FD_NFDBITS
] |= \

84 (1u»<< ((
__n
Ë% 
FD_NFDBITS
)))

	)
86  
	#FD_CLR
(
__n
, 
__p
) ((__p)->
fds_bôs
[(__n)/
FD_NFDBITS
] &= \

87 ~(1u»<< ((
__n
Ë% 
FD_NFDBITS
)))

	)
89  
	#FD_ISSET
(
__n
, 
__p
) (((__p)->
fds_bôs
[(__n)/
FD_NFDBITS
] & \

90 (1u»<< ((
__n
Ë% 
FD_NFDBITS
))Ë!0l)

	)
92 #ifde‡
_KERNEL


93  
	#FD_ZERO
(
p
) 
	`bzîo
(’),  (*’)))

	)
95  
	#FD_ZERO
(
__p
Ë (Ë
	`mem£t
((__p), 0,  (*(__p)))

	)
98 #i‚def 
_KERNEL


99 #ifdef 
__STDC__


100 
£À˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

102 
£À˘
();

106 #ifdef 
__˝lu•lus


	@/usr/include/sys/siginfo.h

13 #i‚de‡
_SYS_SIGINFO_H


14  
	#_SYS_SIGINFO_H


	)
16 #¥agm®
idít
 "@(#)siginfo.h 1.55 01/04/05 SMI"

18 
	~<sys/„©uª_ã°s.h
>

19 
	~<sys/ty≥s.h
>

21 #ifdef 
__˝lu•lus


25 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

26 (
_POSIX_C_SOURCE
 > 2Ë|| 
	$deföed
(
__EXTENSIONS__
)

32 #i‚def 
_SIGVAL


33  
	#_SIGVAL


	)
34 
	usigvÆ
 {

35 
sivÆ_öt
;

36 *
sivÆ_±r
;

40 #i‡
	`deföed
(
_SYSCALL32
)

44 
	usigvÆ32
 {

45 
öt32_t
 
sivÆ_öt
;

46 
ˇddr32_t
 
sivÆ_±r
;

53 
	u__sigvÆ
 {

54 
__sivÆ_öt
;

55 *
__sivÆ_±r
;

60 #i‡(!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

61 (
_POSIX_C_SOURCE
 > 2Ë|| 
	`deföed
(
__EXTENSIONS__
)

67 #i‚def 
_SIGEVENT


68  
	#_SIGEVENT


	)
69 
	ssigevít
 {

70 
sigev_nŸify
;

71 
sigev_signo
;

72 
sigvÆ
 
sigev_vÆue
;

73 (*
sigev_nŸify_fun˘i⁄
)(
sigvÆ
);

74 
±hªad_©å_t
 *
sigev_nŸify_©åibuãs
;

75 
__sigev_∑d2
;

80  
	#SIGEV_NONE
 1

	)
81  
	#SIGEV_SIGNAL
 2

	)
82  
	#SIGEV_THREAD
 3

	)
84 #i‡
	`deföed
(
_SYSCALL32
)

88 
	ssigevít32
 {

89 
öt32_t
 
sigev_nŸify
;

90 
öt32_t
 
sigev_signo
;

91 
sigvÆ32
 
sigev_vÆue
;

92 
ˇddr32_t
 
sigev_nŸify_fun˘i⁄
;

93 
ˇddr32_t
 
sigev_nŸify_©åibuãs
;

94 
öt32_t
 
__sigev_∑d2
;

101 #i‡!
	`deföed
(
_POSIX_C_SOURCE
) || (_POSIX_C_SOURCE > 2) || \

102 
	`deföed
(
__EXTENSIONS__
)

108  
	#SI_FROMUSER
(
sù
) ((sù)->
si_code
 <0)

	)
109  
	#SI_FROMKERNEL
(
sù
) ((sù)->
si_code
 > 0)

	)
111  
	#SI_NOINFO
 32767

	)
112  
	#SI_RCTL
 2049

	)
113  
	#SI_USER
 0

	)
114  
	#SI_LWP
 (-1)

	)
115  
	#SI_QUEUE
 (-2)

	)
116  
	#SI_TIMER
 (-3)

	)
117  
	#SI_ASYNCIO
 (-4)

	)
118  
	#SI_MESGQ
 (-5)

	)
121 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

127 
	~<sys/machsig.h
>

133  
	#TRAP_BRKPT
 1

	)
134  
	#TRAP_TRACE
 2

	)
135  
	#TRAP_RWATCH
 3

	)
136  
	#TRAP_WWATCH
 4

	)
137  
	#TRAP_XWATCH
 5

	)
138 #i‡!
	`deföed
(
_XOPEN_SOURCE
Ë|| deföed(
__EXTENSIONS__
)

139  
	#NSIGTRAP
 5

	)
146  
	#CLD_EXITED
 1

	)
147  
	#CLD_KILLED
 2

	)
148  
	#CLD_DUMPED
 3

	)
149  
	#CLD_TRAPPED
 4

	)
150  
	#CLD_STOPPED
 5

	)
151  
	#CLD_CONTINUED
 6

	)
153 #i‡!
	`deföed
(
_XOPEN_SOURCE
Ë|| deföed(
__EXTENSIONS__
)

154  
	#NSIGCLD
 6

	)
161  
	#POLL_IN
 1

	)
162  
	#POLL_OUT
 2

	)
163  
	#POLL_MSG
 3

	)
164  
	#POLL_ERR
 4

	)
165  
	#POLL_PRI
 5

	)
166  
	#POLL_HUP
 6

	)
168 #i‡!
	`deföed
(
_XOPEN_SOURCE
Ë|| deföed(
__EXTENSIONS__
)

169  
	#NSIGPOLL
 6

	)
174 #i‡(!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

175 
	`deföed
(
__EXTENSIONS__
)

180  
	#PROF_SIG
 1

	)
181  
	#NSIGPROF
 1

	)
185 #i‡!
	`deföed
(
_POSIX_C_SOURCE
) || (_POSIX_C_SOURCE > 2) || \

186 
	`deföed
(
__EXTENSIONS__
)

188 #ifde‡
_LP64


189  
	#SI_MAXSZ
 256

	)
190  
	#SI_PAD
 ((
SI_MAXSZ
 /  ()Ë- 4)

	)
192  
	#SI_MAXSZ
 128

	)
193  
	#SI_PAD
 ((
SI_MAXSZ
 /  ()Ë- 3)

	)
205 #i‡!
	`deföed
(
_XOPEN_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
) || \

206 
	`deföed
(
__EXTENSIONS__
)

207 
	~<sys/time_im∂.h
>

209 
	~<sys/time_°d_im∂.h
>

218 
	~<sys/ty≥s.h
>

220 #i‡!
	`deföed
(
_XOPEN_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
) || \

221 
	`deföed
(
__EXTENSIONS__
)

222 
	ssigöfo
 {

224 
	s
{

226 
si_signo
;

227 
si_code
;

228 
si_î∫o
;

229 #ifde‡
_LP64


230 
si_∑d
;

232 
	u
{

234 
__∑d
[
SI_PAD
];

236 
	s
{

237 
pid_t
 
__pid
;

238 
	u
{

239 
	s
{

240 
uid_t
 
__uid
;

241 #i‡(!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

242 (
_POSIX_C_SOURCE
 > 2Ë|| 
	`deföed
(
__EXTENSIONS__
)

243 
sigvÆ
 
__vÆue
;

245 
__sigvÆ
 
__vÆue
;

247 } 
__kûl
;

248 
	s
{

249 
˛ock_t
 
__utime
;

250 
__°©us
;

251 
˛ock_t
 
__°ime
;

252 } 
__˛d
;

253 } 
__pd©a
;

254 } 
__¥oc
;

256 
	s
{

257 *
__addr
;

258 
__å≠no
;

259 
ˇddr_t
 
__pc
;

260 } 
__Áu…
;

262 
	s
{

264 
__fd
;

265 
__b™d
;

266 } 
__fûe
;

268 
	s
{

269 
ˇddr_t
 
__Áddr
;

270 #i‡!
	`deföed
(
_XOPEN_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
) || \

271 
	`deföed
(
__EXTENSIONS__
)

272 
time°ruc_t
 
__t°amp
;

274 
_time°ruc_t
 
__t°amp
;

276 
__sysˇŒ
;

277 
__nsyßrg
;

278 
__Áu…
;

279 
__syßrg
[8];

280 
__m°©e
[10];

281 } 
__¥of
;

283 
	s
{

284 
öt32_t
 
__ítôy
;

285 } 
__r˘l
;

286 } 
__d©a
;

288 } 
	tsigöfo_t
;

290 #i‡
	`deföed
(
_SYSCALL32
)

294  
	#SI32_MAXSZ
 128

	)
295  
	#SI32_PAD
 ((
SI32_MAXSZ
 /  (
öt32_t
)Ë- 3)

	)
297 
	ssigöfo32
 {

299 
öt32_t
 
si_signo
;

300 
öt32_t
 
si_code
;

301 
öt32_t
 
si_î∫o
;

303 
	u
{

305 
öt32_t
 
__∑d
[
SI32_PAD
];

307 
	s
{

308 
pid32_t
 
__pid
;

309 
	u
{

310 
	s
{

311 
uid32_t
 
__uid
;

312 
sigvÆ32
 
__vÆue
;

313 } 
__kûl
;

314 
	s
{

315 
˛ock32_t
 
__utime
;

316 
öt32_t
 
__°©us
;

317 
˛ock32_t
 
__°ime
;

318 } 
__˛d
;

319 } 
__pd©a
;

320 } 
__¥oc
;

322 
	s
{

323 
ˇddr32_t
 
__addr
;

324 
öt32_t
 
__å≠no
;

325 
ˇddr32_t
 
__pc
;

326 } 
__Áu…
;

328 
	s
{

330 
öt32_t
 
__fd
;

331 
öt32_t
 
__b™d
;

332 } 
__fûe
;

334 
	s
{

335 
ˇddr32_t
 
__Áddr
;

336 
time°ruc32_t
 
__t°amp
;

337 
öt16_t
 
__sysˇŒ
;

338 
öt8_t
 
__nsyßrg
;

339 
öt8_t
 
__Áu…
;

340 
öt32_t
 
__syßrg
[8];

341 
öt32_t
 
__m°©e
[10];

342 } 
__¥of
;

344 
	s
{

345 
öt32_t
 
__ítôy
;

346 } 
__r˘l
;

348 } 
__d©a
;

350 } 
	tsigöfo32_t
;

359 #i‡!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
) || \

360 
	`deföed
(
__EXTENSIONS__
)

362 
	sk_sigöfo
 {

363 
si_signo
;

364 
si_code
;

365 
si_î∫o
;

366 #ifde‡
_LP64


367 
si_∑d
;

369 
	u
{

370 
	s
{

371 
pid_t
 
__pid
;

372 
	u
{

373 
	s
{

374 
uid_t
 
__uid
;

375 
sigvÆ
 
__vÆue
;

376 } 
__kûl
;

377 
	s
{

378 
˛ock_t
 
__utime
;

379 
__°©us
;

380 
˛ock_t
 
__°ime
;

381 } 
__˛d
;

382 } 
__pd©a
;

383 } 
__¥oc
;

385 
	s
{

386 *
__addr
;

387 
__å≠no
;

388 
ˇddr_t
 
__pc
;

389 } 
__Áu…
;

391 
	s
{

393 
__fd
;

394 
__b™d
;

395 } 
__fûe
;

397 
	s
{

398 
ˇddr_t
 
__Áddr
;

400 #i‡!
	`deföed
(
_XOPEN_SOURCE
Ë&& !deföed(
_POSIX_C_SOURCE
) || \

401 
	`deföed
(
__EXTENSIONS__
)

402 
time°ruc_t
 
__t°amp
;

404 
_time°ruc_t
 
__t°amp
;

406 
__sysˇŒ
;

407 
__nsyßrg
;

408 
__Áu…
;

412 } 
__¥of
;

414 
	s
{

415 
öt32_t
 
__ítôy
;

416 } 
__r˘l
;

418 } 
__d©a
;

420 } 
	tk_sigöfo_t
;

422 
	ssigqueue
 {

423 
sigqueue
 *
sq_√xt
;

424 
k_sigöfo_t
 
sq_öfo
;

425 (*
sq_func
)(
sigqueue
 *);

426 *
sq_back±r
;

428 } 
	tsigqueue_t
;

431  
	#SI_CANQUEUE
(
c
) ((cË<
SI_QUEUE
)

	)
435  
	#si_pid
 
__d©a
.
__¥oc
.
__pid


	)
436  
	#si_°©us
 
__d©a
.
__¥oc
.
__pd©a
.
__˛d
.
__°©us


	)
437  
	#si_°ime
 
__d©a
.
__¥oc
.
__pd©a
.
__˛d
.
__°ime


	)
438  
	#si_utime
 
__d©a
.
__¥oc
.
__pd©a
.
__˛d
.
__utime


	)
439  
	#si_uid
 
__d©a
.
__¥oc
.
__pd©a
.
__kûl
.
__uid


	)
440  
	#si_vÆue
 
__d©a
.
__¥oc
.
__pd©a
.
__kûl
.
__vÆue


	)
441  
	#si_addr
 
__d©a
.
__Áu…
.
__addr


	)
442  
	#si_å≠no
 
__d©a
.
__Áu…
.
__å≠no


	)
443  
	#si_å≠a·î
 
__d©a
.
__Áu…
.
__å≠no


	)
444  
	#si_pc
 
__d©a
.
__Áu…
.
__pc


	)
445  
	#si_fd
 
__d©a
.
__fûe
.
__fd


	)
446  
	#si_b™d
 
__d©a
.
__fûe
.
__b™d


	)
447  
	#si_t°amp
 
__d©a
.
__¥of
.
__t°amp


	)
448  
	#si_sysˇŒ
 
__d©a
.
__¥of
.
__sysˇŒ


	)
449  
	#si_nsyßrg
 
__d©a
.
__¥of
.
__nsyßrg


	)
450  
	#si_syßrg
 
__d©a
.
__¥of
.
__syßrg


	)
451  
	#si_Áu…
 
__d©a
.
__¥of
.
__Áu…


	)
452  
	#si_Áddr
 
__d©a
.
__¥of
.
__Áddr


	)
453  
	#si_m°©e
 
__d©a
.
__¥of
.
__m°©e


	)
454  
	#si_ítôy
 
__d©a
.
__r˘l
.
__ítôy


	)
459 #i‡
	`deföed
(
_SYSCALL32_IMPL
)

461 
	`sigöfo_kto32
(c⁄° 
k_sigöfo_t
 *, 
sigöfo32_t
 *);

462 
	`sigöfo_32tok
(c⁄° 
sigöfo32_t
 *, 
k_sigöfo_t
 *);

466 #ifdef 
__˝lu•lus


467 
	}
}

	@/usr/include/sys/types32.h

6 #i‚de‡
_SYS_TYPES32_H


7  
	#_SYS_TYPES32_H


	)
9 #¥agm®
idít
 "@(#)types32.h 1.4 98/02/13 SMI"

11 
	~<sys/öt_ty≥s.h
>

13 #ifdef 
__˝lu•lus


28 
uöt32_t
 
	tˇddr32_t
;

29 
öt32_t
 
	tdaddr32_t
;

30 
öt32_t
 
	toff32_t
;

31 
uöt32_t
 
	töo32_t
;

32 
öt32_t
 
	tblk˙t32_t
;

33 
uöt32_t
 
	tfsblk˙t32_t
;

34 
uöt32_t
 
	tfsfû˙t32_t
;

35 
öt32_t
 
	tid32_t
;

36 
uöt32_t
 
	tmaj‹32_t
;

37 
uöt32_t
 
	tmö‹32_t
;

38 
öt32_t
 
	tkey32_t
;

39 
uöt32_t
 
	tmode32_t
;

40 
öt32_t
 
	tuid32_t
;

41 
öt32_t
 
	tgid32_t
;

42 
uöt32_t
 
	t∆ök32_t
;

43 
uöt32_t
 
	tdev32_t
;

44 
öt32_t
 
	tpid32_t
;

45 
uöt32_t
 
	tsize32_t
;

46 
öt32_t
 
	tssize32_t
;

47 
öt32_t
 
	ttime32_t
;

48 
öt32_t
 
	t˛ock32_t
;

50 
	stimevÆ32
 {

51 
time32_t
 
tv_£c
;

52 
öt32_t
 
tv_u£c
;

55 
	stime•ec32
 {

56 
time32_t
 
tv_£c
;

57 
öt32_t
 
tv_n£c
;

58 } 
	ttime•ec32_t
;

60 
time•ec32
 
	ttime°ruc32_t
;

62 
	sôimî•ec32
 {

63 
time•ec32
 
ô_öãrvÆ
;

64 
time•ec32
 
ô_vÆue
;

65 } 
	tôimî•ec32_t
;

67 #ifdef 
__˝lu•lus


	@/usr/include/sys/va_list.h

6 #i‚def 
_SYS_VA_LIST_H


7  
	#_SYS_VA_LIST_H


	)
9 #¥agm®
idít
 "@(#)va_list.h 1.13 01/02/08 SMI"

21 #ifdef 
__˝lu•lus


25 #ifde‡
__STDC__


26 *
	t__va_li°
;

28 *
	t__va_li°
;

31 #ifdef 
__˝lu•lus


	@/usr/include/unistd.h

13 #i‚de‡
_UNISTD_H


14  
	#_UNISTD_H


	)
16 #¥agm®
idít
 "@(#)unistd.h 1.60 01/07/29 SMI"

18 
	~<sys/„©uª_ã°s.h
>

20 
	~<sys/ty≥s.h
>

21 
	~<sys/uni°d.h
>

23 #ifdef 
__˝lu•lus


28  
	#R_OK
 4

	)
29  
	#W_OK
 2

	)
30  
	#X_OK
 1

	)
31  
	#F_OK
 0

	)
33 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

34 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

35  
	#F_ULOCK
 0

	)
36  
	#F_LOCK
 1

	)
37  
	#F_TLOCK
 2

	)
38  
	#F_TEST
 3

	)
43 #i‚def 
SEEK_SET


44  
	#SEEK_SET
 0

	)
47 #i‚def 
SEEK_CUR


48  
	#SEEK_CUR
 1

	)
51 #i‚def 
SEEK_END


52  
	#SEEK_END
 2

	)
55 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

56 
deföed
(
__EXTENSIONS__
)

58  
	#GF_PATH
 "/ëc/group"

	)
59  
	#PF_PATH
 "/ëc/∑sswd"

	)
67  
	#_POSIX_ASYNC_IO
 1

	)
68  
	#_POSIX_ASYNCHRONOUS_IO
 1

	)
69  
	#_POSIX_FSYNC
 1

	)
70  
	#_POSIX_JOB_CONTROL
 1

	)
71  
	#_POSIX_MAPPED_FILES
 1

	)
72  
	#_POSIX_MEMLOCK
 1

	)
73  
	#_POSIX_MEMLOCK_RANGE
 1

	)
74  
	#_POSIX_MEMORY_PROTECTION
 1

	)
75  
	#_POSIX_MESSAGE_PASSING
 1

	)
76  
	#_POSIX_PRIORITY_SCHEDULING
 1

	)
77  
	#_POSIX_REALTIME_SIGNALS
 1

	)
78  
	#_POSIX_SAVED_IDS
 1

	)
79  
	#_POSIX_SEMAPHORES
 1

	)
80  
	#_POSIX_SHARED_MEMORY_OBJECTS
 1

	)
81  
	#_POSIX_SYNC_IO
 1

	)
82  
	#_POSIX_SYNCHRONIZED_IO
 1

	)
83  
	#_POSIX_TIMERS
 1

	)
87  
	#_POSIX_THREAD_SAFE_FUNCTIONS
 1

	)
88  
	#_POSIX_THREADS
 1

	)
89  
	#_POSIX_THREAD_ATTR_STACKADDR
 1

	)
90  
	#_POSIX_THREAD_ATTR_STACKSIZE
 1

	)
91  
	#_POSIX_THREAD_PROCESS_SHARED
 1

	)
92  
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 1

	)
98  
	#_POSIX_THREAD_PRIO_INHERIT
 1

	)
99  
	#_POSIX_THREAD_PRIO_PROTECT
 1

	)
101 #i‚de‡
_POSIX_VDISABLE


102  
	#_POSIX_VDISABLE
 0

	)
105 #i‚de‡
NULL


106 #i‡
deföed
(
_LP64
Ë&& !deföed(
__˝lu•lus
)

107  
	#NULL
 0L

	)
109  
	#NULL
 0

	)
113  
	#STDIN_FILENO
 0

	)
114  
	#STDOUT_FILENO
 1

	)
115  
	#STDERR_FILENO
 2

	)
122  
	#_LFS_LARGEFILE
 1

	)
123  
	#_LFS64_LARGEFILE
 1

	)
124  
	#_LFS64_STDIO
 1

	)
125  
	#_LFS64_ASYNCHRONOUS_IO
 1

	)
128 #i‡!
deföed
(
_LP64
Ë&& 
_FILE_OFFSET_BITS
 == 64

129 #ifdef 
__PRAGMA_REDEFINE_EXTNAME


130 #¥agm®
ªdeföe_exäame
 
·runˇã
 
·runˇã64


131 #¥agm®
ªdeföe_exäame
 
l£ek
 
l£ek64


132 #¥agm®
ªdeföe_exäame
 
¥ód
 
¥ód64


133 #¥agm®
ªdeföe_exäame
 
pwrôe
 
pwrôe64


134 #¥agm®
ªdeföe_exäame
 
åunˇã
 
åunˇã64


135 #¥agm®
ªdeföe_exäame
 
lockf
 
lockf64


136 #¥agma 
ªdeföe_exäame
 
ãŒ
 
ãŒ64


138  
	#·runˇã
 
·runˇã64


	)
139  
	#l£ek
 
l£ek64


	)
140  
	#¥ód
 
¥ód64


	)
141  
	#pwrôe
 
pwrôe64


	)
142  
	#åunˇã
 
åunˇã64


	)
143  
	#lockf
 
lockf64


	)
144  
	#ãŒ
 
ãŒ64


	)
149 #i‡
deföed
(
_LP64
Ë&& deföed(
_LARGEFILE64_SOURCE
)

150 #ifdef 
__PRAGMA_REDEFINE_EXTNAME


151 #¥agm®
ªdeföe_exäame
 
·runˇã64
 
·runˇã


152 #¥agm®
ªdeföe_exäame
 
l£ek64
 
l£ek


153 #¥agm®
ªdeföe_exäame
 
¥ód64
 
¥ód


154 #¥agm®
ªdeföe_exäame
 
pwrôe64
 
pwrôe


155 #¥agm®
ªdeföe_exäame
 
åunˇã64
 
åunˇã


156 #¥agm®
ªdeföe_exäame
 
lockf64
 
lockf


157 #¥agm®
ªdeföe_exäame
 
ãŒ64
 
ãŒ


159  
	#·runˇã64
 
·runˇã


	)
160  
	#l£ek64
 
l£ek


	)
161  
	#¥ód64
 
¥ód


	)
162  
	#pwrôe64
 
pwrôe


	)
163  
	#åunˇã64
 
åunˇã


	)
164  
	#lockf64
 
lockf


	)
165  
	#ãŒ64
 
ãŒ


	)
169 #i‡
deföed
(
__STDC__
)

171 
ac˚ss
(const *, );

172 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

173 
deföed
(
__EXTENSIONS__
)

174 
ac˘
(const *);

176 
Æ¨m
();

177 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

178 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

179 
brk
(*);

181 
chdú
(const *);

182 
chown
(c⁄° *, 
uid_t
, 
gid_t
);

183 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XOPEN_SOURCE
)) || \

184 
deföed
(
__EXTENSIONS__
)

185 
chroŸ
(const *);

187 
˛o£
();

188 #i‡(
deföed
(
_XOPEN_SOURCE
Ë&& (
_XOPEN_VERSION
 - 0 >= 4)) || \

189 
deföed
(
__EXTENSIONS__
)

190 
size_t
 
c⁄f°r
(, *, size_t);

191 *
¸y±
(const *, const *);

193 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XOPEN_SOURCE
) || \

194 
deföed
(
__EXTENSIONS__
)

195 *
˘îmid
(*);

197 #ifde‡
_REENTRANT


198 *
˘îmid_r
(*);

200 *
cu£rid
(*);

201 
dup
();

202 
dup2
(, );

203 #i‡(
deföed
(
_XOPEN_SOURCE
Ë&& (
_XOPEN_VERSION
 - 0 >= 4)) || \

204 
deföed
(
__EXTENSIONS__
)

205 
í¸y±
(*, );

207 
exe˛
(const *, const *, ...);

208 
exe˛e
(const *, const *, ...);

209 
exe˛p
(const *, const *, ...);

210 
execv
(const *, *const *);

211 
execve
(const *, *const *, *const *);

212 
execvp
(const *, *const *);

213 
_exô
();

219 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

220 
deföed
(
__EXTENSIONS__
)

221 
Áâach
(, const *);

223 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

224 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

225 
fchdú
();

226 
fchown
(, 
uid_t
, 
gid_t
);

227 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

228 
deföed
(
__EXTENSIONS__
Ë|| deföed(
_ATFILE_SOURCE
)

229 
fchow«t
(, c⁄° *, 
uid_t
, 
gid_t
, );

232 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

233 
deföed
(
__EXTENSIONS__
)

234 
fchroŸ
();

236 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
) || \

237 (
	g_POSIX_C_SOURCE
 > 2Ë|| 
deföed
(
__EXTENSIONS__
)

238 
fd©async
();

245 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

246 
deföed
(
__EXTENSIONS__
)

247 
fdëach
(const *);

249 
pid_t
 
f‹k
();

250 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

251 
deföed
(
__EXTENSIONS__
)

252 
pid_t
 
f‹k1
();

254 
Â©hc⁄f
(, );

255 #i‡!
deföed
(
_POSIX_C_SOURCE
) || (_POSIX_C_SOURCE > 2) || \

256 
deföed
(
__EXTENSIONS__
)

257 
fsync
();

259 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

260 (
deföed
(
_LARGEFILE_SOURCE
Ë&& 
	g_FILE_OFFSET_BITS
 == 64) || \

261 (
_POSIX_C_SOURCE
 > 2Ë|| 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

262 
·runˇã
(, 
off_t
);

264 *
gëcwd
(*, 
size_t
);

265 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

266 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

267 
gëdèbÀsize
();

269 
gid_t
 
gëegid
();

270 
uid_t
 
gëeuid
();

271 
gid_t
 
gëgid
();

272 
gëgroups
(, 
gid_t
 *);

273 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

274 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

275 
gëho°id
();

277 #i‡
deföed
(
_XPG4_2
)

278 
gëho°«me
(*, 
size_t
);

279 #ñi‡ 
deföed
(
__EXTENSIONS__
) || \

280 (!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
))

281 
gëho°«me
(*, );

283 *
gëlogö
();

284 #i‡(
deföed
(
_XOPEN_SOURCE
Ë&& (
_XOPEN_VERSION
 - 0 >= 4)) || \

285 
deföed
(
__EXTENSIONS__
)

286 
gë›t
(, *const *, const *);

287 *
›èrg
;

288 
›ãº
, 
›töd
, 
›t›t
;

289 *
gë∑ss
(const *);

291 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

292 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

293 
gë∑gesize
();

294 
pid_t
 
gëpgid
(pid_t);

296 
pid_t
 
gëpid
();

297 
pid_t
 
gëµid
();

298 
pid_t
 
gëpgΩ
();

299 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

300 
deföed
(
__EXTENSIONS__
)

301 *
gëtxt
(const *, const *);

303 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

304 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

305 
pid_t
 
gësid
(pid_t);

307 
uid_t
 
gëuid
();

308 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

309 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

310 *
gëwd
(*);

317 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

318 
deföed
(
__EXTENSIONS__
)

319 
io˘l
(, , ...);

321 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

322 
deföed
(
__EXTENSIONS__
)

323 
ißexec
(const *, *const *, *const *);

324 
is£tugid
();

326 
ißây
();

327 
lök
(const *, const *);

328 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

329 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

330 
lchown
(c⁄° *, 
uid_t
, 
gid_t
);

332 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

333 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
) || \

334 (
deföed
(
_LARGEFILE_SOURCE
Ë&& 
	g_FILE_OFFSET_BITS
 == 64)

335 
lockf
(, , 
off_t
);

337 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

338 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

339 
ªadlök
(c⁄° *, *, 
size_t
);

341 
off_t
 
l£ek
(, off_t, );

342 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XOPEN_SOURCE
)) || \

343 
deföed
(
__EXTENSIONS__
)

344 
ni˚
();

346 
∑thc⁄f
(const *, );

347 
∑u£
();

348 
pùe
(*);

349 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

350 
deföed
(
__EXTENSIONS__
)

351 
off£t_t
 
Œ£ek
(, offset_t, );

353 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

354 (
deföed
(
_LARGEFILE_SOURCE
Ë&& 
	g_FILE_OFFSET_BITS
 == 64) || \

355 
deföed
(
__EXTENSIONS__
)

356 
off_t
 
ãŒ
();

358 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

359 
deföed
(
__EXTENSIONS__
)

360 
möc‹e
(
ˇddr_t
, 
size_t
, *);

362 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

363 (
deföed
(
_LARGEFILE_SOURCE
Ë&& 
	g_FILE_OFFSET_BITS
 == 64) || \

364 
deföed
(
_XPG5
Ë|| deföed(
__EXTENSIONS__
)

365 
ssize_t
 
¥ód
(, *, 
size_t
, 
off_t
);

367 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

368 
deföed
(
__EXTENSIONS__
)

369 
¥ofû
(*, 
size_t
, , );

371 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

372 (
	g_POSIX_C_SOURCE
 > 2Ë|| 
deföed
(
__EXTENSIONS__
)

373 
±hªad_©f‹k
((*) (), (*) (), (*) ());

375 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

376 
deföed
(
__EXTENSIONS__
)

377 
±ø˚
(, 
pid_t
, , );

379 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

380 (
deföed
(
_LARGEFILE_SOURCE
Ë&& 
	g_FILE_OFFSET_BITS
 == 64) || \

381 
deföed
(
_XPG5
Ë|| deföed(
__EXTENSIONS__
)

382 
ssize_t
 
pwrôe
(, c⁄° *, 
size_t
, 
off_t
);

384 
ssize_t
 
ªad
(, *, 
size_t
);

385 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& (
_XOPEN_VERSION
 - 0 < 4)) || \

386 
deföed
(
__EXTENSIONS__
)

387 
ª«me
(const *, const *);

388 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

389 
deföed
(
__EXTENSIONS__
Ë|| deföed(
_ATFILE_SOURCE
)

390 
ª«mót
(, const *, , const *);

393 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

394 
deföed
(
__EXTENSIONS__
)

395 
ªsﬁvï©h
(c⁄° *, *, 
size_t
);

397 
rmdú
(const *);

398 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

399 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

400 *
sbrk
(
öçå_t
);

402 
£tgid
(
gid_t
);

403 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

404 
deföed
(
__EXTENSIONS__
)

405 
£ãgid
(
gid_t
);

407 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

408 
deföed
(
__EXTENSIONS__
)

409 
£tgroups
(, c⁄° 
gid_t
 *);

411 
£çgid
(
pid_t
,Öid_t);

412 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

413 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

414 
pid_t
 
£çgΩ
();

415 
£åegid
(
gid_t
, gid_t);

416 
£åeuid
(
uid_t
, uid_t);

418 
pid_t
 
£tsid
();

419 
£tuid
(
uid_t
);

420 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

421 
deföed
(
__EXTENSIONS__
)

422 
£ãuid
(
uid_t
);

424 
¶ìp
();

425 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

426 
deföed
(
__EXTENSIONS__
)

427 
°ime
(c⁄° 
time_t
 *);

429 #i‡
deföed
(
_XOPEN_SOURCE
Ë&& (
_XOPEN_VERSION
 - 0 >= 4)

431 
swab
(c⁄° *, *, 
ssize_t
);

433 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

434 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

435 
symlök
(const *, const *);

436 
sync
();

438 
sysc⁄f
();

439 #i‡
deföed
(
_XPG5
)

440 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


441 #¥agm®
ªdeföe_exäame
 
sysc⁄f
 
__sysc⁄f_xpg5


443 
__sysc⁄f_xpg5
();

444  
	#sysc⁄f
 
__sysc⁄f_xpg5


	)
447 
pid_t
 
tcgëpgΩ
();

448 
tc£çgΩ
(, 
pid_t
);

449 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

450 
deföed
(
__EXTENSIONS__
)

451 
off_t
 
ãŒ
();

453 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

454 (
deföed
(
_LARGEFILE_SOURCE
Ë&& 
	g_FILE_OFFSET_BITS
 == 64) || \

455 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

456 
åunˇã
(c⁄° *, 
off_t
);

458 *
ây«me
();

459 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

460 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

461 
u£c⁄ds_t
 
uÆ¨m
(useconds_t, useconds_t);

463 
u∆ök
(const *);

464 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

465 
deföed
(
__EXTENSIONS__
Ë|| deföed(
_ATFILE_SOURCE
)

466 
u∆ök©
(, const *, );

468 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

469 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

470 
u¶ìp
(
u£c⁄ds_t
);

472 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

473 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

474 
pid_t
 
vf‹k
();

476 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

477 
deföed
(
__EXTENSIONS__
)

478 
vh™gup
();

480 
ssize_t
 
wrôe
(, c⁄° *, 
size_t
);

481 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

482 
deföed
(
__EXTENSIONS__
)

483 
yõld
();

487 #if 
deföed
(
_LARGEFILE64_SOURCE
Ë&& !((
_FILE_OFFSET_BITS
 == 64) && \

488 !
deföed
(
__PRAGMA_REDEFINE_EXTNAME
))

489 
·runˇã64
(, 
off64_t
);

490 
off64_t
 
l£ek64
(, off64_t, );

491 
ssize_t
 
¥ód64
(, *, 
size_t
, 
off64_t
);

492 
ssize_t
 
pwrôe64
(, c⁄° *, 
size_t
, 
off64_t
);

493 
off64_t
 
ãŒ64
();

494 
åunˇã64
(c⁄° *, 
off64_t
);

495 
lockf64
(, , 
off64_t
);

500 
ac˚ss
();

501 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

502 
deföed
(
__EXTENSIONS__
)

503 
ac˘
();

505 
Æ¨m
();

506 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

507 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

508 
brk
();

510 
chdú
();

511 
chown
();

512 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XOPEN_SOURCE
)) || \

513 
deföed
(
__EXTENSIONS__
)

514 
chroŸ
();

516 
˛o£
();

517 #i‡(
deföed
(
_XOPEN_SOURCE
Ë&& (
_XOPEN_VERSION
 - 0 >= 4)) || \

518 
deföed
(
__EXTENSIONS__
)

519 
size_t
 
c⁄f°r
();

520 *
¸y±
();

522 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XOPEN_SOURCE
) || \

523 
deföed
(
__EXTENSIONS__
)

524 *
˘îmid
();

526 #ifde‡
_REENTRANT


527 *
˘îmid_r
();

529 *
cu£rid
();

530 
dup
();

531 
dup2
();

532 #i‡(
deföed
(
_XOPEN_SOURCE
Ë&& (
_XOPEN_VERSION
 - 0 >= 4)) || \

533 
deföed
(
__EXTENSIONS__
)

534 
í¸y±
();

536 
exe˛
();

537 
exe˛e
();

538 
exe˛p
();

539 
execv
();

540 
execve
();

541 
execvp
();

542 
_exô
();

543 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

544 
deföed
(
__EXTENSIONS__
)

545 
Áâach
();

547 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

548 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

549 
fchdú
();

550 
fchown
();

551 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

552 
deföed
(
__EXTENSIONS__
Ë|| deföed(
_ATFILE_SOURCE
)

553 
fchow«t
();

556 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

557 
deföed
(
__EXTENSIONS__
)

558 
fchroŸ
();

560 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
) || \

561 (
	g_POSIX_C_SOURCE
 > 2Ë|| 
deföed
(
__EXTENSIONS__
)

562 
fd©async
();

564 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)

565 
fdëach
();

567 
pid_t
 
f‹k
();

568 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

569 
deföed
(
__EXTENSIONS__
)

570 
pid_t
 
f‹k1
();

572 
Â©hc⁄f
();

573 #i‡!
deföed
(
_POSIX_C_SOURCE
) || (_POSIX_C_SOURCE > 2) || \

574 
deföed
(
__EXTENSIONS__
)

575 
fsync
();

577 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

578 (
deföed
(
_LARGEFILE_SOURCE
Ë&& 
	g_FILE_OFFSET_BITS
 == 64) || \

579 (
_POSIX_C_SOURCE
 > 2Ë|| 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

580 
·runˇã
();

582 *
gëcwd
();

583 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

584 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

585 
gëdèbÀsize
();

587 
gid_t
 
gëegid
();

588 
uid_t
 
gëeuid
();

589 
gid_t
 
gëgid
();

590 
gëgroups
();

591 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

592 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

593 
gëho°id
();

595 *
gëlogö
();

596 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

597 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

598 #i‡(
deföed
(
_XOPEN_SOURCE
Ë&& (
_XOPEN_VERSION
 - 0 >= 4)) || \

599 
deföed
(
__EXTENSIONS__
)

600 
gë›t
();

601 *
›èrg
;

602 
›ãº
, 
›töd
, 
›t›t
;

603 *
gë∑ss
();

605 
gë∑gesize
();

606 
pid_t
 
gëpgid
();

608 
pid_t
 
gëpid
();

609 
pid_t
 
gëµid
();

610 
pid_t
 
gëpgΩ
();

611 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

612 
deföed
(
__EXTENSIONS__
)

613 *
gëtxt
();

615 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

616 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

617 
pid_t
 
gësid
();

619 
uid_t
 
gëuid
();

620 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

621 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

622 *
gëwd
();

624 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

625 
deföed
(
__EXTENSIONS__
)

626 
io˘l
();

628 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

629 
deföed
(
__EXTENSIONS__
)

630 
ißexec
();

631 
is£tugid
();

633 
ißây
();

634 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

635 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

636 
lchown
();

638 
lök
();

639 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

640 
deföed
(
__EXTENSIONS__
)

641 
off£t_t
 
Œ£ek
();

643 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

644 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
) || \

645 (
deföed
(
_LARGEFILE_SOURCE
Ë&& 
	g_FILE_OFFSET_BITS
 == 64)

646 
lockf
();

648 
off_t
 
l£ek
();

649 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

650 
deföed
(
__EXTENSIONS__
)

651 
möc‹e
();

653 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XOPEN_SOURCE
)) || \

654 
deföed
(
__EXTENSIONS__
)

655 
ni˚
();

657 
∑thc⁄f
();

658 
∑u£
();

659 
pùe
();

660 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

661 (
deföed
(
_LARGEFILE_SOURCE
Ë&& 
	g_FILE_OFFSET_BITS
 == 64) || \

662 
deföed
(
_XPG5
Ë|| deföed(
__EXTENSIONS__
)

663 
ssize_t
 
¥ód
();

665 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

666 
deföed
(
__EXTENSIONS__
)

667 
¥ofû
();

668 
±ø˚
();

670 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

671 (
	g_POSIX_C_SOURCE
 > 2Ë|| 
deföed
(
__EXTENSIONS__
)

672 
±hªad_©f‹k
();

674 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

675 (
deföed
(
_LARGEFILE_SOURCE
Ë&& 
	g_FILE_OFFSET_BITS
 == 64) || \

676 
deföed
(
_XPG5
Ë|| deföed(
__EXTENSIONS__
)

677 
ssize_t
 
pwrôe
();

679 
ssize_t
 
ªad
();

680 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

681 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

682 
ªadlök
();

684 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& (
_XOPEN_VERSION
 - 0 < 4)) || \

685 
deföed
(
__EXTENSIONS__
)

686 
ª«me
();

687 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

688 
deföed
(
__EXTENSIONS__
Ë|| deföed(
_ATFILE_SOURCE
)

689 
ª«mót
();

692 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

693 
deföed
(
__EXTENSIONS__
)

694 
ªsﬁvï©h
();

696 
rmdú
();

697 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

698 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

699 *
sbrk
();

701 
£tgid
();

702 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

703 
deföed
(
__EXTENSIONS__
)

704 
£ãgid
();

706 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

707 
deföed
(
__EXTENSIONS__
)

708 
£tgroups
();

710 
£çgid
();

711 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

712 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

713 
pid_t
 
£çgΩ
();

714 
£åegid
();

715 
£åeuid
();

717 
pid_t
 
£tsid
();

718 
£tuid
();

719 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

720 
deföed
(
__EXTENSIONS__
)

721 
£ãuid
();

723 
¶ìp
();

724 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

725 
deföed
(
__EXTENSIONS__
)

726 
°ime
();

728 #i‡
deföed
(
_XOPEN_SOURCE
Ë&& (
_XOPEN_VERSION
 - 0 >= 4)

730 
swab
();

732 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

733 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

734 
symlök
();

735 
sync
();

737 
sysc⁄f
();

738 #i‡
deföed
(
_XPG5
)

739 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


740 #¥agm®
ªdeföe_exäame
 
sysc⁄f
 
__sysc⁄f_xpg5


742 
__sysc⁄f_xpg5
();

743  
	#sysc⁄f
 
__sysc⁄f_xpg5


	)
746 
pid_t
 
tcgëpgΩ
();

747 
tc£çgΩ
();

748 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

749 (
deföed
(
_LARGEFILE_SOURCE
Ë&& 
	g_FILE_OFFSET_BITS
 == 64) || \

750 
deföed
(
__EXTENSIONS__
)

751 
off_t
 
ãŒ
();

753 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

754 (
deföed
(
_LARGEFILE_SOURCE
Ë&& 
	g_FILE_OFFSET_BITS
 == 64) || \

755 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

756 
åunˇã
();

758 *
ây«me
();

759 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

760 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

761 
u£c⁄ds_t
 
uÆ¨m
();

763 
u∆ök
();

764 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

765 
deföed
(
__EXTENSIONS__
Ë|| deföed(
_ATFILE_SOURCE
)

766 
u∆ök©
();

768 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

769 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

770 
u¶ìp
();

772 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
) || \

773 
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

774 
pid_t
 
vf‹k
();

776 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

777 
deföed
(
__EXTENSIONS__
)

778 
vh™gup
();

780 
ssize_t
 
wrôe
();

781 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

782 
deföed
(
__EXTENSIONS__
)

783 
yõld
();

787 #if 
deföed
(
_LARGEFILE64_SOURCE
Ë&& !((
_FILE_OFFSET_BITS
 == 64) && \

788 !
deföed
(
__PRAGMA_REDEFINE_EXTNAME
))

789 
·runˇã64
();

790 
off64_t
 
l£ek64
();

791 
ssize_t
 
¥ód64
();

792 
ssize_t
 
pwrôe64
();

793 
off64_t
 
ãŒ64
();

794 
åunˇã64
();

795 
lockf64
();

805 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

806 
deföed
(
__EXTENSIONS__
)

807 #i‡
deföed
(
__•¨c
)

808 #¥agm®
unknown_c⁄åﬁ_Êow
(
vf‹k
)

846 #if 
deföed
(
__EXTENSIONS__
Ë|| deföed(
_REENTRANT
) || \

847 (
	g_POSIX_C_SOURCE
 - 0 >199506LË|| 
deföed
(
_POSIX_PTHREAD_SEMANTICS
)

849 #if 
deföed
(
__STDC__
)

851 #if (
_POSIX_C_SOURCE
 - 0 >199506LË|| 
deföed
(
_POSIX_PTHREAD_SEMANTICS
)

853 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


854 
gëlogö_r
(*, );

855 
ây«me_r
(, *, 
size_t
);

856 #¥agm®
ªdeföe_exäame
 
gëlogö_r
 
__posix_gëlogö_r


857 #¥agm®
ªdeföe_exäame
 
ây«me_r
 
__posix_ây«me_r


861 
gëlogö_r
(*
__«me
, 
__Àn
)

863 
__posix_gëlogö_r
(*, );

864  (
__posix_gëlogö_r
(
__«me
, 
__Àn
));

867 
ây«me_r
(
__fûdes
, *
__buf
, 
size_t
 
__size
)

869 
__posix_ây«me_r
(, *, 
size_t
);

870  (
__posix_ây«me_r
(
__fûdes
, 
__buf
, 
__size
));

876 *
gëlogö_r
(*, );

877 *
ây«me_r
(, *, );

883 #i‡(
_POSIX_C_SOURCE
 - 0 >199506LË|| 
deföed
(
_POSIX_PTHREAD_SEMANTICS
)

885 #ifde‡
__PRAGMA_REDEFINE_EXTNAME


886 
gëlogö_r
();

887 
ây«me_r
();

888 #¥agm®
ªdeföe_exäame
 
gëlogö_r
 
__posix_gëlogö_r


889 #¥agm®
ªdeföe_exäame
 
ây«me_r
 
__posix_ây«me_r


893 
gëlogö_r
(
__«me
, 
__Àn
)

894 *
	g__«me
;

895 
	g__Àn
;

897 
__posix_gëlogö_r
();

898  (
__posix_gëlogö_r
(
__«me
, 
__Àn
));

901 
ây«me_r
(
__fûdes
, 
__buf
, 
__size
)

902 
	g__fûdes
;

903 *
	g__buf
;

904 
size_t
 
	g__size
;

906 
__posix_ây«me_r
();

907  (
__posix_ây«me_r
(
__fûdes
, 
__buf
, 
__size
));

913 *
gëlogö_r
();

914 *
ây«me_r
();

922 #ifdef 
__˝lu•lus


	@/usr/include/sys/int_const.h

6 #i‚de‡
_SYS_INT_CONST_H


7  
	#_SYS_INT_CONST_H


	)
9 #¥agm®
idít
 "@(#)int_const.h 1.2 96/07/08 SMI"

33 
	~<sys/iß_defs.h
>

35 #ifde‡
__˝lu•lus


54 #ifde‡
__STDC__


56  
	#__CONCAT__
(
A
,
B
ËA ## B

	)
59  
	#__CONCAT__
(
A
,
B
ËA 
	)
B

62 #i‡
deföed
(
_CHAR_IS_SIGNED
Ë|| deföed(
__STDC__
)

63  
	#INT8_C
(
c
) (c)

	)
65  
	#INT16_C
(
c
) (c)

	)
66  
	#INT32_C
(
c
) (c)

	)
67 #ifde‡ 
_LP64


69  
	#INT64_C
(
c
) 
	`__CONCAT__
(c,
l
)

	)
71 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

73  
	#INT64_C
(
c
) 
	`__CONCAT__
(c,
Œ
)

	)
78  
	#UINT8_C
(
c
) 
	`__CONCAT__
(c,
u
)

	)
80  
	#UINT16_C
(
c
) 
	`__CONCAT__
(c,
u
)

	)
82  
	#UINT32_C
(
c
) 
	`__CONCAT__
(c,
u
)

	)
83 #ifde‡ 
_LP64


85  
	#UINT64_C
(
c
) 
	`__CONCAT__
(c,
ul
)

	)
87 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

89  
	#UINT64_C
(
c
) 
	`__CONCAT__
(c,
uŒ
)

	)
93 #ifde‡ 
_LP64


95  
	#INTMAX_C
(
c
) 
	`__CONCAT__
(c,
l
)

	)
97  
	#UINTMAX_C
(
c
) 
	`__CONCAT__
(c,
ul
)

	)
99 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

101  
	#INTMAX_C
(
c
) 
	`__CONCAT__
(c,
Œ
)

	)
103  
	#UINTMAX_C
(
c
) 
	`__CONCAT__
(c,
uŒ
)

	)
105  
	#INTMAX_C
(
c
) (c)

	)
106  
	#UINTMAX_C
(
c
) (c)

	)
110 #ifde‡
__˝lu•lus


	@/usr/include/sys/int_fmtio.h

6 #i‚de‡
_SYS_INT_FMTIO_H


7  
	#_SYS_INT_FMTIO_H


	)
9 #¥agm®
idít
 "@(#)int_fmtio.h 1.2 96/07/08 SMI"

38 
	~<sys/iß_defs.h
>

40 #ifde‡
__˝lu•lus


71 #i‡
deföed
(
_CHAR_IS_SIGNED
Ë|| deföed(
__STDC__
)

72  
	#PRId8
 "d"

	)
74  
	#PRId16
 "d"

	)
75  
	#PRId32
 "d"

	)
76 #ifde‡ 
_LP64


77  
	#PRId64
 "ld"

	)
79 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

80  
	#PRId64
 "Œd"

	)
84 #i‡
deföed
(
_CHAR_IS_SIGNED
Ë|| deföed(
__STDC__
)

85  
	#PRIdLEAST8
 "d"

	)
87  
	#PRIdLEAST16
 "d"

	)
88  
	#PRIdLEAST32
 "d"

	)
89 #ifde‡ 
_LP64


90  
	#PRIdLEAST64
 "ld"

	)
92 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

93  
	#PRIdLEAST64
 "Œd"

	)
97 #i‡
deföed
(
_CHAR_IS_SIGNED
Ë|| deföed(
__STDC__
)

98  
	#PRIi8
 "i"

	)
100  
	#PRIi16
 "i"

	)
101  
	#PRIi32
 "i"

	)
102 #ifde‡ 
_LP64


103  
	#PRIi64
 "li"

	)
105 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

106  
	#PRIi64
 "Œi"

	)
110 #i‡
deföed
(
_CHAR_IS_SIGNED
Ë|| deföed(
__STDC__
)

111  
	#PRIiLEAST8
 "i"

	)
113  
	#PRIiLEAST16
 "i"

	)
114  
	#PRIiLEAST32
 "i"

	)
115 #ifde‡ 
_LP64


116  
	#PRIiLEAST64
 "li"

	)
118 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

119  
	#PRIiLEAST64
 "Œi"

	)
123 #i‡
deföed
(
_CHAR_IS_SIGNED
Ë|| deföed(
__STDC__
)

124  
	#PRIo8
 "o"

	)
126  
	#PRIo16
 "o"

	)
127  
	#PRIo32
 "o"

	)
128 #ifde‡ 
_LP64


129  
	#PRIo64
 "lo"

	)
131 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

132  
	#PRIo64
 "Œo"

	)
136 #i‡
deföed
(
_CHAR_IS_SIGNED
Ë|| deföed(
__STDC__
)

137  
	#PRIoLEAST8
 "o"

	)
139  
	#PRIoLEAST16
 "o"

	)
140  
	#PRIoLEAST32
 "o"

	)
141 #ifde‡ 
_LP64


142  
	#PRIoLEAST64
 "lo"

	)
144 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

145  
	#PRIoLEAST64
 "Œo"

	)
149 #i‡
deföed
(
_CHAR_IS_SIGNED
Ë|| deföed(
__STDC__
)

150  
	#PRIx8
 "x"

	)
152  
	#PRIx16
 "x"

	)
153  
	#PRIx32
 "x"

	)
154 #ifde‡ 
_LP64


155  
	#PRIx64
 "lx"

	)
157 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

158  
	#PRIx64
 "Œx"

	)
162 #i‡
deföed
(
_CHAR_IS_SIGNED
Ë|| deföed(
__STDC__
)

163  
	#PRIxLEAST8
 "x"

	)
165  
	#PRIxLEAST16
 "x"

	)
166  
	#PRIxLEAST32
 "x"

	)
167 #ifde‡ 
_LP64


168  
	#PRIxLEAST64
 "lx"

	)
170 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

171  
	#PRIxLEAST64
 "Œx"

	)
175 #i‡
deföed
(
_CHAR_IS_SIGNED
Ë|| deföed(
__STDC__
)

176  
	#PRIX8
 "X"

	)
178  
	#PRIX16
 "X"

	)
179  
	#PRIX32
 "X"

	)
180 #ifde‡ 
_LP64


181  
	#PRIX64
 "lX"

	)
183 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

184  
	#PRIX64
 "ŒX"

	)
188 #i‡
deföed
(
_CHAR_IS_SIGNED
Ë|| deföed(
__STDC__
)

189  
	#PRIXLEAST8
 "X"

	)
191  
	#PRIXLEAST16
 "X"

	)
192  
	#PRIXLEAST32
 "X"

	)
193 #ifde‡ 
_LP64


194  
	#PRIXLEAST64
 "lX"

	)
196 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

197  
	#PRIXLEAST64
 "ŒX"

	)
204  
	#PRIu8
 "u"

	)
205  
	#PRIu16
 "u"

	)
206  
	#PRIu32
 "u"

	)
207 #ifde‡ 
_LP64


208  
	#PRIu64
 "lu"

	)
210 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

211  
	#PRIu64
 "Œu"

	)
215  
	#PRIuLEAST8
 "u"

	)
216  
	#PRIuLEAST16
 "u"

	)
217  
	#PRIuLEAST32
 "u"

	)
218 #ifde‡ 
_LP64


219  
	#PRIuLEAST64
 "lu"

	)
221 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

222  
	#PRIuLEAST64
 "Œu"

	)
229  
	#SCNd16
 "hd"

	)
230  
	#SCNd32
 "d"

	)
231 #ifde‡ 
_LP64


232  
	#SCNd64
 "ld"

	)
234 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

235  
	#SCNd64
 "Œd"

	)
239  
	#SCNi16
 "hi"

	)
240  
	#SCNi32
 "i"

	)
241 #ifde‡ 
_LP64


242  
	#SCNi64
 "li"

	)
244 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

245  
	#SCNi64
 "Œi"

	)
249  
	#SCNo16
 "ho"

	)
250  
	#SCNo32
 "o"

	)
251 #ifde‡ 
_LP64


252  
	#SCNo64
 "lo"

	)
254 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

255  
	#SCNo64
 "Œo"

	)
259  
	#SCNu16
 "hu"

	)
260  
	#SCNu32
 "u"

	)
261 #ifde‡ 
_LP64


262  
	#SCNu64
 "lu"

	)
264 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

265  
	#SCNu64
 "Œu"

	)
269  
	#SCNx16
 "hx"

	)
270  
	#SCNx32
 "x"

	)
271 #ifde‡ 
_LP64


272  
	#SCNx64
 "lx"

	)
274 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

275  
	#SCNx64
 "Œx"

	)
282 #ifde‡ 
_LP64


283  
	#PRIdMAX
 "ld"

	)
284  
	#PRIoMAX
 "lo"

	)
285  
	#PRIxMAX
 "lx"

	)
286  
	#PRIuMAX
 "lu"

	)
288 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

289  
	#PRIdMAX
 "Œd"

	)
290  
	#PRIoMAX
 "Œo"

	)
291  
	#PRIxMAX
 "Œx"

	)
292  
	#PRIuMAX
 "Œu"

	)
294  
	#PRIdMAX
 "d"

	)
295  
	#PRIoMAX
 "o"

	)
296  
	#PRIxMAX
 "x"

	)
297  
	#PRIuMAX
 "u"

	)
301 #ifde‡ 
_LP64


302  
	#SCNiMAX
 "li"

	)
303  
	#SCNdMAX
 "ld"

	)
304  
	#SCNoMAX
 "lo"

	)
305  
	#SCNxMAX
 "lx"

	)
307 #i‡
__STDC__
 - 0 =0 && !
deföed
(
_NO_LONGLONG
)

308  
	#SCNiMAX
 "Œi"

	)
309  
	#SCNdMAX
 "Œd"

	)
310  
	#SCNoMAX
 "Œo"

	)
311  
	#SCNxMAX
 "Œx"

	)
313  
	#SCNiMAX
 "i"

	)
314  
	#SCNdMAX
 "d"

	)
315  
	#SCNoMAX
 "o"

	)
316  
	#SCNxMAX
 "x"

	)
320 #ifde‡
__˝lu•lus


	@/usr/include/sys/int_limits.h

6 #i‚de‡
_SYS_INT_LIMITS_H


7  
	#_SYS_INT_LIMITS_H


	)
9 #¥agm®
idít
 "@(#)int_limits.h 1.6 99/08/06 SMI"

44 
	~<sys/iß_defs.h
>

46 #ifde‡
__˝lu•lus


70 #i‡
deföed
(
_CHAR_IS_SIGNED
Ë|| deföed(
__STDC__
)

71  
	#INT8_MAX
 (127)

	)
73  
	#INT16_MAX
 (32767)

	)
74  
	#INT32_MAX
 (2147483647)

	)
75 #i‡
deföed
(
_LP64
Ë|| (
__STDC__
 - 0 =0 && !deföed(
_NO_LONGLONG
))

76  
	#INT64_MAX
 (9223372036854775807LL)

	)
79  
	#UINT8_MAX
 (255U)

	)
80  
	#UINT16_MAX
 (65535U)

	)
81  
	#UINT32_MAX
 (4294967295U)

	)
82 #i‡
deföed
(
_LP64
Ë|| (
__STDC__
 - 0 =0 && !deföed(
_NO_LONGLONG
))

83  
	#UINT64_MAX
 (18446744073709551615ULL)

	)
86 #ifde‡
INT64_MAX


87  
	#INTMAX_MAX
 
INT64_MAX


	)
89  
	#INTMAX_MAX
 
INT32_MAX


	)
92 #ifde‡
UINT64_MAX


93  
	#UINTMAX_MAX
 
UINT64_MAX


	)
95  
	#UINTMAX_MAX
 
UINT32_MAX


	)
98 #i‡
deföed
(
_CHAR_IS_SIGNED
Ë|| deföed(
__STDC__
)

99  
	#INT_LEAST8_MAX
 
INT8_MAX


	)
101  
	#INT_LEAST16_MAX
 
INT16_MAX


	)
102  
	#INT_LEAST32_MAX
 
INT32_MAX


	)
103 #ifde‡
INT64_MAX


104  
	#INT_LEAST64_MAX
 
INT64_MAX


	)
111  
	#UINT_LEAST8_MAX
 
UINT8_MAX


	)
112  
	#UINT_LEAST16_MAX
 
UINT16_MAX


	)
113  
	#UINT_LEAST32_MAX
 
UINT32_MAX


	)
114 #ifde‡
UINT64_MAX


115  
	#UINT_LEAST64_MAX
 
UINT64_MAX


	)
124  
	#INTPTR_MAX


	)
125  
	#UINTPTR_MAX


	)
132 #i‡
deföed
(
__EXTENSIONS__
) || \

133 (!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
))

135 #i‡
deföed
(
_CHAR_IS_SIGNED
Ë|| deföed(
__STDC__
)

136  
	#INT8_MIN
 (-128)

	)
138  
	#INT16_MIN
 (-32767-1)

	)
139  
	#INT32_MIN
 (-2147483647-1)

	)
140 #i‡
deföed
(
_LP64
Ë|| (
__STDC__
 - 0 =0 && !deföed(
_NO_LONGLONG
))

141  
	#INT64_MIN
 (-9223372036854775807LL-1)

	)
144 #ifde‡
INT64_MIN


145  
	#INTMAX_MIN
 
INT64_MIN


	)
147  
	#INTMAX_MIN
 
INT32_MIN


	)
150 #i‡
deföed
(
_CHAR_IS_SIGNED
Ë|| deföed(
__STDC__
)

151  
	#INT_LEAST8_MIN
 
INT8_MIN


	)
153  
	#INT_LEAST16_MIN
 
INT16_MIN


	)
154  
	#INT_LEAST32_MIN
 
INT32_MIN


	)
155 #ifde‡
INT64_MIN


156  
	#INT_LEAST64_MIN
 
INT64_MIN


	)
161 #ifde‡
__˝lu•lus


	@/usr/include/sys/machsig.h

13 #i‚def 
_SYS_MACHSIG_H


14  
	#_SYS_MACHSIG_H


	)
16 #¥agm®
idít
 "@(#)machsig.h 1.15 99/08/15 SMI"

18 
	~<sys/„©uª_ã°s.h
>

20 #ifdef 
__˝lu•lus


36 #i‡!
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

42  
	#ILL_ILLOPC
 1

	)
43  
	#ILL_ILLOPN
 2

	)
44  
	#ILL_ILLADR
 3

	)
45  
	#ILL_ILLTRP
 4

	)
46  
	#ILL_PRVOPC
 5

	)
47  
	#ILL_PRVREG
 6

	)
48  
	#ILL_COPROC
 7

	)
49  
	#ILL_BADSTK
 8

	)
51 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

52  
	#NSIGILL
 8

	)
59 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

60  
	#EMT_TAGOVF
 1

	)
61  
	#EMT_CPCOVF
 2

	)
62  
	#NSIGEMT
 2

	)
69  
	#FPE_INTDIV
 1

	)
70  
	#FPE_INTOVF
 2

	)
71  
	#FPE_FLTDIV
 3

	)
72  
	#FPE_FLTOVF
 4

	)
73  
	#FPE_FLTUND
 5

	)
74  
	#FPE_FLTRES
 6

	)
75  
	#FPE_FLTINV
 7

	)
76  
	#FPE_FLTSUB
 8

	)
77 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

78  
	#NSIGFPE
 8

	)
85  
	#SEGV_MAPERR
 1

	)
86  
	#SEGV_ACCERR
 2

	)
87 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

88  
	#NSIGSEGV
 2

	)
95  
	#BUS_ADRALN
 1

	)
96  
	#BUS_ADRERR
 2

	)
97 #i‚de‡
BUS_OBJERR


98  
	#BUS_OBJERR
 3

	)
100 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

101  
	#NSIGBUS
 3

	)
106 #ifdef 
__˝lu•lus


	@/usr/include/sys/model.h

6 #i‚def 
_SYS_MODEL_H


7  
	#_SYS_MODEL_H


	)
9 #¥agm®
idít
 "@(#)model.h 1.21 01/08/31 SMI"

11 #ifdef 
__˝lu•lus


15 #ifde‡
_KERNEL


16 
	~<sys/debug.h
>

19 
	~<sys/iß_defs.h
>

21 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_KMEMUSER
)

30  
	#DATAMODEL_MASK
 0x0FF00000

	)
32  
	#DATAMODEL_ILP32
 0x00100000

	)
33  
	#DATAMODEL_LP64
 0x00200000

	)
35  
	#DATAMODEL_NONE
 0

	)
37 #if 
deföed
(
_LP64
)

38  
	#DATAMODEL_NATIVE
 
DATAMODEL_LP64


	)
39 #ñif 
deföed
(
_ILP32
)

40  
	#DATAMODEL_NATIVE
 
DATAMODEL_ILP32


	)
47 #i‚de‡
_ASM


54 
	tmodñ_t
;

58 #i‡
deföed
(
_KERNEL
Ë&& !deföed(
_ASM
)

64 #i‡
deföed
(
_LP64
)

66  
	#STRUCT_HANDLE
(
°ru˘_ty≥
, 
h™dÀ
) \

67 
	s
{ \

68 
	u
{ \

69 
°ru˘_ty≥
##32 *
m32
; \

70 
°ru˘_ty≥
 *
m64
; \

71 } 
±r
; \

72 
modñ_t
 
modñ
; \

73 } 
h™dÀ
 = { 
NULL
, 
DATAMODEL_ILP32
 }

	)
75  
	#STRUCT_DECL
(
°ru˘_ty≥
, 
h™dÀ
) \

76 
°ru˘_ty≥
 
__
##handle##_buf; \

77 
	`STRUCT_HANDLE
(
°ru˘_ty≥
, 
h™dÀ
)

	)
79  
	#STRUCT_SET_HANDLE
(
h™dÀ
, 
umodñ
, 
addr
) \

80 (
h™dÀ
).
modñ
 = (
modñ_t
)(
umodñ
Ë& 
DATAMODEL_MASK
; \

81 
	`ASSERT
(((
umodñ
Ë& 
DATAMODEL_MASK
Ë!
DATAMODEL_NONE
); \

82 ((
h™dÀ
).
±r
.
m64
Ë(
addr
)

	)
84  
	#STRUCT_INIT
(
h™dÀ
, 
umodñ
) \

85 
	`STRUCT_SET_HANDLE
(
h™dÀ
, 
umodñ
, &
__
##h™dÀ##_buf)

	)
87  
	#STRUCT_SIZE
(
h™dÀ
) \

88 ((
h™dÀ
).
modñ
 =
DATAMODEL_ILP32
 ? \

89  (*(
h™dÀ
).
±r
.
m32
) : \

90  (*(
h™dÀ
).
±r
.
m64
))

	)
98  
	#STRUCT_FADDR
(
h™dÀ
, 
fõld
) \

99 ((
h™dÀ
).
modñ
 =
DATAMODEL_ILP32
 ? \

100 (*)&(
h™dÀ
).
±r
.
m32
->
fõld
 : \

101 &(
h™dÀ
).
±r
.
m64
->
fõld
)

	)
103  
	#STRUCT_FGET
(
h™dÀ
, 
fõld
) \

104 (((
h™dÀ
).
modñ
 =
DATAMODEL_ILP32
) ? \

105 (
h™dÀ
).
±r
.
m32
->
fõld
 : \

106 (
h™dÀ
).
±r
.
m64
->
fõld
)

	)
108  
	#STRUCT_FGETP
(
h™dÀ
, 
fõld
) \

109 ((
h™dÀ
).
modñ
 =
DATAMODEL_ILP32
 ? \

110 (*)(
h™dÀ
).
±r
.
m32
->
fõld
 : \

111 (
h™dÀ
).
±r
.
m64
->
fõld
)

	)
113  
	#STRUCT_FSET
(
h™dÀ
, 
fõld
, 
vÆ
) \

114 ((
h™dÀ
).
modñ
 =
DATAMODEL_ILP32
 ? \

115 ((
h™dÀ
).
±r
.
m32
->
fõld
 = (
vÆ
)) : \

116 ((
h™dÀ
).
±r
.
m64
->
fõld
 = (
vÆ
)))

	)
118  
	#STRUCT_FSETP
(
h™dÀ
, 
fõld
, 
vÆ
) \

119 ((
h™dÀ
).
modñ
 =
DATAMODEL_ILP32
 ? \

120 (Ë((
h™dÀ
).
±r
.
m32
->
fõld
 = (
ˇddr32_t
)(
vÆ
)) : \

121 (Ë((
h™dÀ
).
±r
.
m64
->
fõld
 = (
vÆ
)))

	)
123  
	#STRUCT_BUF
(
h™dÀ
) ((h™dÀ).
±r
.
m64
)

	)
125  
	#SIZEOF_PTR
(
umodñ
) \

126 (((
umodñ
Ë& 
DATAMODEL_MASK
Ë=
DATAMODEL_ILP32
 ? \

127  (
ˇddr32_t
) : \

128  (
ˇddr_t
))

	)
130  
	#SIZEOF_STRUCT
(
°ru˘_ty≥
, 
umodñ
) \

131 (((
umodñ
Ë& 
DATAMODEL_MASK
Ë=
DATAMODEL_ILP32
 ? \

132  (
°ru˘_ty≥
##32) : \

133  (
°ru˘_ty≥
))

	)
137  
	#STRUCT_HANDLE
(
°ru˘_ty≥
, 
h™dÀ
) \

138 
	s
{ \

139 
°ru˘_ty≥
 *
±r
; \

140 } 
h™dÀ
 = { 
NULL
 }

	)
142  
	#STRUCT_DECL
(
°ru˘_ty≥
, 
h™dÀ
) \

143 
°ru˘_ty≥
 
__
##handle##_buf; \

144 
	`STRUCT_HANDLE
(
°ru˘_ty≥
, 
h™dÀ
)

	)
146 #ifdef 
löt


147  
	#STRUCT_SET_HANDLE
(
h™dÀ
, 
umodñ
, 
addr
) \

148 (Ë(
umodñ
); \

149 (
h™dÀ
).
±r
 = (
addr
)

	)
151  
	#STRUCT_SET_HANDLE
(
h™dÀ
, 
umodñ
, 
addr
) \

152 (
h™dÀ
).
±r
 = (
addr
)

	)
155  
	#STRUCT_INIT
(
h™dÀ
, 
umodñ
) \

156 
	`STRUCT_SET_HANDLE
(
h™dÀ
, 
umodñ
, &
__
##h™dÀ##_buf)

	)
158  
	#STRUCT_SIZE
(
h™dÀ
) ( (*(h™dÀ).
±r
))

	)
160  
	#STRUCT_FADDR
(
h™dÀ
, 
fõld
) (&(h™dÀ).
±r
->fõld)

	)
162  
	#STRUCT_FGET
(
h™dÀ
, 
fõld
) ((h™dÀ).
±r
->fõld)

	)
164  
	#STRUCT_FGETP
 
STRUCT_FGET


	)
166  
	#STRUCT_FSET
(
h™dÀ
, 
fõld
, 
vÆ
) ((h™dÀ).
±r
->fõld = (vÆ))

	)
168  
	#STRUCT_FSETP
 
STRUCT_FSET


	)
170  
	#STRUCT_BUF
(
h™dÀ
) ((h™dÀ).
±r
)

	)
172  
	#SIZEOF_PTR
(
umodñ
)  (
ˇddr_t
)

	)
174  
	#SIZEOF_STRUCT
(
°ru˘_ty≥
, 
umodñ
)  (°ru˘_ty≥)

	)
178 #i‡
deföed
(
_LP64
Ë|| deföed(
löt
Ë|| deföed(
__löt
)

180 
_klwp
;

182 
modñ_t
 
lwp_gëd©amodñ
(
_klwp
 *);

183 
modñ_t
 
gë_ud©amodñ
();

193  
	#lwp_gëd©amodñ
(
t
) 
DATAMODEL_ILP32


	)
194  
	#gë_ud©amodñ
() 
DATAMODEL_ILP32


	)
200 #ifdef 
__˝lu•lus


	@/usr/include/sys/proc.h

13 #i‚de‡
_SYS_PROC_H


14  
	#_SYS_PROC_H


	)
16 #¥agm®
idít
 "@(#)proc.h 1.156 06/07/04 SMI"

18 
	~<sys/time.h
>

20 
	~<sys/thªad.h
>

21 
	~<sys/¸ed.h
>

22 
	~<sys/u£r.h
>

23 
	~<sys/w©chpoöt.h
>

24 
	~<sys/timî.h
>

25 #i‡
deföed
(
i386
Ë|| deföed(
__i386
Ë|| deföed(
__ü64
)

26 
	~<sys/£gmít.h
>

28 
	~<sys/uå≠.h
>

29 
	~<sys/modñ.h
>

30 
	~<sys/ªf°r.h
>

31 
	~<sys/èsk.h
>

32 
	~<sys/avl.h
>

33 
	~<sys/r˘l.h
>

35 #ifdef 
__˝lu•lus


42 
	s¥of
 {

43 *
¥_ba£
;

44 
uöçå_t
 
¥_off
;

45 
size_t
 
¥_size
;

46 
uöt32_t
 
¥_sˇÀ
;

47 
¥_ßm∂es
;

56 
	s¥oc
 {

60 
vnode
 *
p_exec
;

61 
as
 *
p_as
;

62 
∂ock
 *
p_lockp
;

63 
kmuãx_t
 
p_¸lock
;

64 
¸ed
 *
p_¸ed
;

68 
p_sw≠˙t
;

69 
p_°©
;

70 
p_wcode
;

71 
ush‹t_t
 
p_pidÊag
;

72 
p_wd©a
;

73 
pid_t
 
p_µid
;

74 
¥oc
 *
p_lök
;

75 
¥oc
 *
p_∑ª¡
;

76 
¥oc
 *
p_chûd
;

77 
¥oc
 *
p_siblög
;

78 
¥oc
 *
p_psiblög
;

79 
¥oc
 *
p_siblög_ns
;

80 
¥oc
 *
p_chûd_ns
;

81 
¥oc
 *
p_√xt
;

82 
¥oc
 *
p_¥ev
;

83 
¥oc
 *
p_√xtofkö
;

84 
¥oc
 *
p_‹ph™
;

85 
¥oc
 *
p_√xt‹ph
;

86 
¥oc
 *
p_pglök
;

87 
¥oc
 *
p_µglök
;

88 
£ss
 *
p_£s•
;

89 
pid
 *
p_pidp
;

90 
pid
 *
p_pgidp
;

94 
kc⁄dv¨_t
 
p_cv
;

95 
kc⁄dv¨_t
 
p_Êag_cv
;

96 
kc⁄dv¨_t
 
p_lw≥xô
;

97 
kc⁄dv¨_t
 
p_hﬁdlwps
;

99 
ush‹t_t
 
p_xÊag
;

102 
uöt_t
 
p_Êag
;

104 
˛ock_t
 
p_utime
;

105 
˛ock_t
 
p_°ime
;

106 
˛ock_t
 
p_cutime
;

107 
˛ock_t
 
p_c°ime
;

108 
avl_åì_t
 *
p_£gac˘
;

109 
ˇddr_t
 
p_bssba£
;

110 
ˇddr_t
 
p_brkba£
;

111 
size_t
 
p_brksize
;

112 
uöt_t
 
p_brk∑geszc
;

116 
k_sig£t_t
 
p_sig
;

117 
k_sig£t_t
 
p_ign‹e
;

118 
k_sig£t_t
 
p_sigöfo
;

119 
sigqueue
 *
p_sigqueue
;

120 
sigqhdr
 *
p_sigqhdr
;

121 
sigqhdr
 *
p_signhdr
;

122 
uch¨_t
 
p_°›sig
;

128 
p_fixÆignmít
;

133 
id_t
 
p_lwpid
;

134 
p_lwp˙t
;

135 
p_lw¥˙t
;

136 
p_lwpd´m⁄
;

137 
p_lwpwaô
;

138 
p_lwpdwaô
;

139 
p_zomb˙t
;

140 
p_zomb_max
;

141 
id_t
 *
p_zomb_tid
;

142 
kthªad_t
 *
p_éi°
;

143 
kthªad_t
 **
p_tidhash
;

144 
uöt64_t
 
p_lgΩ£t
;

146 
uöçå_t
 
p_lgΩªs1
;

147 
uöçå_t
 
p_lgΩªs2
;

151 
k_sig£t_t
 
p_sigmask
;

152 
k_Êt£t_t
 
p_Êtmask
;

153 
vnode
 *
p_åa˚
;

154 
vnode
 *
p_∂i°
;

155 
kthªad_t
 *
p_agíâp
;

156 
w©ched_¨ó
 *
p_w¨ó
;

157 
ul⁄g_t
 
p_nw¨ó
;

158 
w©ched_∑ge
 *
p_w∑ge
;

159 
p_nw∑ge
;

160 
p_m≠˙t
;

162 
¥oc
 *
p_æök
;

163 
kc⁄dv¨_t
 
p_§wch™_cv
;

164 
size_t
 
p_°ksize
;

165 
uöt_t
 
p_°k∑geszc
;

170 
hπime_t
 
p_m°¨t
;

171 
hπime_t
 
p_mãrm
;

172 
hπime_t
 
p_mÃól
;

173 
hπime_t
 
p_ac˘
[
NMSTATES
];

174 
Ãußge
 
p_ru
;

175 
ôimîvÆ
 
p_Ωrof_timî
;

176 
uöçå_t
 
p_Ωrof_cy˛ic
;

177 
uöt_t
 
p_defun˘
;

182 
kmuãx_t
 
p_pÊock
;

183 
¥of
 
p_¥of
;

188 
u£r
 
p_u£r
;

193 
kthªad_t
 *
p_£rvî_thªads
;

194 
do‹_node
 *
p_do‹_li°
;

195 
do‹_node
 *
p_uƒef_li°
;

196 
kc⁄dv¨_t
 
p_£rvî_cv
;

197 
p_uƒef_thªad
;

202 
uch¨_t
 
p_äf_Êags
;

207 
p_audô_d©a
 *p_audit_data;

208 
kthªad_t
 *
p_a¶w±p
;

209 #i‡
deföed
(
i386
Ë|| deföed(
__i386
Ë|| deföed(
__ü64
)

213 
kmuãx_t
 
p_ldéock
;

214 
£g_desc
 *
p_ldt
;

215 
£g_desc
 
p_ldt_desc
;

216 
p_ldéimô
;

218 
size_t
 
p_swrss
;

219 
aio
 *
p_aio
;

220 
ôimî
 **
p_ôimî
;

221 
k_sig£t_t
 
p_nŸifsigs
;

222 
kc⁄dv¨_t
 
p_nŸifcv
;

223 
timeout_id_t
 
p_Æ¨mid
;

224 
uöt_t
 
p_sc_unblocked
;

225 
vnode
 *
p_sc_do‹
;

226 
ˇddr_t
 
p_u§°ack
;

227 
uöt_t
 
p_°k¥Ÿ
;

228 
modñ_t
 
p_modñ
;

229 
lwpch™_d©a
 *
p_l˝
;

233 
kmuãx_t
 
p_l˝_muãxöôlock
;

234 
uå≠_h™dÀr_t
 *
p_uå≠s
;

235 
ªf°r_t
 *
p_c‹efûe
;

236 #i‡
deföed
(
__ü64
)

237 
ˇddr_t
 
p_up°ack
;

238 
size_t
 
p_up°ksize
;

239 
uch¨_t
 
p_iß
;

241 *
p_r˚
;

242 
èsk
 *
p_èsk
;

243 
¥oc
 *
p_èsk¥ev
;

244 
¥oc
 *
p_èsk√xt
;

245 
sc_d©a
 *
p_sched˘l
;

246 
r˘l_£t
 *
p_r˘ls
;

247 
æim64_t
 
p_°k_˘l
;

248 
æim64_t
 
p_fsz_˘l
;

249 
æim64_t
 
p_vmem_˘l
;

250 
æim64_t
 
p_‚o_˘l
;

251 
pid_t
 
p_™˝id
;

252 
ôimîvÆ
 
p_ªÆôimî
;

253 
timeout_id_t
 
p_ôimîid
;

254 } 
	t¥oc_t
;

256 #i‡
deföed
(
__ü64
)

260  
	#_ISA_IA32
 0

	)
261  
	#_ISA_IA64
 1

	)
263  
	#is_ü32_¥o˚ss
(
p
) (’)->
p_iß
 =
_ISA_IA32
)

	)
266  
	#PROC_T


	)
270 
¥oc_t
 *
¥a˘ive
;

274 
¥oc_t
 *
¥oc_sched
;

275 
¥oc_t
 *
¥oc_öô
;

276 
¥oc_t
 *
¥oc_∑geout
;

277 
¥oc_t
 *
¥oc_fsÊush
;

286 
	supcou¡
 {

287 
upcou¡
 *
	gup_√xt
;

288 
uid_t
 
	gup_uid
;

289 
uöt_t
 
	gup_cou¡
;

294 
	spid
 {

295 
	gpid_¥öa˘ive
 :1;

296 
	gpid_pg‹ph™ed
 :1;

297 
	gpid_∑ddög
 :6;

298 
	gpid_¥¶Ÿ
 :24;

299 
pid_t
 
	gpid_id
;

300 
¥oc
 *
	gpid_pglök
;

301 
pid
 *
	gpid_lök
;

302 
uöt_t
 
	gpid_ªf
;

305  
	#p_pgΩ
 
p_pgidp
->
pid_id


	)
306  
	#p_pid
 
p_pidp
->
pid_id


	)
307  
	#p_¶Ÿ
 
p_pidp
->
pid_¥¶Ÿ


	)
308  
	#p_dëached
 
p_pgidp
->
pid_pg‹ph™ed


	)
310  
	#PID_HOLD
(
pidp
) 
	`ASSERT
(
	`MUTEX_HELD
(&
pidlock
)); \

311 ++(
pidp
)->
pid_ªf
;

	)
312  
	#PID_RELE
(
pidp
) 
	`ASSERT
(
	`MUTEX_HELD
(&
pidlock
)); \

313 (
pidp
)->
pid_ªf
 > 1 ? \

314 --(
pidp
)->
pid_ªf
 : 
	`pid_ªÀ
’idp);

	)
320 
	s∂ock
 {

321 
kmuãx_t
 
	g∂_lock
;

323  
	#p_lock
 
p_lockp
->
∂_lock


	)
325 
¥oc_t
 
p0
;

326 
∂ock
 
p0lock
;

327 
pid
 
pid0
;

331  
	#SSLEEP
 1

	)
332  
	#SRUN
 2

	)
333  
	#SZOMB
 3

	)
334  
	#SSTOP
 4

	)
335  
	#SIDL
 5

	)
336  
	#SONPROC
 6

	)
339  
	#CLDPEND
 0x0001

	)
340  
	#CLDCONT
 0x0002

	)
344  
	#XEXITING
 0x0001

	)
348  
	#SSYS
 0x00000001

	)
349  
	#STRC
 0x00000002

	)
350  
	#SITBUSY
 0x00000004

	)
351  
	#SLOAD
 0x00000008

	)
352  
	#SLOCK
 0x00000010

	)
353  
	#SPREXEC
 0x00000020

	)
354  
	#SPROCTR
 0x00000040

	)
355  
	#SPRFORK
 0x00000080

	)
356  
	#SKILLED
 0x00000100

	)
357  
	#SSCONT
 0x00000200

	)
358  
	#SRUNLCL
 0x00000400

	)
359  
	#SBPTADJ
 0x00000800

	)
360  
	#SKILLCL
 0x00001000

	)
361  
	#SUGID
 0x00002000

	)
362  
	#SEXECED
 0x00004000

	)
363  
	#SPASYNC
 0x00008000

	)
364  
	#SJCTL
 0x00010000

	)
365  
	#SNOWAIT
 0x00020000

	)
366  
	#SVFORK
 0x00040000

	)
367  
	#SVFWAIT
 0x00080000

	)
368  
	#EXITLWPS
 0x00100000

	)
369  
	#HOLDFORK
 0x00200000

	)
370  
	#SWAITSIG
 0x00400000

	)
371  
	#HOLDFORK1
 0x00800000

	)
372  
	#COREDUMP
 0x01000000

	)
373  
	#SMSACCT
 0x02000000

	)
374  
	#ASLWP
 0x04000000

	)
375  
	#SPRLOCK
 0x08000000

	)
376  
	#NOCD
 0x10000000

	)
377  
	#HOLDWATCH
 0x20000000

	)
378  
	#SMSFORK
 0x40000000

	)
379  
	#SDOCORE
 0x80000000

	)
382  
	#PTOU
(
p
) (&’)->
p_u£r
)

	)
384  
	#åacög
(
p
, 
sig
) (
	`sigismembî
(&’)->
p_sigmask
, sig))

	)
388  
	#ISSIG
(
t
, 
why
) 
	`ISSIG_FAST
—, 
	`âﬁwp
—), 
	`â›roc
—), why)

	)
398  
	#ISSIG_FAST
(
t
, 
lwp
, 
p
, 
why
) \

399 (
	`ISSIG_PENDING
(
t
, 
lwp
, 
p
Ë&& 
	`issig
(
why
))

	)
401  
	#ISSIG_PENDING
(
t
, 
lwp
, 
p
) \

402 ((
lwp
)->
lwp_cursig
 | \

403 (
p
)->
p_sig
.
__sigbôs
[0] | \

404 (
p
)->
p_sig
.
__sigbôs
[1] | \

405 (
t
)->
t_sig
.
__sigbôs
[0] | \

406 (
t
)->
t_sig
.
__sigbôs
[1] | \

407 (
p
)->
p_°›sig
 | \

408 ((
t
)->
t_¥oc_Êag
 & (
TP_PRSTOP
|
TP_HOLDLWP
|
TP_CHKPT
|
TP_PAUSE
)) | \

409 ((
p
)->
p_Êag
 & (
EXITLWPS
|
SKILLED
|
HOLDFORK1
|
HOLDWATCH
)))

	)
411  
	#ISSTOP
(
sig
) (
u
.
u_sig«l
[sig-1] =
SIG_DFL
 && \

412 
	`sigismembî
(&
°›deÁu…
, 
sig
))

	)
414  
	#ISHOLD
(
p
) (’)->
p_Êag
 & 
HOLDFORK
)

	)
416  
	#MUSTRETURN
(
p
, 
t
) (
	`ISHOLD
’Ë| (t)->
t_a˘ivefd
.
a_°Æe
)

	)
421  
	#ISANOMALOUS
(
p
) (
cuπhªad
->
t_a°Êag
 | \

422 ((
p
)->
p_Êag
 & (
EXITLWPS
|
SKILLED
|
HOLDFORK
|
HOLDFORK1
|
HOLDWATCH
)) | \

423 (
cuπhªad
->
t_¥oc_Êag
 & 
TP_HOLDLWP
))

	)
427  
	#FORREAL
 0

	)
428  
	#JUSTLOOKING
 1

	)
431  
	#SUSPEND_NORMAL
 0

	)
432  
	#SUSPEND_PAUSE
 1

	)
435  
	#NOCLASS
 (-1)

	)
438  
	#TIDHASHSZ
 1024

	)
439  
	#TIDHASH
(
tid
) (—idË& (
TIDHASHSZ
 - 1))

	)
441 #ifde‡
_KERNEL


445 
¥ofû_tick
(
uöçå_t
);

449 
√w¥oc
((*)(), 
id_t
, );

450 
vfwaô
(
pid_t
);

451 
‰ì¥oc
(
¥oc_t
 *);

452 
£åun
(
kthªad_t
 *);

453 
£åun_locked
(
kthªad_t
 *);

454 
exô
(, );

455 
¥oc_exô
(, );

456 
¥oc_is_exôög
(
¥oc_t
 *);

457 
ªlvm
();

458 
add_ns
(
¥oc_t
 *,Öroc_t *);

459 
dñëe_ns
(
¥oc_t
 *,Öroc_t *);

460 
upcou¡_öc
(
uid_t
);

461 
upcou¡_dec
(
uid_t
);

462 
upcou¡_gë
(
uid_t
);

463 #i‡
deföed
(
i386
Ë|| deföed(
__i386
Ë|| deföed(
__ü64
)

464 
ldt_dup
(
¥oc_t
 *,Öroc_t *);

467 
sig˛d
(
¥oc_t
 *, 
sigqueue_t
 *);

468 
sig˛d_dñëe
(
k_sigöfo_t
 *);

469 
sig˛d_ªpo°
();

470 
fsig
(
k_sig£t_t
 *, 
kthªad_t
 *);

471 
psig
();

472 
°›
(, );

473 
°›_⁄_Áu…
(
uöt_t
, 
k_sigöfo_t
 *);

474 
issig
();

475 
job°›≥d
(
¥oc_t
 *);

476 
psig«l
(
¥oc_t
 *, );

477 
sigt›roc
(
¥oc_t
 *, 
kthªad_t
 *, );

478 
å≠sig
(
k_sigöfo_t
 *, );

479 
ót_sig«l
(
kthªad_t
 *
t
, 
sig
);

481 
pid_£tmö
();

482 
pid_t
 
pid_assign
(
¥oc_t
 *);

483 
pid_ªÀ
(
pid
 *);

484 
pid_exô
(
¥oc_t
 *);

485 
¥oc_íåy_‰ì
(
pid
 *);

486 
¥oc_t
 *
¥föd
(
pid_t
);

487 
¥oc_t
 *
pgföd
(
pid_t
);

488 
¥oc_t
 *
•æock
(
pid_t
);

489 
•ru∆ock
(
¥oc_t
 *);

490 
pid_öô
();

491 
¥oc_t
 *
pid_íåy
();

492 
pid_¶Ÿ
(
¥oc_t
 *);

493 
sig«l
(
pid_t
, );

494 
¥sig«l
(
pid
 *, );

496 
pgsig«l
(
pid
 *, );

497 
pgjoö
(
¥oc_t
 *, 
pid
 *);

498 
pg¸óã
(
¥oc_t
 *);

499 
pgexô
(
¥oc_t
 *);

500 
pgdëach
(
¥oc_t
 *);

501 
pgmembîs
(
pid_t
);

503 
öô_m°©e
(
kthªad_t
 *, );

504 
√w_m°©e
(
kthªad_t
 *, );

505 
ª°‹e_m°©e
(
kthªad_t
 *);

506 
ãrm_m°©e
(
kthªad_t
 *);

507 
e°im©e_mßc˘
(
kthªad_t
 *, 
hπime_t
);

508 
dißbÀ_mßc˘
(
¥oc_t
 *);

510 
uöt_t
 
˝u_deˇy
(uöt_t, 
˛ock_t
);

511 
uöt_t
 
˝u_grow
(uöt_t, 
˛ock_t
);

513 
£t_¥oc_¥e_sys
(
¥oc_t
 *
p
);

514 
£t_¥oc_po°_sys
(
¥oc_t
 *
p
);

515 
£t_¥oc_sys
(
¥oc_t
 *
p
);

516 
£t_¥oc_a°
(
¥oc_t
 *
p
);

517 
£t_Æl_¥oc_sys
();

521 
kthªad_t
 *
thªad_¸óã
(

522 
ˇddr_t
 
°k
,

523 
size_t
 
°ksize
,

524 (*
¥oc
)(),

525 
ˇddr_t
 
¨g
,

526 
size_t
 
Àn
,

527 
¥oc_t
 *
µ
,

528 
°©e
,

529 
¥i
);

530 
thªad_exô
();

531 
thªad_‰ì
(
kthªad_t
 *);

532 
thªad_ªÀ
(
kthªad_t
 *);

533 
thªad_joö
(
kt_did_t
);

534 
ª≠î
();

535 
ö°Æl˘x
(
kthªad_t
 *, *, (*)(), (*)(),

537 
ªmove˘x
(
kthªad_t
 *, *, (*)(), (*)(),

539 
ßve˘x
(
kthªad_t
 *);

540 
ª°‹e˘x
(
kthªad_t
 *);

541 
f‹k˘x
(
kthªad_t
 *, kthread_t *);

542 
lwp_¸óã˘x
(
kthªad_t
 *, kthread_t *);

543 
‰ì˘x
(
kthªad_t
 *, );

544 
kthªad_t
 *
thªad_u≈ö
();

545 
thªad_¸óã_öå
(
˝u
 *);

546 
thªad_öô
();

547 
thªad_lﬂd
(
kthªad_t
 *, (*)(), 
ˇddr_t
, 
size_t
);

549 
tsd_¸óã
(
uöt_t
 *, (*)(*));

550 
tsd_de°roy
(
uöt_t
 *);

551 *
tsd_gë¸óã
(
uöt_t
 *, (*)(*), *(*)());

552 *
tsd_gë
(
uöt_t
);

553 
tsd_£t
(
uöt_t
, *);

554 
tsd_exô
();

555 *
tsd_agít_gë
(
kthªad_t
 *, 
uöt_t
);

556 
tsd_agít_£t
(
kthªad_t
 *, 
uöt_t
, *);

560 
klwp_t
 *
lwp_¸óã
(

561 (*
¥oc
)(),

562 
ˇddr_t
 
¨g
,

563 
size_t
 
Àn
,

564 
¥oc_t
 *
p
,

565 
°©e
,

566 
¥i
,

567 c⁄° 
k_sig£t_t
 *
smask
,

568 
cid
,

569 
id_t
 
lwpid
);

570 
kthªad_t
 *
idtŸ
(
¥oc_t
 *, 
id_t
);

571 
lwp_zombõ_ödex
(
¥oc_t
 *, , 
id_t
);

572 
lwp_hash_ö
(
¥oc_t
 *, 
kthªad_t
 *);

573 
lwp_hash_out
(
¥oc_t
 *, 
kthªad_t
 *);

574 
lwp_¸óã_d⁄e
(
kthªad_t
 *);

575 
lwp_exô
();

576 
lwp_˛ónup
();

577 
lwp_su•íd
(
kthªad_t
 *, *);

578 
lwp_c⁄töue
(
kthªad_t
 *);

579 
hﬁdlwp
();

580 
°›lwp
();

581 
hﬁdlwps
();

582 
hﬁdw©ch
();

583 
pokñwps
(
¥oc_t
 *);

584 
c⁄töuñwps
(
¥oc_t
 *);

585 
exôlwps
();

586 
klwp_t
 *
f‹klwp
(klwp_à*, 
¥oc_t
 *, 
id_t
);

587 
sigwaôög_£nd
(
kmuãx_t
 *);

588 
lwp_lﬂd
(
klwp_t
 *, 
gªg£t_t
);

589 
lwp_£åvÆ
(
klwp_t
 *, , );

590 
lwp_f‹kªgs
(
klwp_t
 *, klwp_t *);

591 
lwp_‰ìªgs
(
klwp_t
 *, );

592 
ˇddr_t
 
lwp_°k_öô
(
klwp_t
 *, caddr_t);

593 
lwp_°k_föi
(
klwp_t
 *);

594 
lwp_πt
();

600 
sigq‰ì
(
¥oc_t
 *);

601 
sigöfo‰ì
(
sigqueue_t
 *);

602 
sigdeq
(
¥oc_t
 *, 
kthªad_t
 *, , 
sigqueue_t
 **);

603 
sigdñq
(
¥oc_t
 *, 
kthªad_t
 *, );

604 
sigaddq
(
¥oc_t
 *, 
kthªad_t
 *, 
k_sigöfo_t
 *, );

605 
sigaddqa
(
¥oc_t
 *, 
kthªad_t
 *, 
sigqueue_t
 *);

606 
sigq£nd
(, 
¥oc_t
 *, 
kthªad_t
 *, 
sigqueue_t
 *);

607 
sigdupq
(
¥oc_t
 *,Öroc_t *);

608 
sigwûlqueue
(, );

609 
sigqhdr_t
 *
sigqhdøŒoc
(
size_t
, 
uöt_t
);

610 
sigqueue_t
 *
sigqÆloc
(
sigqhdr_t
 *);

611 
sigqhdr‰ì
(
sigqhdr_t
 *);

612 
sigqueue_t
 *
sig≠≥nd
(
k_sig£t_t
 *, sigqueue_t *,

613 
k_sig£t_t
 *, 
sigqueue_t
 *);

614 
sigqueue_t
 *
sig¥ïíd
(
k_sig£t_t
 *, sigqueue_t *,

615 
k_sig£t_t
 *, 
sigqueue_t
 *);

616 
csigtimedwaô
(
sig£t_t
 *, 
sigöfo_t
 *, 
time•ec
 *, *);

617 
wöfo
(
¥oc_t
 *, 
k_sigöfo_t
 *, );

618 
w°©
(, );

619 
£ndsig
(, 
k_sigöfo_t
 *, (*)());

620 #ifde‡
_SYSCALL32_IMPL


621 
£ndsig32
(, 
k_sigöfo_t
 *, (*)());

626 #ifdef 
__˝lu•lus


	@/usr/include/sys/time.h

19 #i‚de‡
_SYS_TIME_H


20  
	#_SYS_TIME_H


	)
22 #¥agm®
idít
 "@(#)time.h 2.72 05/01/24 SMI"

24 
	~<sys/„©uª_ã°s.h
>

31 #ifdef 
__˝lu•lus


35 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

36 
deföed
(
__EXTENSIONS__
Ë|| 
	$deföed
(
_XPG4_2
)

37 #i‚def 
_ASM


39 #i‡!
	`deföed
(
_TIME_T
Ë|| 
__˝lu•lus
 >= 199711L

40  
	#_TIME_T


	)
41 
	ttime_t
;

44 #i‚def 
_SUSECONDS_T


45  
	#_SUSECONDS_T


	)
46 
	tsu£c⁄ds_t
;

49 
	stimevÆ
 {

50 
time_t
 
tv_£c
;

51 
su£c⁄ds_t
 
tv_u£c
;

54 #i‡
	`deföed
(
_SYSCALL32
)

56 
	~<sys/ty≥s32.h
>

58  
	#TIMEVAL32_TO_TIMEVAL
(
tv
, 
tv32
) { \

59 (
tv
)->
tv_£c
 = (
time_t
)(
tv32
)->tv_sec; \

60 (
tv
)->
tv_u£c
 = (
tv32
)->tv_usec; \

61 
	}

	)
}

63  
	#TIMEVAL_TO_TIMEVAL32
(
tv32
, 
tv
) { \

64 (
tv32
)->
tv_£c
 = (
time32_t
)(
tv
)->tv_sec; \

65 (
tv32
)->
tv_u£c
 = (
tv
)->tv_usec; \

66 }

	)
68  
	#TIME32_MAX
 
INT32_MAX


	)
69  
	#TIME32_MIN
 
INT32_MIN


	)
71  
	#TIMEVAL_OVERFLOW
(
tv
) \

72 ((
tv
)->
tv_£c
 < 
TIME32_MIN
 || (tv)->tv_£¯> 
TIME32_MAX
)

	)
79 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

80 
	$deföed
(
__EXTENSIONS__
)

81 #i‚def 
_ASM


82 
	stimez⁄e
 {

83 
tz_möuãswe°
;

84 
tz_d°time
;

90 #ifdef 
__˝lu•lus


91 
	}
}

99 #i‚def 
_ASM


100 
	~<sys/ty≥s.h
>

103 #ifdef 
__˝lu•lus


107 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

108 
	$deföed
(
__EXTENSIONS__
)

110  
	#DST_NONE
 0

	)
111  
	#DST_USA
 1

	)
112  
	#DST_AUST
 2

	)
113  
	#DST_WET
 3

	)
114  
	#DST_MET
 4

	)
115  
	#DST_EET
 5

	)
116  
	#DST_CAN
 6

	)
117  
	#DST_GB
 7

	)
118  
	#DST_RUM
 8

	)
119  
	#DST_TUR
 9

	)
120  
	#DST_AUSTALT
 10

	)
125  
	#timîis£t
(
tvp
) (—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)
126  
	#timîcmp
(
tvp
, 
uvp
, 
cmp
) \

127 (((
tvp
)->
tv_£c
 =(
uvp
)->tv_sec) ? \

129 ((
tvp
)->
tv_u£c
 
	`cmp
 (
uvp
)->tv_usec) : \

131 ((
tvp
)->
tv_£c
 
	`cmp
 (
uvp
)->tv_£c))

	)
133  
	#timî˛ór
(
tvp
) (tvp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0

	)
137 #i‡(!
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

138 
	`deföed
(
_XPG4_2
Ë|| 
	$deföed
(
__EXTENSIONS__
)

143  
	#ITIMER_REAL
 0

	)
144  
	#ITIMER_VIRTUAL
 1

	)
145  
	#ITIMER_PROF
 2

	)
148  
	#ITIMER_REALPROF
 3

	)
152 #i‚def 
_ASM


153 
	sôimîvÆ
 {

154 
timevÆ
 
ô_öãrvÆ
;

155 
timevÆ
 
ô_vÆue
;

158 #i‡
	`deföed
(
_SYSCALL32
)

160 
	sôimîvÆ32
 {

161 
timevÆ32
 
ô_öãrvÆ
;

162 
timevÆ32
 
ô_vÆue
;

165  
	#ITIMERVAL32_TO_ITIMERVAL
(
ôv
, 
ôv32
) { \

166 
	`TIMEVAL32_TO_TIMEVAL
(&(
ôv
)->
ô_öãrvÆ
, &(
ôv32
)->it_interval); \

167 
	`TIMEVAL32_TO_TIMEVAL
(&(
ôv
)->
ô_vÆue
, &(
ôv32
)->it_value); \

168 
	}

	)
}

170  
	#ITIMERVAL_TO_ITIMERVAL32
(
ôv32
, 
ôv
) { \

171 
	`TIMEVAL_TO_TIMEVAL32
(&(
ôv32
)->
ô_öãrvÆ
, &(
ôv
)->it_interval); \

172 
	`TIMEVAL_TO_TIMEVAL32
(&(
ôv32
)->
ô_vÆue
, &(
ôv
)->it_value); \

173 }

	)
175  
	#ITIMERVAL_OVERFLOW
(
ôv
) \

176 (
	`TIMEVAL_OVERFLOW
(&(
ôv
)->
ô_öãrvÆ
) || \

177 
	`TIMEVAL_OVERFLOW
(&(
ôv
)->
ô_vÆue
))

	)
184 #i‡(!
deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

185 
	$deföed
(
__EXTENSIONS__
)

189  
	#SEC
 1

	)
190  
	#MILLISEC
 1000

	)
191  
	#MICROSEC
 1000000

	)
192  
	#NANOSEC
 1000000000

	)
196 #i‚def 
_ASM


201 
l⁄gl⁄g_t
 
	thπime_t
;

203 #ifde‡
_KERNEL


205 
	~<sys/time_im∂.h
>

206 
	~<sys/muãx.h
>

208 
tick_≥r_m£c
;

209 
m£c_≥r_tick
;

210 
u£c_≥r_tick
;

211 
n£c_≥r_tick
;

217  
	#TICK_TO_SEC
(
tick
) (—ickË/ 
hz
)

	)
218  
	#SEC_TO_TICK
(
£c
) ((£cË* 
hz
)

	)
220  
	#TICK_TO_MSEC
(
tick
) \

221 (
m£c_≥r_tick
 ? (
tick
Ë* m£c_≥r_tick : (tickË/ 
tick_≥r_m£c
)

	)
222  
	#MSEC_TO_TICK
(
m£c
) \

223 (
m£c_≥r_tick
 ? (
m£c
Ë/ m£c_≥r_tick : (m£cË* 
tick_≥r_m£c
)

	)
224  
	#MSEC_TO_TICK_ROUNDUP
(
m£c
) \

225 (
m£c_≥r_tick
 ? \

226 ((
m£c
Ë=0 ? 0 : ((m£cË- 1Ë/ 
m£c_≥r_tick
 + 1) : \

227 (
m£c
Ë* 
tick_≥r_m£c
)

	)
229  
	#TICK_TO_USEC
(
tick
) (—ickË* 
u£c_≥r_tick
)

	)
230  
	#USEC_TO_TICK
(
u£c
) ((u£cË/ 
u£c_≥r_tick
)

	)
231  
	#USEC_TO_TICK_ROUNDUP
(
u£c
) \

232 ((
u£c
Ë=0 ? 0 : 
	`USEC_TO_TICK
((u£cË- 1Ë+ 1)

	)
234  
	#TICK_TO_NSEC
(
tick
) (—ickË* 
n£c_≥r_tick
)

	)
235  
	#NSEC_TO_TICK
(
n£c
) (“£cË/ 
n£c_≥r_tick
)

	)
236  
	#NSEC_TO_TICK_ROUNDUP
(
n£c
) \

237 ((
n£c
Ë=0 ? 0 : 
	`NSEC_TO_TICK
(“£cË- 1Ë+ 1)

	)
239  
	#TICK_TO_TIMEVAL
(
tick
, 
tvp
) { \

240 
˛ock_t
 
__tm±ck
 = (
tick
); \

241 (
tvp
)->
tv_£c
 = 
	`TICK_TO_SEC
(
__tm±ck
); \

242 (
tvp
)->
tv_u£c
 = 
	`TICK_TO_USEC
(
__tm±ck
 - 
	`SEC_TO_TICK
(—vp)->
tv_£c
)); \

243 
	}

	)
}

245  
	#TICK_TO_TIMEVAL32
(
tick
, 
tvp
) { \

246 
˛ock_t
 
__tm±ck
 = (
tick
); \

247 
time_t
 
__tm±m
 = 
	`TICK_TO_SEC
(
__tm±ck
); \

248 (
tvp
)->
tv_£c
 = (
time32_t
)
__tm±m
; \

249 (
tvp
)->
tv_u£c
 = 
	`TICK_TO_USEC
(
__tm±ck
 - 
	`SEC_TO_TICK
(
__tm±m
)); \

250 }

	)
252  
	#TICK_TO_TIMESTRUC
(
tick
, 
t•
) { \

253 
˛ock_t
 
__tm±ck
 = (
tick
); \

254 (
t•
)->
tv_£c
 = 
	`TICK_TO_SEC
(
__tm±ck
); \

255 (
t•
)->
tv_n£c
 = 
	`TICK_TO_NSEC
(
__tm±ck
 - 
	`SEC_TO_TICK
(—•)->
tv_£c
)); \

256 }

	)
258  
	#TICK_TO_TIMESTRUC32
(
tick
, 
t•
) { \

259 
˛ock_t
 
__tm±ck
 = (
tick
); \

260 
time_t
 
__tm±m
 = 
	`TICK_TO_SEC
(
__tm±ck
); \

261 (
t•
)->
tv_£c
 = (
time32_t
)
__tm±m
; \

262 (
t•
)->
tv_n£c
 = 
	`TICK_TO_NSEC
(
__tm±ck
 - 
	`SEC_TO_TICK
(
__tm±m
)); \

263 }

	)
265  
	#TIMEVAL_TO_TICK
(
tvp
) \

266 (
	`SEC_TO_TICK
((
tvp
)->
tv_£c
Ë+ 
	`USEC_TO_TICK
(—vp)->
tv_u£c
))

	)
268  
	#TIMESTRUC_TO_TICK
(
t•
) \

269 (
	`SEC_TO_TICK
((
t•
)->
tv_£c
Ë+ 
	`NSEC_TO_TICK
(—•)->
tv_n£c
))

	)
271 
	stodöfo
 {

272 
	mtod_£c
;

273 
	mtod_mö
;

274 
	mtod_hour
;

275 
	mtod_dow
;

276 
	mtod_day
;

277 
	mtod_m⁄th
;

278 
	mtod_yór
;

279 } 
	ttodöfo_t
;

281 
öt64_t
 
timedñè
;

282 
timech™ged
;

283 
tod_√edsync
;

284 
kmuãx_t
 
tod_lock
;

285 
time°ruc_t
 
hª°ime
;

287 
time°ruc_t
 
tod_gë
();

288 
tod_£t
(
time°ruc_t
);

289 
£t_hª°ime
(
time°ruc_t
 *);

290 
todöfo_t
 
utc_to_tod
(
time_t
);

291 
time_t
 
tod_to_utc
(
todöfo_t
);

292 
hr_˛ock_lock
();

293 
hr_˛ock_u∆ock
();

294 
hπime_t
 
gëhπime
();

295 
hπime_t
 
gëhπime_unsˇÀd
();

296 
hπime_t
 
gëhπime_max
();

297 
sˇÀhπime
(
hπime_t
 *);

298 
gëhª°ime
(
time•ec_t
 *);

299 
time_t
 
gëhª°ime_£c
();

300 
gëhª°ime_œ°tick
(
time•ec_t
 *);

301 
hπ2ts
(
hπime_t
, 
time°ruc_t
 *);

302 
hπime_t
 
ts2hπ
(
time°ruc_t
 *);

303 
hπ2tv
(
hπime_t
, 
timevÆ
 *);

304 
hπime_t
 
tv2hπ
(
timevÆ
 *);

305 
ôimîfix
(
timevÆ
 *, );

306 
ôimîde¸
(
ôimîvÆ
 *, );

307 
timevÆadd
(
timevÆ
 *, timeval *);

308 
timevÆsub
(
timevÆ
 *, timeval *);

309 
timevÆfix
(
timevÆ
 *);

311 #i‡
deföed
(
_SYSCALL32
)

312 
hπ2ts32
(
hπime_t
, 
time°ruc32_t
 *);

317 #i‡(!
deföed
(
_KERNEL
Ë&& !deföed(
_POSIX_C_SOURCE
) && \

318 !
deföed
(
_XOPEN_SOURCE
)Ë|| 
	$deföed
(
__EXTENSIONS__
)

319 #i‡
	`deföed
(
__STDC__
)

320 
	`adjtime
(
timevÆ
 *, timeval *);

322 
	`adjtime
();

326 #i‡(!
	`deföed
(
_KERNEL
Ë&& !deföed(
_POSIX_C_SOURCE
) && \

327 !
	`deföed
(
_XOPEN_SOURCE
)Ë|| deföed(
__EXTENSIONS__
) || \

328 
	$deföed
(
_ATFILE_SOURCE
)

329 #i‡
	`deföed
(
__STDC__
)

330 
	`futimeßt
(, c⁄° *, c⁄° 
timevÆ
 *);

332 
	`futimeßt
();

336 #i‡(!
	`deföed
(
_KERNEL
Ë&& !deföed(
_POSIX_C_SOURCE
) && \

337 !
	`deföed
(
_XOPEN_SOURCE
)Ë|| deföed(
__EXTENSIONS__
Ë|| 
	$deföed
(
_XPG4_2
)

339 #i‡
	`deföed
(
__STDC__
)

341 
	`gëôimî
(, 
ôimîvÆ
 *);

342 
	`utimes
(c⁄° *, c⁄° 
timevÆ
 *);

343 #i‡
	`deföed
(
_XPG4_2
)

344 
	`£tôimî
(, c⁄° 
ôimîvÆ
 *, itimerval *);

346 
	`£tôimî
(, 
ôimîvÆ
 *, itimerval *);

351 
	`gëtimî
();

352 
	`£âimî
();

353 
	`utimes
();

371 #i‡(!
	`deföed
(
_KERNEL
Ë&& !deföed(
_POSIX_C_SOURCE
) && \

372 !
	`deföed
(
_XOPEN_SOURCE
)Ë|| 
	$deföed
(
__EXTENSIONS__
)

374 #i‡
	`deföed
(
__STDC__
)

375 #i‡
	`deföed
(
_SVID_GETTOD
)

376 
	`£âimeofday
(
timevÆ
 *);

378 
	`£âimeofday
(
timevÆ
 *, *);

380 
hπime_t
 
	`gëhπime
();

381 
hπime_t
 
	`gëhrvtime
();

383 
	`£âimeofday
();

384 
hπime_t
 
	`gëhπime
();

385 
hπime_t
 
	`gëhrvtime
();

390 #i‡(!
	`deföed
(
_KERNEL
Ë&& !deföed(
_POSIX_C_SOURCE
) && \

391 !
	`deföed
(
_XOPEN_SOURCE
)Ë|| deföed(
__EXTENSIONS__
) || \

392 
	$deföed
(
_XPG4_2
)

394 #i‡
	`deföed
(
__STDC__
)

395 #i‡
	`deföed
(
_SVID_GETTOD
)

396 
	`gëtimeofday
(
timevÆ
 *);

398 
	`gëtimeofday
(
timevÆ
 *, *);

401 
	`gëtimeofday
();

417 #i‡(!
	`deföed
(
_KERNEL
Ë&& !deföed(
_POSIX_C_SOURCE
) && \

418 !
	`deföed
(
_XOPEN_SOURCE
)Ë|| 
	$deföed
(
__EXTENSIONS__
)

419 
	~<time.h
>

429 #i‡(!
	`deföed
(
_KERNEL
Ë&& !deföed(
_POSIX_C_SOURCE
) && \

430 !
	`deföed
(
_XOPEN_SOURCE
)Ë|| deföed(
__EXTENSIONS__
) || \

431 
	$deföed
(
_XPG4_2
)

432 
	~<sys/£À˘.h
>

437 #ifdef 
__˝lu•lus


438 
	}
}

	@/usr/include/sys/time_std_impl.h

16 #i‚de‡
_SYS_TIME_STD_IMPL_H


17  
	#_SYS_TIME_STD_IMPL_H


	)
19 #¥agm®
idít
 "@(#)time_std_impl.h 1.2 98/02/13 SMI"

21 
	~<sys/„©uª_ã°s.h
>

23 #ifdef 
__˝lu•lus


27 #i‚def 
_TIME_T


28  
	#_TIME_T


	)
29 
	ttime_t
;

32 
	s_time•ec
 {

33 
time_t
 
	g__tv_£c
;

34 
	g__tv_n£c
;

35 } 
	t_time•ec_t
;

37 
_time•ec
 
	t_time°ruc_t
;

39 #ifdef 
__˝lu•lus


	@/usr/include/sys/unistd.h

22 #i‚de‡
_SYS_UNISTD_H


23  
	#_SYS_UNISTD_H


	)
25 #¥agm®
idít
 "@(#)unistd.h 1.39 01/07/29 SMI"

27 
	~<sys/„©uª_ã°s.h
>

29 #ifdef 
__˝lu•lus


35  
	#_CS_PATH
 65

	)
41  
	#_CS_LFS_CFLAGS
 68

	)
42  
	#_CS_LFS_LDFLAGS
 69

	)
43  
	#_CS_LFS_LIBS
 70

	)
44  
	#_CS_LFS_LINTFLAGS
 71

	)
46  
	#_CS_LFS64_CFLAGS
 72

	)
47  
	#_CS_LFS64_LDFLAGS
 73

	)
48  
	#_CS_LFS64_LIBS
 74

	)
49  
	#_CS_LFS64_LINTFLAGS
 75

	)
52  
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 700

	)
53  
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 701

	)
54  
	#_CS_XBS5_ILP32_OFF32_LIBS
 702

	)
55  
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 703

	)
56  
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 705

	)
57  
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 706

	)
58  
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 707

	)
59  
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 708

	)
60  
	#_CS_XBS5_LP64_OFF64_CFLAGS
 709

	)
61  
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 710

	)
62  
	#_CS_XBS5_LP64_OFF64_LIBS
 711

	)
63  
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 712

	)
64  
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 713

	)
65  
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 714

	)
66  
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 715

	)
67  
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 716

	)
73  
	#_SC_ARG_MAX
 1

	)
74  
	#_SC_CHILD_MAX
 2

	)
75  
	#_SC_CLK_TCK
 3

	)
76  
	#_SC_NGROUPS_MAX
 4

	)
77  
	#_SC_OPEN_MAX
 5

	)
78  
	#_SC_JOB_CONTROL
 6

	)
79  
	#_SC_SAVED_IDS
 7

	)
80  
	#_SC_VERSION
 8

	)
82  
	#_SC_PASS_MAX
 9

	)
83  
	#_SC_LOGNAME_MAX
 10

	)
84  
	#_SC_PAGESIZE
 11

	)
85  
	#_SC_XOPEN_VERSION
 12

	)
87  
	#_SC_NPROCESSORS_CONF
 14

	)
88  
	#_SC_NPROCESSORS_ONLN
 15

	)
89  
	#_SC_STREAM_MAX
 16

	)
90  
	#_SC_TZNAME_MAX
 17

	)
92  
	#_SC_AIO_LISTIO_MAX
 18

	)
93  
	#_SC_AIO_MAX
 19

	)
94  
	#_SC_AIO_PRIO_DELTA_MAX
 20

	)
95  
	#_SC_ASYNCHRONOUS_IO
 21

	)
96  
	#_SC_DELAYTIMER_MAX
 22

	)
97  
	#_SC_FSYNC
 23

	)
98  
	#_SC_MAPPED_FILES
 24

	)
99  
	#_SC_MEMLOCK
 25

	)
100  
	#_SC_MEMLOCK_RANGE
 26

	)
101  
	#_SC_MEMORY_PROTECTION
 27

	)
102  
	#_SC_MESSAGE_PASSING
 28

	)
103  
	#_SC_MQ_OPEN_MAX
 29

	)
104  
	#_SC_MQ_PRIO_MAX
 30

	)
105  
	#_SC_PRIORITIZED_IO
 31

	)
106  
	#_SC_PRIORITY_SCHEDULING
 32

	)
107  
	#_SC_REALTIME_SIGNALS
 33

	)
108  
	#_SC_RTSIG_MAX
 34

	)
109  
	#_SC_SEMAPHORES
 35

	)
110  
	#_SC_SEM_NSEMS_MAX
 36

	)
111  
	#_SC_SEM_VALUE_MAX
 37

	)
112  
	#_SC_SHARED_MEMORY_OBJECTS
 38

	)
113  
	#_SC_SIGQUEUE_MAX
 39

	)
114  
	#_SC_SIGRT_MIN
 40

	)
115  
	#_SC_SIGRT_MAX
 41

	)
116  
	#_SC_SYNCHRONIZED_IO
 42

	)
117  
	#_SC_TIMERS
 43

	)
118  
	#_SC_TIMER_MAX
 44

	)
120  
	#_SC_2_C_BIND
 45

	)
121  
	#_SC_2_C_DEV
 46

	)
122  
	#_SC_2_C_VERSION
 47

	)
123  
	#_SC_2_FORT_DEV
 48

	)
124  
	#_SC_2_FORT_RUN
 49

	)
125  
	#_SC_2_LOCALEDEF
 50

	)
126  
	#_SC_2_SW_DEV
 51

	)
127  
	#_SC_2_UPE
 52

	)
128  
	#_SC_2_VERSION
 53

	)
129  
	#_SC_BC_BASE_MAX
 54

	)
130  
	#_SC_BC_DIM_MAX
 55

	)
131  
	#_SC_BC_SCALE_MAX
 56

	)
132  
	#_SC_BC_STRING_MAX
 57

	)
133  
	#_SC_COLL_WEIGHTS_MAX
 58

	)
134  
	#_SC_EXPR_NEST_MAX
 59

	)
135  
	#_SC_LINE_MAX
 60

	)
136  
	#_SC_RE_DUP_MAX
 61

	)
137  
	#_SC_XOPEN_CRYPT
 62

	)
138  
	#_SC_XOPEN_ENH_I18N
 63

	)
139  
	#_SC_XOPEN_SHM
 64

	)
142  
	#_SC_2_CHAR_TERM
 66

	)
143  
	#_SC_XOPEN_XCU_VERSION
 67

	)
146  
	#_SC_ATEXIT_MAX
 76

	)
147  
	#_SC_IOV_MAX
 77

	)
148  
	#_SC_XOPEN_UNIX
 78

	)
149  
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)
152 #i‚de‡
_SC_T_IOV_MAX


153  
	#_SC_T_IOV_MAX
 79

	)
156  
	#_SC_PHYS_PAGES
 500

	)
157  
	#_SC_AVPHYS_PAGES
 501

	)
163  
	#_SC_COHER_BLKSZ
 503

	)
164  
	#_SC_SPLIT_CACHE
 504

	)
165  
	#_SC_ICACHE_SZ
 505

	)
166  
	#_SC_DCACHE_SZ
 506

	)
167  
	#_SC_ICACHE_LINESZ
 507

	)
168  
	#_SC_DCACHE_LINESZ
 508

	)
169  
	#_SC_ICACHE_BLKSZ
 509

	)
170  
	#_SC_DCACHE_BLKSZ
 510

	)
171  
	#_SC_DCACHE_TBLKSZ
 511

	)
172  
	#_SC_ICACHE_ASSOC
 512

	)
173  
	#_SC_DCACHE_ASSOC
 513

	)
175  
	#_SC_MAXPID
 514

	)
176  
	#_SC_STACK_PROT
 515

	)
177  
	#_SC_NPROCESSORS_MAX
 516

	)
178  
	#_SC_CPUID_MAX
 517

	)
184  
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 568

	)
185  
	#_SC_GETGR_R_SIZE_MAX
 569

	)
186  
	#_SC_GETPW_R_SIZE_MAX
 570

	)
187  
	#_SC_LOGIN_NAME_MAX
 571

	)
188  
	#_SC_THREAD_KEYS_MAX
 572

	)
189  
	#_SC_THREAD_STACK_MIN
 573

	)
190  
	#_SC_THREAD_THREADS_MAX
 574

	)
191  
	#_SC_TTY_NAME_MAX
 575

	)
192  
	#_SC_THREADS
 576

	)
193  
	#_SC_THREAD_ATTR_STACKADDR
 577

	)
194  
	#_SC_THREAD_ATTR_STACKSIZE
 578

	)
195  
	#_SC_THREAD_PRIORITY_SCHEDULING
 579

	)
196  
	#_SC_THREAD_PRIO_INHERIT
 580

	)
197  
	#_SC_THREAD_PRIO_PROTECT
 581

	)
198  
	#_SC_THREAD_PROCESS_SHARED
 582

	)
199  
	#_SC_THREAD_SAFE_FUNCTIONS
 583

	)
202  
	#_SC_XOPEN_LEGACY
 717

	)
203  
	#_SC_XOPEN_REALTIME
 718

	)
204  
	#_SC_XOPEN_REALTIME_THREADS
 719

	)
205  
	#_SC_XBS5_ILP32_OFF32
 720

	)
206  
	#_SC_XBS5_ILP32_OFFBIG
 721

	)
207  
	#_SC_XBS5_LP64_OFF64
 722

	)
208  
	#_SC_XBS5_LPBIG_OFFBIG
 723

	)
213  
	#_PC_LINK_MAX
 1

	)
214  
	#_PC_MAX_CANON
 2

	)
215  
	#_PC_MAX_INPUT
 3

	)
216  
	#_PC_NAME_MAX
 4

	)
217  
	#_PC_PATH_MAX
 5

	)
218  
	#_PC_PIPE_BUF
 6

	)
219  
	#_PC_NO_TRUNC
 7

	)
220  
	#_PC_VDISABLE
 8

	)
221  
	#_PC_CHOWN_RESTRICTED
 9

	)
223  
	#_PC_ASYNC_IO
 10

	)
224  
	#_PC_PRIO_IO
 11

	)
225  
	#_PC_SYNC_IO
 12

	)
233  
	#_PC_FILESIZEBITS
 67

	)
234  
	#_PC_LAST
 67

	)
239  
	#_PC_XATTR_ENABLED
 100

	)
240  
	#_PC_XATTR_EXISTS
 101

	)
242 #i‚def 
_POSIX_VERSION


243  
	#_POSIX_VERSION
 199506L

	)
246 #i‚def 
_POSIX2_VERSION


247  
	#_POSIX2_VERSION
 199209L

	)
250 #i‚def 
_POSIX2_C_VERSION


251  
	#_POSIX2_C_VERSION
 199209L

	)
254  
	#_XOPEN_XPG3


	)
255  
	#_XOPEN_XPG4


	)
256  
	#_XOPEN_UNIX


	)
258 #i‚def 
_XOPEN_XCU_VERSION


259  
	#_XOPEN_XCU_VERSION
 4

	)
262  
	#_XOPEN_REALTIME
 1

	)
263  
	#_XOPEN_ENH_I18N
 1

	)
264  
	#_XOPEN_SHM
 1

	)
265  
	#_POSIX2_C_BIND
 1

	)
266  
	#_POSIX2_CHAR_TERM
 1

	)
267  
	#_POSIX2_LOCALEDEF
 1

	)
268  
	#_POSIX2_C_DEV
 1

	)
269  
	#_POSIX2_SW_DEV
 1

	)
270  
	#_POSIX2_UPE
 1

	)
272 #ifdef 
__˝lu•lus


	@/usr/include/sys/avl.h

6 #i‚def 
_AVL_H


7  
	#_AVL_H


	)
9 #¥agm®
idít
 "@(#)avl.h 1.2 00/10/05 SMI"

11 #ifdef 
__˝lu•lus


17 
	~<sys/avl_im∂.h
>

22 
avl_node
 
	tavl_node_t
;

29 
uöçå_t
 
	tavl_ödex_t
;

35 
avl_åì
 
	tavl_åì_t
;

41  
	#AVL_BEFORE
 (0)

	)
42  
	#AVL_AFTER
 (1)

	)
51 
avl_¸óã
(
avl_åì_t
 *, (*) (const *, const *),

52 
size_t
, size_t);

54 
avl_de°roy
(
avl_åì_t
 *);

56 * 
avl_föd
(
avl_åì_t
 *, *, 
avl_ödex_t
 *);

58 * 
avl_√¨e°
(
avl_åì_t
 *, 
avl_ödex_t
, );

60 
avl_ö£π
(
avl_åì_t
 *, *, 
avl_ödex_t
);

62 
avl_ªmove
(
avl_åì_t
 *, *);

64 * 
avl_fú°
(
avl_åì_t
 *);

65 * 
avl_œ°
(
avl_åì_t
 *);

67  
	#AVL_NEXT
(
t
, 
d
) 
	`avl_wÆk
—, d, 
AVL_AFTER
)

	)
68  
	#AVL_PREV
(
t
, 
d
) 
	`avl_wÆk
—, d, 
AVL_BEFORE
)

	)
69 * 
avl_wÆk
(
avl_åì_t
 *, *, );

71 
ul⁄g_t
 
avl_numnodes
(
avl_åì_t
 *);

73 * 
avl_dì≥°
(
avl_åì_t
 *);

77 #ifdef 
__˝lu•lus


	@/usr/include/sys/cred.h

31 #i‚de‡
_SYS_CRED_H


32  
	#_SYS_CRED_H


	)
34 #¥agm®
idít
 "@(#)cred.h 1.21 97/01/09 SMI"

36 #ifde‡
_KERNEL


37 
	~<sys/t_lock.h
>

40 #ifdef 
__˝lu•lus


50 
	s¸ed
 {

51 
uöt_t
 
¸_ªf
;

52 
uid_t
 
¸_uid
;

53 
gid_t
 
¸_gid
;

54 
uid_t
 
¸_ruid
;

55 
gid_t
 
¸_rgid
;

56 
uid_t
 
¸_suid
;

57 
gid_t
 
¸_sgid
;

58 
uöt_t
 
¸_ngroups
;

59 
gid_t
 
¸_groups
[1];

60 } 
	t¸ed_t
;

62 #ifde‡
_KERNEL


64  
	#CRED
() 
cuπhªad
->
t_¸ed


	)
66 
¥oc
;

68 
ngroups_max
;

72 
¸ed
 *
k¸ed
;

74 
¸ed_öô
();

75 
¸hﬁd
(
¸ed_t
 *);

76 
¸‰ì
(
¸ed_t
 *);

77 
¸ed_t
 *
¸gë
();

78 
¸ed_t
 *
¸c›y
(cred_t *);

79 
¸c›y_to
(
¸ed_t
 *, cred_t *);

80 
¸ed_t
 *
¸dup
(cred_t *);

81 
¸dup_to
(
¸ed_t
 *, cred_t *);

82 
¸ed_t
 *
¸gë¸ed
();

83 
¸£t
(
¥oc
 *, 
¸ed_t
 *);

84 
su£r
(
¸ed_t
 *);

85 
groupmembî
(
gid_t
, 
¸ed_t
 *);

86 
ha•ro˝îm
(
¸ed_t
 *, cred_t *);

87 
¸cmp
(
¸ed_t
 *, cred_t *);

91 #ifdef 
__˝lu•lus


	@/usr/include/sys/debug.h

8 #i‚de‡
_SYS_DEBUG_H


9  
	#_SYS_DEBUG_H


	)
11 #¥agm®
idít
 "@(#)debug.h 1.22 97/05/15 SMI"

13 
	~<sys/iß_defs.h
>

15 #ifdef 
__˝lu•lus


25 #i‡
deföed
(
__STDC__
)

26 
assÁû
(const *, const *, );

27 #i‡
DEBUG


28  
	#ASSERT
(
EX
Ë(()((EXË|| 
	`assÁû
(#EX, 
__FILE__
, 
__LINE__
)))

	)
30  
	#ASSERT
(
x
)

	)
33 
assÁû
();

34 #i‡
DEBUG


35  
	#ASSERT
(
EX
Ë(()((EXË|| 
	`assÁû
("EX", 
__FILE__
, 
__LINE__
)))

	)
37  
	#ASSERT
(
x
)

	)
44 #i‡
deföed
(
_LP64
)

45  
	#ASSERT64
(
x
) 
	`ASSERT
(x)

	)
46  
	#ASSERT32
(
x
)

	)
48  
	#ASSERT64
(
x
)

	)
49  
	#ASSERT32
(
x
) 
	`ASSERT
(x)

	)
52 #ifdef 
_KERNEL


54 
ab‹t_£quí˚_íãr
(*);

55 
debug_íãr
(*);

59 #ifde‡
MONITOR


60  
	#MONITOR
(
id
, 
w1
, 
w2
, 
w3
, 
w4
Ë
	`m⁄ô‹
(id, w1, w2, w3, w4)

	)
62  
	#MONITOR
(
id
, 
w1
, 
w2
, 
w3
, 
w4
)

	)
65 #i‡
deföed
(
DEBUG
Ë&& !deföed(
sun
)

67  
	#STATIC


	)
70  
	#STATIC
 

	)
73 #ifdef 
__˝lu•lus


	@/usr/include/sys/mutex.h

6 #i‚de‡
_SYS_MUTEX_H


7  
	#_SYS_MUTEX_H


	)
9 #¥agm®
idít
 "@(#)mutex.h 1.20 98/02/01 SMI"

11 #i‚def 
_ASM


12 
	~<sys/ty≥s.h
>

15 #ifdef 
__˝lu•lus


19 #i‚def 
_ASM


39 
	e
{

40 
MUTEX_ADAPTIVE
 = 0,

41 
MUTEX_SPIN
 = 1,

42 
MUTEX_DRIVER
 = 4,

43 
MUTEX_DEFAULT
 = 6

44 } 
	tkmuãx_ty≥_t
;

46 
	smuãx
 {

47 #ifde‡
_LP64


48 *
	m_›aque
[1];

50 *
	m_›aque
[2];

52 } 
	tkmuãx_t
;

54 #ifde‡
_KERNEL


56  
	#MUTEX_HELD
(
x
) (
	`muãx_ow√d
(x))

	)
57  
	#MUTEX_NOT_HELD
(
x
) (!
	`muãx_ow√d
(xË|| 
∑nic°r
)

	)
59 
muãx_öô
(
kmuãx_t
 *, *, 
kmuãx_ty≥_t
, *);

60 
muãx_de°roy
(
kmuãx_t
 *);

61 
muãx_íãr
(
kmuãx_t
 *);

62 
muãx_åyíãr
(
kmuãx_t
 *);

63 
muãx_exô
(
kmuãx_t
 *);

64 
muãx_ow√d
(
kmuãx_t
 *);

65 
_kthªad
 *
muãx_ow√r
(
kmuãx_t
 *);

71 #ifdef 
__˝lu•lus


	@/usr/include/sys/rctl.h

6 #i‚def 
_SYS_RCTL_H


7  
	#_SYS_RCTL_H


	)
9 #¥agm®
idít
 "@(#)rctl.h 1.5 02/03/07 SMI"

11 
	~<sys/kmem.h
>

12 
	~<sys/ªsour˚.h
>

13 
	~<sys/ty≥s.h
>

15 #ifdef 
__˝lu•lus


22  
	#RCTL_LOCAL_NOACTION
 0x00000000

	)
23  
	#RCTL_LOCAL_SIGNAL
 0x00000001

	)
24  
	#RCTL_LOCAL_DENY
 0x00000002

	)
26  
	#RCTL_LOCAL_MAXIMAL
 0x80000000

	)
28  
	#RCTL_LOCAL_ACTION_MASK
 0xffff0000

	)
29  
	#RCTL_LOCAL_MASK
 0x80000003

	)
34  
	#RCTL_GLOBAL_NOACTION
 0x00000000

	)
35  
	#RCTL_GLOBAL_SYSLOG
 0x00000001

	)
37  
	#RCTL_GLOBAL_NOBASIC
 0x80000000

	)
38  
	#RCTL_GLOBAL_LOWERABLE
 0x40000000

	)
39  
	#RCTL_GLOBAL_DENY_ALWAYS
 0x20000000

	)
40  
	#RCTL_GLOBAL_DENY_NEVER
 0x10000000

	)
41  
	#RCTL_GLOBAL_FILE_SIZE
 0x08000000

	)
42  
	#RCTL_GLOBAL_CPU_TIME
 0x04000000

	)
43  
	#RCTL_GLOBAL_NOLOCALACTION
 0x02000000

	)
44  
	#RCTL_GLOBAL_INFINITE
 0x01000000

	)
45  
	#RCTL_GLOBAL_UNOBSERVABLE
 0x00800000

	)
47  
	#RCTL_GLOBAL_ACTION_MASK
 0xffff0000

	)
48  
	#RCTL_GLOBAL_MASK
 0xff800001

	)
53  
	#RCTL_FIRST
 0

	)
54  
	#RCTL_NEXT
 1

	)
55  
	#RCTL_USAGE
 2

	)
60  
	#RCTL_INSERT
 0

	)
61  
	#RCTL_DELETE
 1

	)
62  
	#RCTL_REPLACE
 2

	)
69  
	#RCPRIV_BASIC
 0x01000000

	)
70  
	#RCPRIV_PRIVILEGED
 0x04000000

	)
71  
	#RCPRIV_SYSTEM
 0x07000000

	)
73 
u_l⁄gl⁄g_t
 
	tr˘l_qty_t
;

74 
	tr˘l_¥iv_t
;

76 
r˘lblk
 
	tr˘lblk_t
;

78 
£å˘l
(c⁄° *, 
r˘lblk_t
 *,Ñctlblk_t *, );

79 
gër˘l
(c⁄° *, 
r˘lblk_t
 *,Ñctlblk_t *, );

81 
	e
{

82 
	gRCENTITY_PROCESS
,

83 
	gRCENTITY_TASK
,

84 
	gRCENTITY_PROJECT


85 } 
	tr˘l_ítôy_t
;

86  
	#RC_MAX_ENTITY
 
RCENTITY_PROJECT


	)
88 #i‚de‡
_KERNEL


90 
r˘l_£t
 
	tr˘l_£t_t
;

94 
	~<sys/modhash.h
>

95 
	~<sys/muãx.h
>

100  
	#RCT_NONE
 0x00000000

	)
101  
	#RCT_DENY
 0x00000001

	)
102  
	#RCT_SIGNAL
 0x00000002

	)
103  
	#RCT_STRLOG
 0x00000004

	)
105  
	#RCT_LK_ABANDONED
 0x80000000

	)
110  
	#RCD_DUP
 0x1

	)
111  
	#RCD_CALLBACK
 0x2

	)
116  
	#RCA_SAFE
 0x0

	)
117  
	#RCA_UNSAFE_SIGINFO
 0x1

	)
118  
	#RCA_UNSAFE_ALL
 0x2

	)
120 
	sr˘l_vÆ
 {

121 
r˘l_vÆ
 *
	grcv_¥ev
;

122 
r˘l_vÆ
 *
	grcv_√xt
;

123 
r˘l_¥iv_t
 
	grcv_¥ivûege
;

124 
r˘l_qty_t
 
	grcv_vÆue
;

125 
uöt_t
 
	grcv_Êaga˘i⁄
;

126 
	grcv_a˘i⁄_sig«l
;

127 
¥oc
 *
	grcv_a˘i⁄_ªcùõ¡
;

128 
id_t
 
	grcv_a˘i⁄_ªcù_pid
;

129 
hπime_t
 
	grcv_fúög_time
;

130 } 
	tr˘l_vÆ_t
;

132 
	tr˘l_hndl_t
;

133 
	gr˘l
;

135 
	sr˘l_›s
 {

136 (*
	grco_a˘i⁄
)(
	gr˘l
 *, 
	g¥oc
 *);

137 
r˘l_qty_t
 (*
rco_gë_ußge
)(
	gr˘l
 *, 
	g¥oc
 *);

138 (*
	grco_£t
)(
	gr˘l
 *, 
	g¥oc
 *, 
	gr˘l_qty_t
);

139 (*
	grco_ã°
)(
	gr˘l
 *, 
	g¥oc
 *, 
	gr˘l_vÆ_t
 *,

140 
	gr˘l_qty_t
, 
	guöt_t
);

141 } 
	tr˘l_›s_t
;

142  
	#RCTLOP_ACTION
(
r
, 
p
Ë‘->
rc_di˘_íåy
->
rcd_›s
->
	`rco_a˘i⁄
‘,Ö))

	)
143  
	#RCTLOP_GET_USAGE
(
r
, 
p
Ë‘->
rc_di˘_íåy
->
rcd_›s
->
	`rco_gë_ußge
‘,Ö))

	)
144  
	#RCTLOP_SET
(
r
, 
p
, 
v
Ë‘->
rc_di˘_íåy
->
rcd_›s
->
	`rco_£t
‘,Ö, v))

	)
145  
	#RCTLOP_TEST
(
r
, 
p
, 
v
, 
i
, 
f
) \

146 (
r
->
rc_di˘_íåy
->
rcd_›s
->
	`rco_ã°
‘, 
p
, 
v
, 
i
, 
f
))

	)
151 
rc›_no_a˘i⁄
(
r˘l
 *, 
¥oc
 *);

152 
r˘l_qty_t
 
rc›_no_ußge
(
r˘l
 *, 
¥oc
 *);

153 
rc›_no_£t
(
r˘l
 *, 
¥oc
 *, 
r˘l_qty_t
);

154 
rc›_no_ã°
(
r˘l
 *, 
¥oc
 *, 
r˘l_vÆ
 *, 
r˘l_qty_t
,

155 
uöt_t
);

157 
r˘l_›s_t
 
r˘l_deÁu…_›s
;

159 
	sr˘l
 {

160 
r˘l
 *
	grc_√xt
;

161 
r˘l_vÆ_t
 *
	grc_vÆues
;

162 
r˘l_vÆ_t
 *
	grc_curs‹
;

163 
r˘l_di˘_íåy
 *
	grc_di˘_íåy
;

164 
r˘l_hndl_t
 
	grc_id
;

165 } 
	tr˘l_t
;

172 
	sr˘l_£t
 {

173 
kmuãx_t
 
	grcs_lock
;

174 
r˘l_ítôy_t
 
	grcs_ítôy
;

175 
r˘l_t
 **
	grcs_˘ls
;

176 } 
	tr˘l_£t_t
;

178 
	sr˘l_di˘_íåy
 {

179 
r˘l_di˘_íåy
 *
	grcd_√xt
;

180 *
	grcd_«me
;

181 
r˘l_vÆ_t
 *
	grcd_deÁu…_vÆue
;

182 
r˘l_›s_t
 *
	grcd_›s
;

183 
r˘l_hndl_t
 
	grcd_id
;

184 
r˘l_ítôy_t
 
	grcd_ítôy
;

185 
	grcd_Êaga˘i⁄
;

186 
	grcd_sy¶og_Àvñ
;

187 
	grcd_°æog_Êags
;

188 
r˘l_qty_t
 
	grcd_max_«tive
;

189 
r˘l_qty_t
 
	grcd_max_ûp32
;

190 } 
	tr˘l_di˘_íåy_t
;

192 
	sr˘l_Æloc_gp
 {

193 
uöt_t
 
	grˇg_n˘ls
;

194 
uöt_t
 
	grˇg_nvÆs
;

195 
r˘l_t
 *
	grˇg_˘ls
;

196 
r˘l_vÆ_t
 *
	grˇg_vÆs
;

197 } 
	tr˘l_Æloc_gp_t
;

199 
kmem_ˇche_t
 *
r˘l_ˇche
;

200 
kmem_ˇche_t
 *
r˘l_vÆ_ˇche
;

202 
r˘l_hndl_t
 
r˘Õroc_Àgacy
[];

203 
uöt_t
 
r˘Õroc_Êags
[];

204 
r˘Õroc_sig«ls
[];

206 
r˘l_öô
();

207 
r˘Õroc_öô
();

208 
r˘Õroc_deÁu…_öô
(
¥oc
 *, 
r˘l_Æloc_gp_t
 *);

210 
r˘l_hndl_t
 
r˘l_ªgi°î
(c⁄° *, 
r˘l_ítôy_t
, , 
r˘l_qty_t
,

211 
r˘l_qty_t
, 
r˘l_›s_t
 *);

213 
r˘l_hndl_t
 
r˘l_hndl_lookup
(const *);

214 
r˘l_di˘_íåy_t
 *
r˘l_di˘_lookup
(const *);

215 
r˘l_di˘_íåy_t
 *
r˘l_di˘_lookup_hndl
(
r˘l_hndl_t
);

217 
r˘l_qty_t
 
r˘l_modñ_maximum
(
r˘l_di˘_íåy_t
 *, 
¥oc
 *);

218 
r˘l_qty_t
 
r˘l_modñ_vÆue
(
r˘l_di˘_íåy_t
 *, 
¥oc
 *,Ñctl_qty_t);

220 
r˘l_qty_t
 
r˘l_íf‹˚d_vÆue
(
r˘l_hndl_t
, 
r˘l_£t_t
 *, 
¥oc
 *);

221 
r˘l_ã°
(
r˘l_hndl_t
, 
r˘l_£t_t
 *, 
¥oc
 *, 
r˘l_qty_t
, 
uöt_t
);

222 
r˘l_a˘i⁄
(
r˘l_hndl_t
, 
r˘l_£t_t
 *, 
¥oc
 *, 
uöt_t
);

224 
r˘l_vÆ_cmp
(
r˘l_vÆ_t
 *,Ñctl_val_t *, );

225 
r˘l_vÆ_li°_ö£π
(
r˘l_vÆ_t
 **,Ñctl_val_t *);

227 
r˘l_£t_t
 *
r˘l_£t_¸óã
();

228 
r˘l_Æloc_gp_t
 *
r˘l_£t_öô_¥óŒoc
(
r˘l_ítôy_t
);

229 
r˘l_£t_t
 *
r˘l_£t_öô
(
r˘l_ítôy_t
, 
¥oc
 *,Ñctl_set_t *,

230 
r˘l_Æloc_gp_t
 *);

231 
r˘l_Æloc_gp_t
 *
r˘l_£t_dup_¥óŒoc
(
r˘l_£t_t
 *);

232 
r˘l_£t_dup_ªady
(
r˘l_£t_t
 *, 
r˘l_Æloc_gp_t
 *);

233 
r˘l_£t_t
 *
r˘l_£t_dup
‘˘l_£t_à*, 
¥oc
 *, proc *,

234 
r˘l_£t_t
 *, 
r˘l_Æloc_gp_t
 *, );

235 
r˘l_£t_ª£t
(
r˘l_£t_t
 *, 
¥oc
 *);

236 
r˘l_£t_ã¨off
(
r˘l_£t_t
 *, 
¥oc
 *);

237 
r˘l_£t_‰ì
(
r˘l_£t_t
 *);

239 
r˘l_¥óŒoc_de°roy
(
r˘l_Æloc_gp_t
 *);

241 
size_t
 
r˘l_buûd_«me_buf
(**);

243 
r˘l_globÆ_gë
(c⁄° *
«me
, 
r˘l_di˘_íåy_t
 *);

244 
r˘l_globÆ_£t
(c⁄° *
«me
, 
r˘l_di˘_íåy_t
 *);

246 
r˘l_loˇl_dñëe
(
r˘l_hndl_t
, 
r˘l_vÆ_t
 *);

247 
r˘l_loˇl_ö£π
(
r˘l_hndl_t
, 
r˘l_vÆ_t
 *);

248 
r˘l_loˇl_gë
(
r˘l_hndl_t
, 
r˘l_vÆ_t
 *,Ñctl_val_t *);

249 
r˘l_loˇl_ª∂a˚
(
r˘l_hndl_t
, 
r˘l_vÆ_t
 *,Ñctl_val_t *);

251 
r˘l_Æloc_gp_t
 *
r˘l_æimô_£t_¥óŒoc
(
uöt_t
);

252 
r˘l_æimô_£t
(
r˘l_hndl_t
, 
¥oc
 *, 
æimô64
 *,

253 
r˘l_Æloc_gp_t
 *, , , );

254 
r˘l_æimô_gë
(
r˘l_hndl_t
, 
¥oc
 *, 
æimô64
 *);

258 #ifdef 
__˝lu•lus


	@/usr/include/sys/refstr.h

6 #i‚de‡
_SYS_REFSTR_H


7  
	#_SYS_REFSTR_H


	)
9 #¥agm®
idít
 "@(#)refstr.h 1.1 99/03/31 SMI"

11 #ifdef 
__˝lu•lus


20 
ªf°r
 
	tªf°r_t
;

22 #if 
deföed
(
_KERNEL
)

24 
ªf°r_t
 *
ªf°r_Æloc
(const *);

25 c⁄° *
ªf°r_vÆue
(
ªf°r_t
 *);

26 
ªf°r_hﬁd
(
ªf°r_t
 *);

27 
ªf°r_ªÀ
(
ªf°r_t
 *);

31 #ifdef 
__˝lu•lus


	@/usr/include/sys/task.h

6 #i‚def 
_SYS_TASK_H


7  
	#_SYS_TASK_H


	)
9 #¥agm®
idít
 "@(#)task.h 1.3 01/04/05 SMI"

11 #ifdef 
__˝lu•lus


15 
	~<sys/∑øm.h
>

16 
	~<sys/ty≥s.h
>

17 
	~<sys/r˘l.h
>

19  
	#TASK_NORMAL
 0x0

	)
20  
	#TASK_FINAL
 0x1

	)
22 #ifde‡
_KERNEL


24 
	~<sys/id_•a˚.h
>

25 
	~<sys/exac˘_im∂.h
>

26 
	~<sys/kmem.h
>

28 
¥oc
;

30 
	sèsk
 {

31 
èskid_t
 
tk_tkid
;

32 
uöt_t
 
tk_Êags
;

33 
k¥oje˘
 *
tk_¥oj
;

34 
uöt_t
 
tk_hﬁd_cou¡
;

35 
¥oc
 *
tk_memb_li°
;

38 
kmuãx_t
 
tk_ußge_lock
;

39 
èsk_ußge_t
 *
tk_ußge
;

40 
èsk_ußge_t
 *
tk_¥evußge
;

41 
r˘l_£t_t
 *
tk_r˘ls
;

42 
r˘l_qty_t
 
tk_∆wps
;

43 
r˘l_qty_t
 
tk_˝u_time
;

44 } 
	tèsk_t
;

46 
èsk_t
 *
èsk0p
;

47 
r˘l_hndl_t
 
rc_èsk_lwps
;

48 
r˘l_hndl_t
 
rc_èsk_˝u_time
;

50 
èsk_öô
();

51 
èsk_t
 *
èsk_¸óã
(
¥ojid_t
);

52 
èsk_begö
(
èsk_t
 *, 
¥oc
 *);

53 
èsk_©èch
(
èsk_t
 *, 
¥oc
 *);

54 
èsk_ch™ge
(
èsk_t
 *, 
¥oc
 *);

55 
èsk_dëach
(
¥oc
 *);

56 
èsk_t
 *
èsk_hﬁd_by_id
(
èskid_t
);

57 
èsk_ªÀ
(
èsk_t
 *);

58 
èsk_hﬁd
(
èsk_t
 *);

59 
èsk_íd
(
èsk_t
 *);

63 
	gèsk
;

65 
èskid_t
 
£âaskid
(
¥ojid_t
, 
uöt_t
);

66 
èskid_t
 
gëèskid
();

70 #ifdef 
__˝lu•lus


	@/usr/include/sys/thread.h

6 #i‚def 
_SYS_THREAD_H


7  
	#_SYS_THREAD_H


	)
9 #¥agm®
idít
 "@(#)thread.h 1.124 04/04/26 SMI"

11 
	~<sys/ty≥s.h
>

12 
	~<sys/t_lock.h
>

13 
	~<sys/klwp.h
>

14 
	~<sys/time.h
>

15 
	~<sys/sig«l.h
>

17 #ifdef 
__˝lu•lus


30  
	#TS_FREE
 0x00

	)
31  
	#TS_SLEEP
 0x01

	)
32  
	#TS_RUN
 0x02

	)
33  
	#TS_ONPROC
 0x04

	)
34  
	#TS_ZOMB
 0x08

	)
35  
	#TS_STOPPED
 0x10

	)
37 
	s˘x›
 {

38 (*
ßve_›
)(*);

39 (*
ª°‹e_›
)(*);

40 (*
f‹k_›
)(*, *);

41 (*
lwp_¸óã_›
)(*, *);

42 (*
‰ì_›
)(*, );

43 *
¨g
;

44 
˘x›
 *
√xt
;

45 } 
	t˘x›_t
;

52 
	s_afd
 {

53 *
a_fd
;

54 
a_nfd
;

55 
a_°Æe
;

56 
a_buf
[1];

57 } 
	tafd_t
;

64 
	s
{

65 
ˇddr_t
 
lc_wch™0
;

66 
ˇddr_t
 
lc_wch™
;

67 } 
	tlwpch™_t
;

69 
_kthªad
 *
	tkthªad_id_t
;

71 
tu∫°ûe
;

72 
å≠_öfo
;

73 
upimuãx
;

74 
k¥oje˘
;

75 
⁄_å≠_d©a
;

78 
uöt64_t
 
	tkt_did_t
;

80 
	s_kthªad
 {

81 
_kthªad
 *
t_lök
;

83 
ˇddr_t
 
t_°k
;

84 #i‡
deföed
(
__ü64
)

85 
ˇddr_t
 
t_ªg°k
;

87 (*
t_°¨çc
)();

88 
˝u
 *
t_bound_˝u
;

89 
t_afföôy˙t
;

90 
t_böd_˝u
;

91 
ush‹t_t
 
t_Êag
;

92 
ush‹t_t
 
t_¥oc_Êag
;

93 
ush‹t_t
 
t_schedÊag
;

94 vﬁ©ûê
t_¥ìm±
;

95 vﬁ©ûê
t_¥ìm±_lk
;

96 
uöt_t
 
t_°©e
;

97 
¥i_t
 
t_¥i
;

98 
¥i_t
 
t_ïri
;

99 
œbñ_t
 
t_pcb
;

100 
lwpch™_t
 
t_lwpch™
;

101  
	#t_wch™0
 
t_lwpch™
.
lc_wch™0


	)
102  
	#t_wch™
 
t_lwpch™
.
lc_wch™


	)
103 
_sobj_›s
 *
t_sobj_›s
;

104 
id_t
 
t_cid
;

105 
thªad_›s
 *
t_˛funcs
;

106 *
t_˛d©a
;

107 
˘x›_t
 *
t_˘x
;

108 
uöçå_t
 
t_loÁu…
;

109 
œbñ_t
 *
t_⁄Áu…
;

110 
⁄_å≠_d©a
 *
t_⁄å≠
;

111 
ˇddr_t
 
t_sw≠
;

112 
lock_t
 
t_lock
;

113 
uöt8_t
 
t_lock°©
;

114 
uöt8_t
 
t_pû
;

115 
di•_lock_t
 
t_pi_lock
;

116 
˝u
 *
t_˝u
;

117 
lgΩ_ld
 *
t_Õl
;

118 
_kthªad
 *
t_öå
;

119 
uöt64_t
 
t_öå_°¨t
;

120 
kt_did_t
 
t_did
;

121 
ˇddr_t
 
t_äf_çdp
;

126 
id_t
 
t_tid
;

127 
id_t
 
t_waôf‹
;

128 
sigqueue
 *
t_sigqueue
;

129 
k_sig£t_t
 
t_sig
;

130 
k_sig£t_t
 
t_hﬁd
;

131 
_kthªad
 *
t_f‹w
;

132 
_kthªad
 *
t_back
;

133 
_kthªad
 *
t_thlök
;

134 
klwp_t
 *
t_lwp
;

135 
¥oc
 *
t_¥o˝
;

136 
t_audô_d©a
 *t_audit_data;

137 
_kthªad
 *
t_√xt
;

138 
_kthªad
 *
t_¥ev
;

139 
vnode
 *
t_åa˚
;

140 
ush‹t_t
 
t_why°›
;

141 
ush‹t_t
 
t_wh©°›
;

142 
t_d¶Ÿ
;

143 
pﬁl°©e
 *
t_pﬁl°©e
;

144 
pﬁlˇche
 *
t_pﬁlˇche
;

145 
¸ed
 *
t_¸ed
;

146 
time_t
 
t_°¨t
;

147 
˛ock_t
 
t_lbﬁt
;

148 
hπime_t
 
t_°›time
;

149 
uöt_t
 
t_p˘˝u
;

151 
t_sy¢um
;

152 
kc⁄dv¨_t
 
t_dñay_cv
;

153 
kmuãx_t
 
t_dñay_lock
;

160 
di•_lock_t
 *
t_lockp
;

161 
ush‹t_t
 
t_ﬁd•l
;

162 vﬁ©ûê
t_¥e_sys
;

163 
lock_t
 
t_lock_Êush
;

164 
_di•
 *
t_di•_queue
;

165 
˛ock_t
 
t_di•_time
;

166 
uöt_t
 
t_k¥i_ªq
;

183 
	u__tu
 {

184 
	s__ts
 {

185 vﬁ©ûê
_t_a°Êag
;

186 vﬁ©ûê
_t_sig_check
;

187 vﬁ©ûê
_t_po°_sys
;

188 vﬁ©ûê
_t_å≠ªt
;

189 } 
_ts
;

190 vﬁ©ûê
_t_po°_sys_a°
;

191 } 
_tu
;

192  
	#t_a°Êag
 
_tu
.
_ts
.
_t_a°Êag


	)
193  
	#t_sig_check
 
_tu
.
_ts
.
_t_sig_check


	)
194  
	#t_po°_sys
 
_tu
.
_ts
.
_t_po°_sys


	)
195  
	#t_å≠ªt
 
_tu
.
_ts
.
_t_å≠ªt


	)
196  
	#t_po°_sys_a°
 
_tu
.
_t_po°_sys_a°


	)
202 
hπime_t
 
t_waôrq
;

203 
t_m°©e
;

204 
	sΩrof
 {

205 
Ω_™y°©e
;

206 
uöt_t
 
Ω_°©e
[
NMSTATES
];

207 } *
t_Ωrof
;

215 
tu∫°ûe
 *
t_¥ioöv
;

222 
tu∫°ûe
 *
t_ts
;

228 
uöt_t
 
t_mmu˘x
;

235 
	stsd_thªad
 {

236 
tsd_thªad
 *
ts_√xt
;

237 
tsd_thªad
 *
ts_¥ev
;

238 
uöt_t
 
ts_nkeys
;

239 **
ts_vÆue
;

240 } *
t_tsd
;

242 
˛ock_t
 
t_°ime
;

243 
do‹_d©a
 *
t_do‹
;

244 
kmuãx_t
 *
t_∂ockp
;

246 
_kthªad
 *
t_h™doff
;

247 
sc_d©a
 *
t_sched˘l
;

249 
˝u∑π
 *
t_˝u∑π
;

250 
t_böd_p£t
;

252 
c›y›s
 *
t_c›y›s
;

254 
ˇddr_t
 
t_°kba£
;

255 #i‡
deföed
(
__ü64
)

256 
size_t
 
t_°ksize
;

258 
∑ge
 *
t_ªd_µ
;

260 
_afd
 
t_a˘ivefd
;

262 
_kthªad
 *
t_¥if‹w
;

263 
_kthªad
 *
t_¥iback
;

265 
¶ìpq
 *
t_¶ìpq
;

266 
å≠_öfo
 *
t_∑nic_å≠
;

267 *
t_lgΩ_afföôy
;

268 
upimuãx
 *
t_upimuãx
;

269 
uöt32_t
 
t_nupöe°
;

270 
k¥oje˘
 *
t_¥oj
;

271 
uöt8_t
 
t_u≈¨k
;

272 
kc⁄dv¨_t
 
t_joöcv
;

273 *
t_èskq
;

274 
hπime_t
 
t_™âime
;

277 } 
	tkthªad_t
;

290  
	#T_INTR_THREAD
 0x0001

	)
291  
	#T_WAKEABLE
 0x0002

	)
292  
	#T_TOMASK
 0x0004

	)
293  
	#T_TALLOCSTK
 0x0008

	)
294  
	#T_WOULDBLOCK
 0x0020

	)
295  
	#T_DONTBLOCK
 0x0040

	)
296  
	#T_DONTPEND
 0x0080

	)
297  
	#T_SYS_PROF
 0x0100

	)
298  
	#T_WAITCVSEM
 0x0200

	)
299  
	#T_WATCHPT
 0x0400

	)
300  
	#T_PANIC
 0x0800

	)
301  
	#T_DFLTSTK
 0x1000

	)
308  
	#TP_DAEMON
 0x0001

	)
309  
	#TP_HOLDLWP
 0x0002

	)
310  
	#TP_TWAIT
 0x0004

	)
311  
	#TP_LWPEXIT
 0x0008

	)
312  
	#TP_PRSTOP
 0x0010

	)
313  
	#TP_CHKPT
 0x0020

	)
314  
	#TP_EXITLWP
 0x0040

	)
315  
	#TP_PRVSTOP
 0x0080

	)
316  
	#TP_MSACCT
 0x0100

	)
317  
	#TP_STOPPING
 0x0200

	)
318  
	#TP_WATCHPT
 0x0400

	)
319  
	#TP_PAUSE
 0x0800

	)
320  
	#TP_CHANGEBIND
 0x1000

	)
326  
	#TS_LOAD
 0x0001

	)
327  
	#TS_DONT_SWAP
 0x0002

	)
328  
	#TS_SWAPENQ
 0x0004

	)
329  
	#TS_ON_SWAPQ
 0x0008

	)
330  
	#TS_SIGNALLED
 0x0010

	)
331  
	#TS_CSTART
 0x0100

	)
332  
	#TS_UNPAUSE
 0x0200

	)
333  
	#TS_XSTART
 0x0400

	)
334  
	#TS_PSTART
 0x0800

	)
335  
	#TS_RESUME
 0x1000

	)
336  
	#TS_CREATE
 0x2000

	)
337  
	#TS_ALLSTART
 \

338 (
TS_CSTART
|
TS_UNPAUSE
|
TS_XSTART
|
TS_PSTART
|
TS_RESUME
|
TS_CREATE
)

	)
343  
	#a°⁄
(
t
) (—)->
t_a°Êag
 = 1)

	)
344  
	#a°off
(
t
) (—)->
t_a°Êag
 = 0)

	)
347  
	#ISTOPPED
(
t
Ë(—)->
t_°©e
 =
TS_STOPPED
 && \

348 !((
t
)->
t_schedÊag
 & 
TS_PSTART
))

	)
351  
	#CPR_ISTOPPED
(
t
Ë(—)->
t_°©e
 =
TS_STOPPED
 && \

352 !((
t
)->
t_schedÊag
 & 
TS_RESUME
))

	)
358  
	#VSTOPPED
(
t
) (—)->
t_¥oc_Êag
 & 
TP_PRVSTOP
)

	)
361  
	#CPR_VSTOPPED
(
t
) \

362 ((
t
)->
t_°©e
 =
TS_SLEEP
 && \

363 (
t
)->
t_wch™0
 !
NULL
 && \

364 ((
t
)->
t_Êag
 & 
T_WAKEABLE
) && \

365 ((
t
)->
t_¥oc_Êag
 & 
TP_CHKPT
))

	)
368  
	#SUSPENDED
(
t
Ë(—)->
t_°©e
 =
TS_STOPPED
 && \

369 ((
t
)->
t_schedÊag
 & (
TS_CSTART
|
TS_UNPAUSE
)Ë!(TS_CSTART|TS_UNPAUSE))

	)
372  
	#INHERITED
(
t
) (—)->
t_ïri
 !0)

	)
375  
	#DISP_PRIO
(
t
Ë(—)->
t_ïri
 > (t)->
t_¥i
 ? (t)->t_ïrò: (t)->t_¥i)

	)
378  
	#ASSIGNED_PRIO
(
t
) (—)->
t_¥i
)

	)
384  
	#SWAP_OK
(
t
) (!
	`LOCK_HELD
(&—)->
t_lock
))

	)
410  
	#¥o˘Ÿ
(
x
) ((x)->
p_éi°
)

	)
411  
	#¥o˘ﬁwp
(
x
) ((x)->
p_éi°
->
t_lwp
)

	)
412  
	#âﬁwp
(
x
) ((x)->
t_lwp
)

	)
413  
	#â›roc
(
x
) ((x)->
t_¥o˝
)

	)
414  
	#â›roj
(
x
) ((x)->
t_¥oj
)

	)
415  
	#lw±Ÿ
(
x
) ((x)->
lwp_thªad
)

	)
416  
	#lw±›roc
(
x
) ((x)->
lwp_¥o˝
)

	)
418  
	#t_pc
 
t_pcb
.
vÆ
[0]

	)
419  
	#t_•
 
t_pcb
.
vÆ
[1]

	)
421 #ifdef 
_KERNEL


423 
kthªad_t
 *
thªadp
();

424  
	#cuπhªad
 (
	`thªadp
())

	)
425  
	#cuΩroc
 (
	`â›roc
(
cuπhªad
))

	)
426  
	#cuΩroj
 (
	`â›roj
(
cuπhªad
))

	)
428 
_kthªad
 
t0
;

429 
kmuãx_t
 
pidlock
;

435 
kmuãx_t
 
thªad_‰ì_lock
;

441 
thªad_ch™ge_¥i
(
kthªad_t
 *
t
, 
¥i_t
 
di•_¥i
, 
‰⁄t
);

442 
thªad_ch™ge_ïri
(
kthªad_t
 *
t
, 
¥i_t
 
di•_¥i
);

449 
thªad_å™sôi⁄
(
kthªad_t
 *);

450 
thªad_lock
(
kthªad_t
 *);

451 
thªad_lock_high
(
kthªad_t
 *);

452 
thªad_⁄¥oc
(
kthªad_t
 *, 
˝u
 *);

454  
	#thªad_u∆ock
(
t
) 
	`di•_lock_exô
(—)->
t_lockp
)

	)
455  
	#thªad_u∆ock_high
(
t
) 
	`di•_lock_exô_high
(—)->
t_lockp
)

	)
456  
	#thªad_u∆ock_n›ªem±
(
t
) 
	`di•_lock_exô_n›ªem±
(—)->
t_lockp
)

	)
458  
	#THREAD_LOCK_HELD
(
t
) (
	`DISP_LOCK_HELD
(—)->
t_lockp
))

	)
460 
di•_lock_t
 
å™sôi⁄_lock
;

461 
di•_lock_t
 
°›_lock
;

463 
ˇddr_t
 
thªad_°k_öô
(caddr_t);

477  
	#THREAD_KPRI_REQUEST
() (
cuπhªad
->
t_k¥i_ªq
++)

	)
478  
	#THREAD_KPRI_RELEASE
() (
cuπhªad
->
t_k¥i_ªq
--)

	)
479  
	#THREAD_KPRI_RELEASE_N
(
n
Ë(
cuπhªad
->
t_k¥i_ªq
 -“))

	)
484  
	#THREAD_SET_STATE
(
ç
, 
°©e
, 
Õ
) \

485 ((
ç
)->
t_°©e
 = 
°©e
, (ç)->
t_lockp
 = 
Õ
)

	)
491  
	#THREAD_TRANSITION
(
ç
Ë 
	`thªad_å™sôi⁄
—p);

	)
496  
	#THREAD_TRANSITION_NOLOCK
(
ç
Ë (—p)->
t_lockp
 = &
å™sôi⁄_lock
)

	)
502  
	#THREAD_RUN
(
ç
, 
Õ
) 
	`THREAD_SET_STATE
—p, 
TS_RUN
,Üp)

	)
508  
	#THREAD_SWAP
(
ç
, 
Õ
) 
	`THREAD_SET_STATE
—p, 
TS_RUN
,Üp)

	)
516  
	#THREAD_STOP
(
ç
) \

517 { 
di•_lock_t
 *
Õ
 = (
ç
)->
t_lockp
; \

518 
	`THREAD_SET_STATE
(
ç
, 
TS_STOPPED
, &
°›_lock
); \

519 
	`di•_lock_exô
(
Õ
); \

520 }

	)
526  
	#THREAD_ZOMB
(
ç
) 
	`THREAD_SET_STATE
—p, 
TS_ZOMB
, 
NULL
)

	)
533  
	#THREAD_ONPROC
(
ç
, 
˝u
) \

534 
	`THREAD_SET_STATE
(
ç
, 
TS_ONPROC
, &(
˝u
)->
˝u_thªad_lock
)

	)
540  
	#THREAD_SLEEP
(
ç
, 
Õ
) { \

541 
di•_lock_t
 *
ép
; \

542 
ép
 = (
ç
)->
t_lockp
; \

543 
	`THREAD_SET_STATE
(
ç
, 
TS_SLEEP
, 
Õ
); \

544 
	`di•_lock_exô_high
(
ép
); \

545 }

	)
551  
	#THREAD_FREEINTR
(
ç
, 
˝u
) \

552 
	`THREAD_SET_STATE
(
ç
, 
TS_FREE
, &(
˝u
)->
˝u_thªad_lock
)

	)
555 #ifdef 
__˝lu•lus


	@/usr/include/sys/timer.h

6 #i‚def 
_SYS_TIMER_H


7  
	#_SYS_TIMER_H


	)
9 #¥agm®
idít
 "@(#)timer.h 1.19 01/05/31 SMI"

11 
	~<sys/ty≥s.h
>

12 
	~<sys/¥oc.h
>

13 
	~<sys/thªad.h
>

15 #ifdef 
__˝lu•lus


19 #ifdef 
_KERNEL


21  
	#_TIMER_MAX
 32

	)
26  
	#ITLK_LOCKED
 0x01

	)
27  
	#ITLK_WANTED
 0x02

	)
28  
	#ITLK_REMOVE
 0x04

	)
33  
	#IT_SIGNAL
 0x01

	)
35 
˛ock_backíd
;

37 
	sôimî
 {

38 
ôimî•ec_t
 
	mô_ôime
;

39 
hπime_t
 
	mô_hπime
;

40 
ush‹t_t
 
	mô_Êags
;

41 
ush‹t_t
 
	mô_lock
;

42 *
	mô_¨g
;

43 
sigqueue_t
 *
	mô_sigq
;

44 
klwp_t
 *
	mô_lwp
;

45 
¥oc
 *
	mô_¥oc
;

46 
kc⁄dv¨_t
 
	mô_cv
;

47 
	mô_blockîs
;

48 
	mô_≥ndög
;

49 
	mô_ovîrun
;

50 
˛ock_backíd
 *
	mô_backíd
;

51 } 
	tôimî_t
;

53 
	s˛ock_backíd
 {

54 
sigevít
 
	m˛k_deÁu…
;

55 (*
	m˛k_˛ock_£âime
)(
	mtime•ec_t
 *);

56 (*
	m˛k_˛ock_gëtime
)(
	mtime•ec_t
 *);

57 (*
	m˛k_˛ock_gëªs
)(
	mtime•ec_t
 *);

58 (*
	m˛k_timî_¸óã
)(
	môimî_t
 *, 
	msigevít
 *);

59 (*
	m˛k_timî_£âime
)(
	môimî_t
 *, , 
	môimî•ec
 *);

60 (*
	m˛k_timî_gëtime
)(
	môimî_t
 *, 
	môimî•ec
 *);

61 (*
	m˛k_timî_dñëe
)(
	môimî_t
 *);

62 (*
	m˛k_timî_lwpböd
)(
	môimî_t
 *);

63 } 
	t˛ock_backíd_t
;

65 
˛ock_add_backíd
(
˛ockid_t
 
˛ock
, 
˛ock_backíd_t
 *
backíd
);

67 
timî_fúe
(
ôimî_t
 *);

68 
timî_lwpböd
();

70 
timî_func
(
sigqueue_t
 *);

71 
timî_exô
();

72 
timî_lw≥xô
();

73 
˛ock_t
 
hzto
(
timevÆ
 *);

74 
˛ock_t
 
time•e˘ohz
(
time•ec_t
 *,Åimespec_t);

75 
˛ock_t
 
time•e˘ohz_adj
(
time•ec_t
 *,Åimespec_t);

76 
ôimî•ecfix
(
time•ec_t
 *);

77 
time•eˇdd
(
time•ec_t
 *,Åimespec_t *);

78 
time•ecsub
(
time•ec_t
 *,Åimespec_t *);

79 
time•ecfix
(
time•ec_t
 *);

80 
xgëôimî
(
uöt_t
, 
ôimîvÆ
 *, );

81 
x£tôimî
(
uöt_t
, 
ôimîvÆ
 *, );

83  
	#timî•ecis£t
(
tvp
) (—vp)->
tv_£c
 || (tvp)->
tv_n£c
)

	)
84  
	#timî•eccmp
(
tvp
, 
uvp
) ((—vp)->
tv_£c
 - (uvp)->tv_sec) ? \

85 ((
tvp
)->
tv_£c
 - (
uvp
)->tv_£c):(—vp)->
tv_n£c
 - (uvp)->tv_n£c))

	)
86  
	#timî•ec˛ór
(
tvp
) (—vp)->
tv_£c
 = (tvp)->
tv_n£c
 = 0)

	)
88 
	sﬁdsigevít
 {

90 
	m_nŸify
;

91 
	u
{

92 
	m_signo
;

93 (*
	m_nŸify_fun˘i⁄
)(
	msigvÆ
);

94 } 
	m_un
;

95 
sigvÆ
 
	m_vÆue
;

98 #i‡
deföed
(
_SYSCALL32
)

100 
	sﬁdsigevít32
 {

101 
öt32_t
 
	m_nŸify
;

102 
	u
{

103 
öt32_t
 
	m_signo
;

104 
ˇddr32_t
 
	m_nŸify_fun˘i⁄
;

105 } 
	m_un
;

106 
sigvÆ32
 
	m_vÆue
;

112 #ifdef 
__˝lu•lus


	@/usr/include/sys/user.h

13 #i‚de‡
_SYS_USER_H


14  
	#_SYS_USER_H


	)
16 #¥agm®
idít
 "@(#)user.h 1.63 01/04/15 SMI"

18 
	~<sys/ty≥s.h
>

19 
	~<sys/sig«l.h
>

21 #ifdef 
__˝lu•lus


29 
	sexd©a
 {

30 
vnode
 *
vp
;

31 
size_t
 
ux_tsize
;

32 
size_t
 
ux_dsize
;

33 
size_t
 
ux_bsize
;

34 
size_t
 
ux_lsize
;

35 
ux_nshlibs
;

36 
ux_mach
;

37 
ux_mag
;

38 
off_t
 
ux_toff£t
;

39 
off_t
 
ux_doff£t
;

40 
off_t
 
ux_loff£t
;

41 
ˇddr_t
 
ux_txt‹g
;

42 
ˇddr_t
 
ux_d©‹g
;

43 
ˇddr_t
 
ux_íéoc
;

46 #ifdef 
__˝lu•lus


50 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_KMEMUSER
)

52 
	~<sys/∑øm.h
>

53 
	~<sys/pcb.h
>

54 
	~<sys/sigöfo.h
>

55 
	~<sys/ªsour˚.h
>

56 
	~<sys/time.h
>

57 
	~<sys/auxv.h
>

58 
	~<sys/î∫o.h
>

59 
	~<sys/t_lock.h
>

61 #ifdef 
__˝lu•lus


70 
	suf_íåy
 {

71 
kmuãx_t
 
uf_lock
;

72 
fûe
 *
uf_fûe
;

73 
Âﬁlöfo
 *
uf_Âﬁlöfo
;

74 
uf_ªf˙t
;

75 
uf_Æloc
;

76 
uf_Êag
;

77 
uf_busy
;

78 
kc⁄dv¨_t
 
uf_w™ãd_cv
;

79 
kc⁄dv¨_t
 
uf_˛osög_cv
;

80 } 
	tuf_íåy_t
;

85 
	suf_æi°
 {

86 
uf_æi°
 *
ur_√xt
;

87 
uf_íåy_t
 *
ur_li°
;

88 
ur_nfûes
;

89 } 
	tuf_æi°_t
;

94 
	suf_öfo
 {

95 
kmuãx_t
 
fi_lock
;

96 
kmuãx_t
 
fi_∑d
;

97 
fi_nfûes
;

98 
uf_íåy_t
 *vﬁ©ûê
fi_li°
;

99 
uf_æi°_t
 *
fi_æi°
;

100 } 
	tuf_öfo_t
;

133  
	#UF_ENTER
(
uÂ
, 
fù
, 
fd
) \

135 
uf_íåy_t
 *
_Êi°
 = (
fù
)->
fi_li°
; \

136 
uÂ
 = &
_Êi°
[
fd
]; \

137 
	`ASSERT
((
fd
Ë< (
fù
)->
fi_nfûes
); \

138 
	`muãx_íãr
(&
uÂ
->
uf_lock
); \

139 
_Êi°
 =(
fù
)->
fi_li°
) \

141 
	`muãx_exô
(&
uÂ
->
uf_lock
); \

142 }

	)
144  
	#UF_EXIT
(
uÂ
) 
	`muãx_exô
(&uÂ->
uf_lock
)

	)
146  
	#PSARGSZ
 80

	)
147  
	#MAXCOMLEN
 16

	)
149 
	s
{

150 
uöt_t
 
w‹d
[9];

151 } 
	tk_sys£t_t
;

162 #i‡
deföed
(
•¨c
Ë|| deföed(
__•¨c
)

163  
	#__KERN_NAUXV_IMPL
 19

	)
164 #ñi‡
deföed
(
i386
Ë|| deföed(
__i386
)

165  
	#__KERN_NAUXV_IMPL
 21

	)
166 #ñi‡
deföed
(
__ü64
)

167  
	#__KERN_NAUXV_IMPL
 21

	)
170 
execsw
;

177 
	su£r
 {

182 
execsw
 *
u_execsw
;

183 
auxv_t
 
u_auxv
[
__KERN_NAUXV_IMPL
];

184 
time°ruc_t
 
u_°¨t
;

185 
˛ock_t
 
u_ticks
;

186 
u_comm
[
MAXCOMLEN
 + 1];

187 
u_pßrgs
[
PSARGSZ
];

188 
u_¨gc
;

189 
uöçå_t
 
u_¨gv
;

190 
uöçå_t
 
u_ívp
;

195 
vnode
 *
u_cdú
;

196 
vnode
 *
u_rdú
;

197 
size_t
 
u_mem
;

198 
mode_t
 
u_cmask
;

199 
u_acÊag
;

200 
u_sy°øp
;

202 
k_sys£t_t
 
u_íåymask
;

203 
k_sys£t_t
 
u_exômask
;

204 
k_sig£t_t
 
u_signode„r
;

205 
k_sig£t_t
 
u_sig⁄°ack
;

206 
k_sig£t_t
 
u_sigª£th™d
;

207 
k_sig£t_t
 
u_sigª°¨t
;

208 
k_sig£t_t
 
u_sigmask
[
MAXSIG
];

209 (*
u_sig«l
[
MAXSIG
])();

219 #i‡
deföed
(
_LP64
)

220 
æimô64
 
u_ßved_æimô
[
RLIM_NLIMITS
];

222 
æimô64
 
u_ßved_lf_æimô
;

224 
uf_öfo_t
 
u_föfo
;

226 #i‡
deföed
(
i386
Ë|| deföed(
__i386
Ë|| deföed(
__ü64
)

227 (*
u_sigªtu∫
)();

229 } 
	tu£r_t
;

231 
	~<sys/¥oc.h
>

233 #ifdef 
_KERNEL


234 #ifdef 
sun


235  
	#u
 (
cuΩroc
->
p_u£r
)

	)
238  
	#P_FINFO
(
p
) (&’)->
p_u£r
.
u_föfo
)

	)
242 #ifdef 
__˝lu•lus


263 
	~<sys/ªg£t.h
>

265 #ifdef 
__˝lu•lus


269  
	#PSARGSZ
 80

	)
271 
	su£r
 {

272 
gªg£t_t
 
u_ªg
;

273 
gªg_t
 *
u_¨0
;

274 
u_pßrgs
[
PSARGSZ
];

275 (*
u_sig«l
[
MAXSIG
])();

276 
u_code
;

277 
ˇddr_t
 
u_addr
;

278 } 
	tu£r_t
;

280 #ifdef 
__˝lu•lus


	@/usr/include/sys/utrap.h

5 #i‚de‡
_UTRAP_H


6  
	#_UTRAP_H


	)
8 #¥agm®
idít
 "@(#)utrap.h 1.5 99/01/05 SMI"

10 #ifdef 
__˝lu•lus


18  
	#UT_INSTRUCTION_DISABLED
 1

	)
19  
	#UT_INSTRUCTION_ERROR
 2

	)
20  
	#UT_INSTRUCTION_PROTECTION
 3

	)
21  
	#UT_ILLTRAP_INSTRUCTION
 4

	)
22  
	#UT_ILLEGAL_INSTRUCTION
 5

	)
23  
	#UT_PRIVILEGED_OPCODE
 6

	)
24  
	#UT_FP_DISABLED
 7

	)
25  
	#UT_FP_EXCEPTION_IEEE_754
 8

	)
26  
	#UT_FP_EXCEPTION_OTHER
 9

	)
27  
	#UT_TAG_OVERFLOW
 10

	)
28  
	#UT_DIVISION_BY_ZERO
 11

	)
29  
	#UT_DATA_EXCEPTION
 12

	)
30  
	#UT_DATA_ERROR
 13

	)
31  
	#UT_DATA_PROTECTION
 14

	)
32  
	#UT_MEM_ADDRESS_NOT_ALIGNED
 15

	)
33  
	#UT_PRIVILEGED_ACTION
 16

	)
34  
	#UT_ASYNC_DATA_ERROR
 17

	)
35  
	#UT_TRAP_INSTRUCTION_16
 18

	)
36  
	#UT_TRAP_INSTRUCTION_17
 19

	)
37  
	#UT_TRAP_INSTRUCTION_18
 20

	)
38  
	#UT_TRAP_INSTRUCTION_19
 21

	)
39  
	#UT_TRAP_INSTRUCTION_20
 22

	)
40  
	#UT_TRAP_INSTRUCTION_21
 23

	)
41  
	#UT_TRAP_INSTRUCTION_22
 24

	)
42  
	#UT_TRAP_INSTRUCTION_23
 25

	)
43  
	#UT_TRAP_INSTRUCTION_24
 26

	)
44  
	#UT_TRAP_INSTRUCTION_25
 27

	)
45  
	#UT_TRAP_INSTRUCTION_26
 28

	)
46  
	#UT_TRAP_INSTRUCTION_27
 29

	)
47  
	#UT_TRAP_INSTRUCTION_28
 30

	)
48  
	#UT_TRAP_INSTRUCTION_29
 31

	)
49  
	#UT_TRAP_INSTRUCTION_30
 32

	)
50  
	#UT_TRAP_INSTRUCTION_31
 33

	)
55  
	#UTRAP_V8P_FP_DISABLED
 
UT_FP_DISABLED


	)
56  
	#UTRAP_V8P_MEM_ADDRESS_NOT_ALIGNED
 
UT_MEM_ADDRESS_NOT_ALIGNED


	)
58 #i‚de‡
_ASM


60  
	#UTH_NOCHANGE
 ((
uå≠_h™dÀr_t
)(-1))

	)
61  
	#UTRAP_UTH_NOCHANGE
 
UTH_NOCHANGE


	)
63 
	tuå≠_íåy_t
;

64 *
	tuå≠_h™dÀr_t
;

67 
ö°Æl_uå≠
(
uå≠_íåy_t
 
ty≥
, 
uå≠_h™dÀr_t
 
√w_h™dÀr
,

68 
uå≠_h™dÀr_t
 *
ﬁd_h™dÀΩ
);

70 #ifde‡
__•¨cv9˝u


71 
¥oc
;

72 
uå≠_dup
(
¥oc
 *
µ
, ¥o¯*
˝
);

73 
uå≠_‰ì
(
¥oc
 *
p
);

76 #ifde‡
__•¨cv9


78 
__•¨c_uå≠_ö°Æl
(
uå≠_íåy_t
 
ty≥
,

79 
uå≠_h™dÀr_t
 
√w_¥eci£
, uå≠_h™dÀr_à
√w_de„ºed
,

80 
uå≠_h™dÀr_t
 *
ﬁd_¥eci£
, uå≠_h™dÀr_à*
ﬁd_de„ºed
);

84  
	#UT_PRECISE_MAXTRAPS
 33

	)
88 #ifdef 
__˝lu•lus


	@/usr/include/sys/watchpoint.h

6 #i‚de‡
_SYS_WATCHPOINT_H


7  
	#_SYS_WATCHPOINT_H


	)
9 #¥agm®
idít
 "@(#)watchpoint.h 1.6 98/01/06 SMI"

11 
	~<sys/ty≥s.h
>

12 
	~<vm/£g_íum.h
>

13 
	~<sys/c›y›s.h
>

15 #ifdef 
__˝lu•lus


28 
	sw©ched_¨ó
 {

29 
w©ched_¨ó
 *
wa_f‹w
;

30 
w©ched_¨ó
 *
wa_back
;

31 
ˇddr_t
 
wa_vaddr
;

32 
ˇddr_t
 
wa_óddr
;

33 
ul⁄g_t
 
wa_Êags
;

40 
	sw©ched_∑ge
 {

41 
w©ched_∑ge
 *
wp_f‹w
;

42 
w©ched_∑ge
 *
wp_back
;

43 
ˇddr_t
 
wp_vaddr
;

44 
uch¨_t
 
wp_¥Ÿ
;

45 
uch¨_t
 
wp_›rŸ
;

46 
uch¨_t
 
wp_um≠
[3];

47 
uch¨_t
 
wp_km≠
[3];

48 
ush‹t_t
 
wp_Êags
;

49 
wp_ªad
;

50 
wp_wrôe
;

51 
wp_exec
;

55  
	#WP_NOWATCH
 0x01

	)
56  
	#WP_SETPROT
 0x02

	)
58 #ifdef 
_KERNEL


60 
k_sigöfo
;

61 
¥_m≠∑ge
(c⁄° 
ˇddr_t
, 
size_t
, 
£g_rw
, );

62 
¥_unm≠∑ge
(c⁄° 
ˇddr_t
, 
size_t
, 
£g_rw
, );

63 
£èŒw©ch
();

64 
¥_is_w©ch∑ge
(
ˇddr_t
, 
£g_rw
);

65 
¥_is_w©chpoöt
(
ˇddr_t
 *, *, 
size_t
, size_t *,

66 
£g_rw
);

67 
do_w©ch_°ï
(
ˇddr_t
, 
size_t
, 
£g_rw
, , 
gªg_t
);

68 
undo_w©ch_°ï
(
k_sigöfo
 *);

70 
c›y›s
 
w©ch_c›y›s
;

74 #ifdef 
__˝lu•lus


	@/usr/include/sys/auxv.h

13 #i‚def 
_SYS_AUXV_H


14  
	#_SYS_AUXV_H


	)
16 #¥agm®
idít
 "@(#)auxv.h 1.27 00/02/07 SMI"

18 #ifdef 
__˝lu•lus


22 #i‡!
deföed
(
_ASM
)

24 
	s
{

25 
a_ty≥
;

26 
	u
{

27 
a_vÆ
;

28 #ifde‡
__STDC__


29 *
a_±r
;

31 *
a_±r
;

33 (*
a_f˙
)();

34 } 
a_un
;

35 } 
	tauxv_t
;

37 #i‡
deföed
(
_SYSCALL32
)

39 
	s
{

40 
öt32_t
 
	ma_ty≥
;

41 
	u
{

42 
öt32_t
 
	ma_vÆ
;

43 
ˇddr32_t
 
	ma_±r
;

44 
ˇddr32_t
 
	ma_f˙
;

45 } 
	ma_un
;

46 } 
	tauxv32_t
;

52  
	#AT_NULL
 0

	)
53  
	#AT_IGNORE
 1

	)
54  
	#AT_EXECFD
 2

	)
55  
	#AT_PHDR
 3

	)
56  
	#AT_PHENT
 4

	)
57  
	#AT_PHNUM
 5

	)
58  
	#AT_PAGESZ
 6

	)
59  
	#AT_BASE
 7

	)
60  
	#AT_FLAGS
 8

	)
61  
	#AT_ENTRY
 9

	)
62  
	#AT_DCACHEBSIZE
 10

	)
63  
	#AT_ICACHEBSIZE
 11

	)
64  
	#AT_UCACHEBSIZE
 12

	)
66  
	#AT_SUN_UID
 2000

	)
67  
	#AT_SUN_RUID
 2001

	)
68  
	#AT_SUN_GID
 2002

	)
69  
	#AT_SUN_RGID
 2003

	)
74  
	#AT_SUN_LDELF
 2004

	)
75  
	#AT_SUN_LDSHDR
 2005

	)
76  
	#AT_SUN_LDNAME
 2006

	)
77  
	#AT_SUN_LPAGESZ
 2007

	)
83  
	#AT_SUN_PLATFORM
 2008

	)
88  
	#AT_SUN_HWCAP
 2009

	)
90 #i‡
deföed
(
_KERNEL
)

91 
auxv_hwˇp
;

92 
kauxv_hwˇp
;

95  
	#AT_SUN_IFLUSH
 2010

	)
96  
	#AT_SUN_CPU
 2011

	)
105  
	#AT_SUN_EMUL_ENTRY
 2012

	)
106  
	#AT_SUN_EMUL_EXECFD
 2013

	)
113  
	#AT_SUN_EXECNAME
 2014

	)
115  
	#AT_SUN_MMU
 2015

	)
116  
	#AT_SUN_LDDATA
 2016

	)
118 #ifdef 
__˝lu•lus


	@/usr/include/sys/avl_impl.h

6 #i‚def 
_AVL_IMPL_H


7  
	#_AVL_IMPL_H


	)
9 #¥agm®
idít
 "@(#)avl_impl.h 1.1 00/08/24 SMI"

11 #ifdef 
__˝lu•lus


32 #i‚de‡
_LP64


34 
	savl_node
 {

35 
avl_node
 *
avl_chûd
[2];

36 
avl_node
 *
avl_∑ª¡
;

37 
avl_chûd_ödex
;

38 
avl_bÆ™˚
;

41  
	#AVL_XPARENT
(
n
) (“)->
avl_∑ª¡
)

	)
42  
	#AVL_SETPARENT
(
n
, 
p
) (“)->
avl_∑ª¡
 = (p))

	)
44  
	#AVL_XCHILD
(
n
) (“)->
avl_chûd_ödex
)

	)
45  
	#AVL_SETCHILD
(
n
, 
c
) (“)->
avl_chûd_ödex
 = ()(c))

	)
47  
	#AVL_XBALANCE
(
n
) (“)->
avl_bÆ™˚
)

	)
48  
	#AVL_SETBALANCE
(
n
, 
b
) (“)->
avl_bÆ™˚
 = ()(b))

	)
63 
	savl_node
 {

64 
avl_node
 *
	mavl_chûd
[2];

65 
uöçå_t
 
	mavl_pcb
;

73  
	#AVL_XPARENT
(
n
) ((
avl_node
 *)(“)->
avl_pcb
 & ~7))

	)
74  
	#AVL_SETPARENT
(
n
, 
p
) \

75 ((
n
)->
avl_pcb
 = ((“)->avl_pcb & 7Ë| (
uöçå_t
)(
p
)))

	)
80  
	#AVL_XCHILD
(
n
) ((“)->
avl_pcb
 >> 2Ë& 1)

	)
81  
	#AVL_SETCHILD
(
n
, 
c
) \

82 ((
n
)->
avl_pcb
 = (
uöçå_t
)((“)->avl_pcb & ~4Ë| ((
c
Ë<< 2)))

	)
89  
	#AVL_XBALANCE
(
n
) ((“)->
avl_pcb
 & 3Ë- 1)

	)
90  
	#AVL_SETBALANCE
(
n
, 
b
) \

91 ((
n
)->
avl_pcb
 = (
uöçå_t
)(((“)->avl_pcb & ~3Ë| ((
b
Ë+ 1))))

	)
101  
	#AVL_NODE2DATA
(
n
, 
o
) ((*)((
uöçå_t
)“Ë- (o)))

	)
102  
	#AVL_DATA2NODE
(
d
, 
o
) ((
avl_node
 *)((
uöçå_t
)(dË+ (o)))

	)
109  
	#AVL_INDEX2NODE
(
x
) ((
avl_node_t
 *)((xË& ~1))

	)
110  
	#AVL_INDEX2CHILD
(
x
) ((xË& 1)

	)
111  
	#AVL_MKINDEX
(
n
, 
c
) ((
avl_ödex_t
)“Ë| (c))

	)
119 
	savl_åì
 {

120 
avl_node
 *
	gavl_roŸ
;

121 (*
	gavl_com∑r
)(const *, const *);

122 
size_t
 
	gavl_off£t
;

123 
ul⁄g_t
 
	gavl_numnodes
;

124 
size_t
 
	gavl_size
;

129 #ifdef 
__˝lu•lus


	@/usr/include/sys/copyops.h

6 #i‚def 
_SYS_COPYOPS_H


7  
	#_SYS_COPYOPS_H


	)
9 #¥agm®
idít
 "@(#)copyops.h 1.4 98/07/17 SMI"

11 
	~<sys/ty≥s.h
>

12 
	~<sys/thªad.h
>

13 
	~<sys/buf.h
>

14 
	~<sys/aio_ªq.h
>

15 
	~<sys/uio.h
>

17 #ifdef 
__˝lu•lus


21 #ifde‡
_KERNEL


40 
	sc›y›s
 {

44 (*
˝_c›yö
)(c⁄° *, *, 
size_t
);

45 (*
˝_xc›yö
)(c⁄° *, *, 
size_t
);

46 (*
˝_c›yout
)(c⁄° *, *, 
size_t
);

47 (*
˝_xc›yout
)(c⁄° *, *, 
size_t
);

48 (*
˝_c›yö°r
)(c⁄° *, *, 
size_t
, size_t *);

49 (*
˝_c›yout°r
)(c⁄° *, *, 
size_t
, size_t *);

54 (*
˝_fuw‹d8
)(c⁄° *, 
uöt8_t
 *);

55 (*
˝_fuiw‹d8
)(c⁄° *, 
uöt8_t
 *);

56 (*
˝_fuw‹d16
)(c⁄° *, 
uöt16_t
 *);

57 (*
˝_fuw‹d32
)(c⁄° *, 
uöt32_t
 *);

58 (*
˝_fuiw‹d32
)(c⁄° *, 
uöt32_t
 *);

59 (*
˝_fuw‹d64
)(c⁄° *, 
uöt64_t
 *);

61 (*
˝_suw‹d8
)(*, 
uöt8_t
);

62 (*
˝_suiw‹d8
)(*, 
uöt8_t
);

63 (*
˝_suw‹d16
)(*, 
uöt16_t
);

64 (*
˝_suw‹d32
)(*, 
uöt32_t
);

65 (*
˝_suiw‹d32
)(*, 
uöt32_t
);

66 (*
˝_suw‹d64
)(*, 
uöt64_t
);

67 (*
˝_physio
)((*)(
buf
 *), bu‡*, 
dev_t
,

68 , (*)(
buf
 *), 
uio
 *);

69 } 
	tc›y›s_t
;

71  
	#CP_COPYIN
(
uaddr
, 
kaddr
, 
cou¡
) \

72 ((*
cuπhªad
->
t_c›y›s
->
˝_c›yö
)(
uaddr
, 
kaddr
, 
cou¡
))

	)
73  
	#CP_XCOPYIN
(
uaddr
, 
kaddr
, 
cou¡
) \

74 ((*
cuπhªad
->
t_c›y›s
->
˝_xc›yö
)(
uaddr
, 
kaddr
, 
cou¡
))

	)
75  
	#CP_COPYOUT
(
kaddr
, 
uaddr
, 
cou¡
) \

76 ((*
cuπhªad
->
t_c›y›s
->
˝_c›yout
)(
kaddr
, 
uaddr
, 
cou¡
))

	)
77  
	#CP_XCOPYOUT
(
kaddr
, 
uaddr
, 
cou¡
) \

78 ((*
cuπhªad
->
t_c›y›s
->
˝_xc›yout
)(
kaddr
, 
uaddr
, 
cou¡
))

	)
79  
	#CP_COPYINSTR
(
uaddr
, 
kaddr
, 
max
, 
Ànc›õd
) \

80 ((*
cuπhªad
->
t_c›y›s
->
˝_c›yö°r
)(
uaddr
, 
kaddr
, 
max
, 
Ànc›õd
))

	)
81  
	#CP_COPYOUTSTR
(
kaddr
, 
uaddr
, 
max
, 
Ànc›õd
) \

82 ((*
cuπhªad
->
t_c›y›s
->
˝_c›yout°r
)(
kaddr
, 
uaddr
, 
max
, 
Ànc›õd
))

	)
84  
	#CP_FUWORD8
(
addr
, 
vÆuï
) \

85 ((*
cuπhªad
->
t_c›y›s
->
˝_fuw‹d8
)(
addr
, 
vÆuï
))

	)
86  
	#CP_FUIWORD8
(
addr
, 
vÆuï
) \

87 ((*
cuπhªad
->
t_c›y›s
->
˝_fuiw‹d8
)(
addr
, 
vÆuï
))

	)
88  
	#CP_FUWORD16
(
addr
, 
vÆuï
) \

89 ((*
cuπhªad
->
t_c›y›s
->
˝_fuw‹d16
)(
addr
, 
vÆuï
))

	)
90  
	#CP_FUWORD32
(
addr
, 
vÆuï
) \

91 ((*
cuπhªad
->
t_c›y›s
->
˝_fuw‹d32
)(
addr
, 
vÆuï
))

	)
92  
	#CP_FUIWORD32
(
addr
, 
vÆuï
) \

93 ((*
cuπhªad
->
t_c›y›s
->
˝_fuiw‹d32
)(
addr
, 
vÆuï
))

	)
94  
	#CP_FUWORD64
(
addr
, 
vÆuï
) \

95 ((*
cuπhªad
->
t_c›y›s
->
˝_fuw‹d64
)(
addr
, 
vÆuï
))

	)
97  
	#CP_SUWORD8
(
addr
, 
vÆue
) \

98 ((*
cuπhªad
->
t_c›y›s
->
˝_suw‹d8
)(
addr
, 
vÆue
))

	)
99  
	#CP_SUIWORD8
(
addr
, 
vÆue
) \

100 ((*
cuπhªad
->
t_c›y›s
->
˝_suiw‹d8
)(
addr
, 
vÆue
))

	)
101  
	#CP_SUWORD16
(
addr
, 
vÆue
) \

102 ((*
cuπhªad
->
t_c›y›s
->
˝_suw‹d16
)(
addr
, 
vÆue
))

	)
103  
	#CP_SUWORD32
(
addr
, 
vÆue
) \

104 ((*
cuπhªad
->
t_c›y›s
->
˝_suw‹d32
)(
addr
, 
vÆue
))

	)
105  
	#CP_SUIWORD32
(
addr
, 
vÆue
) \

106 ((*
cuπhªad
->
t_c›y›s
->
˝_suiw‹d32
)(
addr
, 
vÆue
))

	)
107  
	#CP_SUWORD64
(
addr
, 
vÆue
) \

108 ((*
cuπhªad
->
t_c›y›s
->
˝_suw‹d64
)(
addr
, 
vÆue
))

	)
110  
	#CP_PHYSIO
(
°øt
, 
bp
, 
dev
, 
rw
, 
mö˙t
, 
uio
) \

111 ((*
cuπhªad
->
t_c›y›s
->
˝_physio
)(
°øt
, 
bp
, 
dev
, 
rw
, 
mö˙t
, 
uio
))

	)
122 
c›y›s
 
deÁu…_c›y›s
;

124 
deÁu…_c›yö
(c⁄° *, *, 
size_t
);

125 
deÁu…_xc›yö
(c⁄° *, *, 
size_t
);

126 
deÁu…_c›yout
(c⁄° *, *, 
size_t
);

127 
deÁu…_xc›yout
(c⁄° *, *, 
size_t
);

128 
deÁu…_c›yö°r
(c⁄° *, *, 
size_t
, size_t *);

129 
deÁu…_c›yout°r
(c⁄° *, *, 
size_t
, size_t *);

131 
deÁu…_fuw‹d8
(c⁄° *, 
uöt8_t
 *);

132 
deÁu…_fuiw‹d8
(c⁄° *, 
uöt8_t
 *);

133 
deÁu…_fuw‹d16
(c⁄° *, 
uöt16_t
 *);

134 
deÁu…_fuw‹d32
(c⁄° *, 
uöt32_t
 *);

135 
deÁu…_fuiw‹d32
(c⁄° *, 
uöt32_t
 *);

136 
deÁu…_fuw‹d64
(c⁄° *, 
uöt64_t
 *);

138 
deÁu…_suw‹d8
(*, 
uöt8_t
);

139 
deÁu…_suiw‹d8
(*, 
uöt8_t
);

140 
deÁu…_suw‹d16
(*, 
uöt16_t
);

141 
deÁu…_suw‹d32
(*, 
uöt32_t
);

142 
deÁu…_suiw‹d32
(*, 
uöt32_t
);

143 
deÁu…_suw‹d64
(*, 
uöt64_t
);

144 
	$deÁu…_physio
((*)(
buf
 *), buf *,

145 
dev_t
, , (*)(
buf
 *), 
uio
 *);

150 
	`ö°Æl_c›y›s
(
kthªad_id_t
 
ç
, 
c›y›s_t
 *
˝
);

151 
	`ªmove_c›y›s
(
kthªad_id_t
 
ç
);

152 
c›y›s_t
 *
	`gë_c›y›s
(
kthªad_id_t
 
ç
);

156 #ifdef 
__˝lu•lus


157 
	}
}

	@/usr/include/sys/errno.h

6 #i‚de‡
_SYS_ERRNO_H


7  
	#_SYS_ERRNO_H


	)
9 #¥agm®
idít
 "@(#)errno.h 1.20 00/01/12 SMI"

39 #ifdef 
__˝lu•lus


47  
	#EPERM
 1

	)
48  
	#ENOENT
 2

	)
49  
	#ESRCH
 3

	)
50  
	#EINTR
 4

	)
51  
	#EIO
 5

	)
52  
	#ENXIO
 6

	)
53  
	#E2BIG
 7

	)
54  
	#ENOEXEC
 8

	)
55  
	#EBADF
 9

	)
56  
	#ECHILD
 10

	)
57  
	#EAGAIN
 11

	)
58  
	#ENOMEM
 12

	)
59  
	#EACCES
 13

	)
60  
	#EFAULT
 14

	)
61  
	#ENOTBLK
 15

	)
62  
	#EBUSY
 16

	)
63  
	#EEXIST
 17

	)
64  
	#EXDEV
 18

	)
65  
	#ENODEV
 19

	)
66  
	#ENOTDIR
 20

	)
67  
	#EISDIR
 21

	)
68  
	#EINVAL
 22

	)
69  
	#ENFILE
 23

	)
70  
	#EMFILE
 24

	)
71  
	#ENOTTY
 25

	)
72  
	#ETXTBSY
 26

	)
73  
	#EFBIG
 27

	)
74  
	#ENOSPC
 28

	)
75  
	#ESPIPE
 29

	)
76  
	#EROFS
 30

	)
77  
	#EMLINK
 31

	)
78  
	#EPIPE
 32

	)
79  
	#EDOM
 33

	)
80  
	#ERANGE
 34

	)
81  
	#ENOMSG
 35

	)
82  
	#EIDRM
 36

	)
83  
	#ECHRNG
 37

	)
84  
	#EL2NSYNC
 38

	)
85  
	#EL3HLT
 39

	)
86  
	#EL3RST
 40

	)
87  
	#ELNRNG
 41

	)
88  
	#EUNATCH
 42

	)
89  
	#ENOCSI
 43

	)
90  
	#EL2HLT
 44

	)
91  
	#EDEADLK
 45

	)
92  
	#ENOLCK
 46

	)
93  
	#ECANCELED
 47

	)
94  
	#ENOTSUP
 48

	)
97  
	#EDQUOT
 49

	)
100  
	#EBADE
 50

	)
101  
	#EBADR
 51

	)
102  
	#EXFULL
 52

	)
103  
	#ENOANO
 53

	)
104  
	#EBADRQC
 54

	)
105  
	#EBADSLT
 55

	)
106  
	#EDEADLOCK
 56

	)
108  
	#EBFONT
 57

	)
111  
	#EOWNERDEAD
 58

	)
112  
	#ENOTRECOVERABLE
 59

	)
115  
	#ENOSTR
 60

	)
116  
	#ENODATA
 61

	)
117  
	#ETIME
 62

	)
118  
	#ENOSR
 63

	)
120  
	#ENONET
 64

	)
121  
	#ENOPKG
 65

	)
122  
	#EREMOTE
 66

	)
123  
	#ENOLINK
 67

	)
124  
	#EADV
 68

	)
125  
	#ESRMNT
 69

	)
127  
	#ECOMM
 70

	)
128  
	#EPROTO
 71

	)
131  
	#ELOCKUNMAPPED
 72

	)
133  
	#ENOTACTIVE
 73

	)
134  
	#EMULTIHOP
 74

	)
135  
	#EBADMSG
 77

	)
136  
	#ENAMETOOLONG
 78

	)
137  
	#EOVERFLOW
 79

	)
138  
	#ENOTUNIQ
 80

	)
139  
	#EBADFD
 81

	)
140  
	#EREMCHG
 82

	)
143  
	#ELIBACC
 83

	)
144  
	#ELIBBAD
 84

	)
145  
	#ELIBSCN
 85

	)
146  
	#ELIBMAX
 86

	)
147  
	#ELIBEXEC
 87

	)
148  
	#EILSEQ
 88

	)
149  
	#ENOSYS
 89

	)
150  
	#ELOOP
 90

	)
151  
	#ERESTART
 91

	)
152  
	#ESTRPIPE
 92

	)
153  
	#ENOTEMPTY
 93

	)
154  
	#EUSERS
 94

	)
158  
	#ENOTSOCK
 95

	)
159  
	#EDESTADDRREQ
 96

	)
160  
	#EMSGSIZE
 97

	)
161  
	#EPROTOTYPE
 98

	)
162  
	#ENOPROTOOPT
 99

	)
163  
	#EPROTONOSUPPORT
 120

	)
164  
	#ESOCKTNOSUPPORT
 121

	)
165  
	#EOPNOTSUPP
 122

	)
166  
	#EPFNOSUPPORT
 123

	)
167  
	#EAFNOSUPPORT
 124

	)
169  
	#EADDRINUSE
 125

	)
170  
	#EADDRNOTAVAIL
 126

	)
172  
	#ENETDOWN
 127

	)
173  
	#ENETUNREACH
 128

	)
174  
	#ENETRESET
 129

	)
176  
	#ECONNABORTED
 130

	)
177  
	#ECONNRESET
 131

	)
178  
	#ENOBUFS
 132

	)
179  
	#EISCONN
 133

	)
180  
	#ENOTCONN
 134

	)
182  
	#ESHUTDOWN
 143

	)
183  
	#ETOOMANYREFS
 144

	)
184  
	#ETIMEDOUT
 145

	)
185  
	#ECONNREFUSED
 146

	)
186  
	#EHOSTDOWN
 147

	)
187  
	#EHOSTUNREACH
 148

	)
188  
	#EWOULDBLOCK
 
EAGAIN


	)
189  
	#EALREADY
 149

	)
190  
	#EINPROGRESS
 150

	)
193  
	#ESTALE
 151

	)
196 #ifdef 
__˝lu•lus


	@/usr/include/sys/exacct_impl.h

6 #i‚def 
_SYS_EXACCT_IMPL_H


7  
	#_SYS_EXACCT_IMPL_H


	)
9 #¥agm®
idít
 "@(#)exacct_impl.h 1.4 02/03/15 SMI"

11 #ifdef 
__˝lu•lus


15 
	~<sys/ty≥s.h
>

23 #ifde‡
_KERNEL


24  
	#EXACCT_SET_ERR
(
x
)

	)
26 
exac˘_£ãº
();

27  
	#EXACCT_SET_ERR
(
x
Ë 
	`exac˘_£ãº
(x)

	)
30 
	sèsk_ußge
 {

31 
uöt64_t
 
	gtu_utime
;

32 
uöt64_t
 
	gtu_°ime
;

34 
uöt64_t
 
	gtu_möÊt
;

35 
uöt64_t
 
	gtu_majÊt
;

36 
uöt64_t
 
	gtu_¢dmsg
;

37 
uöt64_t
 
	gtu_rcvmsg
;

38 
uöt64_t
 
	gtu_ioch
;

39 
uöt64_t
 
	gtu_iblk
;

40 
uöt64_t
 
	gtu_oblk
;

41 
uöt64_t
 
	gtu_vcsw
;

42 
uöt64_t
 
	gtu_icsw
;

43 
uöt64_t
 
	gtu_nsig
;

44 
uöt64_t
 
	gtu_nswp
;

45 
uöt64_t
 
	gtu_ns˛
;

46 
uöt64_t
 
	gtu_utime£c
;

47 
uöt64_t
 
	gtu_utimí£c
;

48 
uöt64_t
 
	gtu_°ime£c
;

49 
uöt64_t
 
	gtu_°imí£c
;

50 
uöt64_t
 
	gtu_°¨t£c
;

51 
uöt64_t
 
	gtu_°¨ä£c
;

52 
uöt64_t
 
	gtu_föish£c
;

53 
uöt64_t
 
	gtu_föishn£c
;

54 
èskid_t
 
	gtu_™˘askid
;

55 } 
	tèsk_ußge_t
;

57 
	s¥oc_ußge
 {

58 
uöt64_t
 
	gpu_möÊt
;

59 
uöt64_t
 
	gpu_majÊt
;

60 
uöt64_t
 
	gpu_¢dmsg
;

61 
uöt64_t
 
	gpu_rcvmsg
;

62 
uöt64_t
 
	gpu_ioch
;

63 
uöt64_t
 
	gpu_iblk
;

64 
uöt64_t
 
	gpu_oblk
;

65 
uöt64_t
 
	gpu_vcsw
;

66 
uöt64_t
 
	gpu_icsw
;

67 
uöt64_t
 
	gpu_nsig
;

68 
uöt64_t
 
	gpu_nswp
;

69 
uöt64_t
 
	gpu_ns˛
;

70 
uöt64_t
 
	gpu_utime£c
;

71 
uöt64_t
 
	gpu_utimí£c
;

72 
uöt64_t
 
	gpu_°ime£c
;

73 
uöt64_t
 
	gpu_°imí£c
;

74 
uöt64_t
 
	gpu_°¨t£c
;

75 
uöt64_t
 
	gpu_°¨ä£c
;

76 
uöt64_t
 
	gpu_föish£c
;

77 
uöt64_t
 
	gpu_föishn£c
;

79 
pid_t
 
	gpu_pid
;

80 
uid_t
 
	gpu_ruid
;

81 
gid_t
 
	gpu_rgid
;

82 
¥ojid_t
 
	gpu_¥ojid
;

83 
èskid_t
 
	gpu_èskid
;

84 
uöt32_t
 
	gpu_acÊag
;

85 *
	gpu_comm™d
;

86 
uöt32_t
 
	gpu_maj‹
;

87 
uöt32_t
 
	gpu_mö‹
;

88 
	gpu_w°©
;

89 
pid_t
 
	gpu_™˝id
;

90 } 
	t¥oc_ußge_t
;

92 
	sÊow_ußge
 {

93 
uöt32_t
 
	gfu_ßddr
[4];

94 
uöt32_t
 
	gfu_daddr
[4];

95 
uöt8_t
 
	gfu_¥Ÿocﬁ
;

96 
uöt16_t
 
	gfu_•‹t
;

97 
uöt16_t
 
	gfu_dp‹t
;

98 
uöt8_t
 
	gfu_dsfõld
;

99 
uöt32_t
 
	gfu_nbyãs
;

100 
uöt32_t
 
	gfu_≈ackës
;

101 
uöt64_t
 
	gfu_˘ime
;

102 
uöt64_t
 
	gfu_l£í
;

103 
¥ojid_t
 
	gfu_¥ojid
;

104 
uid_t
 
	gfu_uid
;

105 
boﬁón_t
 
	gfu_isv4
;

106 *
	gfu_™ame
;

107 } 
	tÊow_ußge_t
;

109 
exac˘_‹dî16
(
uöt16_t
 *);

110 
exac˘_‹dî32
(
uöt32_t
 *);

111 
exac˘_‹dî64
(
uöt64_t
 *);

113 #ifdef 
__˝lu•lus


	@/usr/include/sys/id_space.h

6 #i‚def 
_ID_SPACE_H


7  
	#_ID_SPACE_H


	)
9 #¥agm®
idít
 "@(#)id_space.h 1.2 01/05/20 SMI"

11 #ifdef 
__˝lu•lus


15 
	~<sys/∑øm.h
>

16 
	~<sys/ty≥s.h
>

17 
	~<sys/muãx.h
>

18 
	~<sys/vmem.h
>

20 #ifde‡
_KERNEL


22 
vmem_t
 
	tid_•a˚_t
;

24 
id_•a˚_t
 *
id_•a˚_¸óã
(c⁄° *, 
id_t
, id_t);

25 
id_•a˚_de°roy
(
id_•a˚_t
 *);

26 
id_t
 
id_Æloc
(
id_•a˚_t
 *);

27 
id_‰ì
(
id_•a˚_t
 *, 
id_t
);

31 #ifdef 
__˝lu•lus


	@/usr/include/sys/klwp.h

6 #i‚def 
_SYS_KLWP_H


7  
	#_SYS_KLWP_H


	)
9 #¥agm®
idít
 "@(#)klwp.h 1.42 02/10/08 SMI"

11 
	~<sys/ty≥s.h
>

12 
	~<sys/c⁄dv¨.h
>

13 
	~<sys/thªad.h
>

14 
	~<sys/sig«l.h
>

15 
	~<sys/sigöfo.h
>

16 
	~<sys/pcb.h
>

17 
	~<sys/time.h
>

18 
	~<sys/mßc˘.h
>

19 
	~<sys/uc⁄ãxt.h
>

20 
	~<sys/lwp.h
>

22 #i‡(
deföed
(
_KERNEL
Ë|| deföed(
_KMEMUSER
)Ë&& deföed(
_MACHDEP
)

23 
	~<sys/mach∑øm.h
>

26 #ifdef 
__˝lu•lus


35  
	#MAXSYSARGS
 8

	)
38  
	#NORMALRETURN
 0

	)
39  
	#JUSTRETURN
 1

	)
44 
	sÃußge
 {

45 
u_l⁄gl⁄g_t
 
möÊt
;

46 
u_l⁄gl⁄g_t
 
majÊt
;

47 
u_l⁄gl⁄g_t
 
nsw≠
;

48 
u_l⁄gl⁄g_t
 
öblock
;

49 
u_l⁄gl⁄g_t
 
oublock
;

50 
u_l⁄gl⁄g_t
 
msg¢d
;

51 
u_l⁄gl⁄g_t
 
msgrcv
;

52 
u_l⁄gl⁄g_t
 
nsig«ls
;

53 
u_l⁄gl⁄g_t
 
nvcsw
;

54 
u_l⁄gl⁄g_t
 
nivcsw
;

55 
u_l⁄gl⁄g_t
 
sysc
;

56 
u_l⁄gl⁄g_t
 
ioch
;

59 
_klwp
 *
	tklwp_id_t
;

61 
	s_klwp
 {

65 
pcb
 
lwp_pcb
;

66 
uöçå_t
 
lwp_ﬁdc⁄ãxt
;

71 *
lwp_≠
;

72 
lwp_î∫o
;

76 
lwp_îr‹
;

77 
lwp_eosys
;

78 
lwp_¨gßved
;

79 
lwp_w©chå≠
;

80 
lwp_¨g
[
MAXSYSARGS
];

81 *
lwp_ªgs
;

82 *
lwp_Âu
;

83 
œbñ_t
 
lwp_qßv
;

88 
uch¨_t
 
lwp_cursig
;

89 
uch¨_t
 
lwp_curÊt
;

90 
uch¨_t
 
lwp_syßb‹t
;

91 
uch¨_t
 
lwp_a¶ìp
;

92 
°ack_t
 
lwp_sigÆt°ack
;

93 
sigqueue
 *
lwp_curöfo
;

94 
k_sigöfo_t
 
lwp_sigöfo
;

95 
k_sig£t_t
 
lwp_sigﬁdmask
;

96 
	slwp_w©ch
 {

97 
ˇddr_t
 
w∑ddr
;

98 
size_t
 
wpsize
;

99 
wpcode
;

100 
gªg_t
 
wµc
;

101 } 
lwp_w©ch
[4];

103 
uöt32_t
 
lwp_oweupc
;

115 
	sm°©e
 {

116 
ms_¥ev
;

117 
hπime_t
 
ms_°¨t
;

118 
hπime_t
 
ms_ãrm
;

119 
hπime_t
 
ms_°©e_°¨t
;

120 
hπime_t
 
ms_ac˘
[
NMSTATES
];

121 } 
lwp_m°©e
;

126 
Ãußge
 
lwp_ru
;

131 
lwp_œ°Áu…
;

132 
ˇddr_t
 
lwp_œ°Áddr
;

137 
ôimîvÆ
 
lwp_timî
[3];

142 
lwp_unu£d
;

143 
lwp_°©e
;

144 
ush‹t_t
 
lwp_no°›
;

145 
kc⁄dv¨_t
 
lwp_cv
;

150 
˛ock_t
 
lwp_utime
;

151 
˛ock_t
 
lwp_°ime
;

156 
_kthªad
 *
lwp_thªad
;

157 
¥oc
 *
lwp_¥o˝
;

159 
size_t
 
lwp_chûd°ksz
;

161 
uöçå_t
 
lwp_u°ack
;

162 
size_t
 
lwp_ﬁd_°k_˘l
;

163 } 
	tklwp_t
;

166  
	#LWP_USER
 0x01

	)
167  
	#LWP_SYS
 0x02

	)
169 #if 
deföed
(
_KERNEL
)

170 
lwp_deÁu…_°ksize
;

171 
lwp_ª≠˙t
;

173 
_kthªad
 *
lwp_dóthrow
;

174 
kmuãx_t
 
ª≠lock
;

175 
kmem_ˇche
 *
lwp_ˇche
;

176 *
£gkp_lwp
;

177 
klwp_t
 
lwp0
;

180 
lwp_πt
();

184 #ifdef 
__˝lu•lus


	@/usr/include/sys/kmem.h

6 #i‚de‡
_SYS_KMEM_H


7  
	#_SYS_KMEM_H


	)
9 #¥agm®
idít
 "@(#)kmem.h 1.34 03/08/29 SMI"

11 
	~<sys/ty≥s.h
>

12 
	~<sys/vmem.h
>

14 #ifdef 
__˝lu•lus


23  
	#KM_SLEEP
 0x0000

	)
24  
	#KM_NOSLEEP
 0x0001

	)
25  
	#KM_PANIC
 0x0002

	)
26  
	#KM_PUSHPAGE
 0x0004

	)
27  
	#KM_VMFLAGS
 0x00ff

	)
29  
	#KM_FLAGS
 0xffff

	)
31 #ifde‡
_KERNEL


33 *
kmem_Æloc
(
size_t
 
size
, 
kmÊags
);

34 *
kmem_zÆloc
(
size_t
 
size
, 
kmÊags
);

35 
kmem_‰ì
(*
buf
, 
size_t
 
size
);

48  
	#KMC_NOTOUCH
 0x00010000

	)
49  
	#KMC_NODEBUG
 0x00020000

	)
50  
	#KMC_NOMAGAZINE
 0x00040000

	)
51  
	#KMC_NOHASH
 0x00080000

	)
52  
	#KMC_QCACHE
 0x00100000

	)
53  
	#KMC_KMEM_ALLOC
 0x00200000

	)
55 
	gkmem_ˇche
;

57 
kmem_ˇche
 
	tkmem_ˇche_t
;

59 #ifde‡
_KERNEL


61 
kmem_ªady
;

62 
pg˙t_t
 
kmem_ª≠ahód
;

64 
kmem_öô
();

65 
kmem_thªad_öô
();

66 
kmem_mp_öô
();

67 
kmem_ª≠
();

68 
size_t
 
kmem_avaû
();

69 
size_t
 
kmem_maxavaû
();

71 
kmem_ˇche_t
 *
kmem_ˇche_¸óã
(*, 
size_t
, size_t,

73 (*)(*), *, 
vmem_t
 *, );

74 
kmem_ˇche_de°roy
(
kmem_ˇche_t
 *);

75 *
kmem_ˇche_Æloc
(
kmem_ˇche_t
 *, );

76 
kmem_ˇche_‰ì
(
kmem_ˇche_t
 *, *);

77 
uöt64_t
 
kmem_ˇche_°©
(
kmem_ˇche_t
 *, *);

81 #ifdef 
__˝lu•lus


	@/usr/include/sys/modhash.h

6 #i‚de‡
_MODHASH_H


7  
	#_MODHASH_H


	)
9 #¥agm®
idít
 "@(#)modhash.h 1.2 00/01/11 SMI"

15 #ifde‡
__˝lu•lus


22 #ifde‡
_KERNEL


24 
	~<sys/ty≥s.h
>

25 
	~<sys/t_lock.h
>

30 *
	tmod_hash_vÆ_t
;

31 *
	tmod_hash_key_t
;

36 *
	tmod_hash_hndl_t
;

38 
	gmod_hash_íåy
;

40 
	smod_hash_°©
 {

41 
ul⁄g_t
 
	mmhs_hô
;

42 
ul⁄g_t
 
	mmhs_miss
;

43 
ul⁄g_t
 
	mmhs_cﬁl
;

44 
ul⁄g_t
 
	mmhs_√Àms
;

45 
ul⁄g_t
 
	mmhs_nomem
;

48 
	smod_hash
 {

49 
krwlock_t
 
	mmh_c⁄ã¡s
;

50 *
	mmh_«me
;

51 
	mmh_¶ìp
;

52 
size_t
 
	mmh_nchaös
;

55 (*
	mmh_kdt‹
)(
	mmod_hash_key_t
);

56 (*
	mmh_vdt‹
)(
	mmod_hash_vÆ_t
);

59 (*
	mmh_keycmp
)(
	mmod_hash_key_t
, mod_hash_key_t);

62 
uöt_t
 (*
mh_hashÆg
)(*, 
	mmod_hash_key_t
);

63 *
	mmh_hashÆg_d©a
;

65 
mod_hash
 *
	mmh_√xt
;

67 
mod_hash_°©
 
	mmh_°©
;

69 
mod_hash_íåy
 *
	mmh_íåõs
[1];

70 } 
	tmod_hash_t
;

75 
mod_hash_t
 *
	$mod_hash_¸óã_°rhash
(*, 
size_t
, (*)(
mod_hash_vÆ_t
));

76 
	`mod_hash_de°roy_°rhash
(
mod_hash_t
 *);

77 
	`mod_hash_°rkey_cmp
(
mod_hash_key_t
, mod_hash_key_t);

78 
	`mod_hash_°rkey_dt‹
(
mod_hash_key_t
);

79 
	`mod_hash_°rvÆ_dt‹
(
mod_hash_vÆ_t
);

80 
uöt_t
 
	`mod_hash_by°r
(*, 
mod_hash_key_t
);

85 
mod_hash_t
 *
	$mod_hash_¸óã_±rhash
(*, 
size_t
, (*)(
mod_hash_vÆ_t
),

86 
size_t
);

87 
	`mod_hash_de°roy_±rhash
(
mod_hash_t
 *);

88 
	`mod_hash_±rkey_cmp
(
mod_hash_key_t
, mod_hash_key_t);

89 
uöt_t
 
	`mod_hash_by±r
(*, 
mod_hash_key_t
);

94 
	`mod_hash_öô
();

96 
mod_hash_t
 *
	$mod_hash_¸óã_exãnded
(*, 
size_t
, (*)(
mod_hash_key_t
),

97 (*)(
mod_hash_vÆ_t
), 
	$uöt_t
 (*)(*, 
mod_hash_key_t
), *,

98 (*)(
mod_hash_key_t
, mod_hash_key_t), );

100 
	`mod_hash_de°roy_hash
(
mod_hash_t
 *);

101 
	`mod_hash_˛ór
(
mod_hash_t
 *);

106 
	`mod_hash_nuŒ_keydt‹
(
mod_hash_key_t
 
key
);

107 
	`mod_hash_nuŒ_vÆdt‹
(
mod_hash_vÆ_t
 
vÆ
);

116  
	#MH_ERR_NOMEM
 -1

	)
117  
	#MH_ERR_DUPLICATE
 -2

	)
118  
	#MH_ERR_NOTFOUND
 -3

	)
123 
	`mod_hash_ö£π
(
mod_hash_t
 *, 
mod_hash_key_t
, 
mod_hash_vÆ_t
);

124 
	`mod_hash_ª∂a˚
(
mod_hash_t
 *, 
mod_hash_key_t
, 
mod_hash_vÆ_t
);

125 
	`mod_hash_ªmove
(
mod_hash_t
 *, 
mod_hash_key_t
, 
mod_hash_vÆ_t
 *);

126 
	`mod_hash_de°roy
(
mod_hash_t
 *, 
mod_hash_key_t
);

127 
	`mod_hash_föd
(
mod_hash_t
 *, 
mod_hash_key_t
, 
mod_hash_vÆ_t
 *);

132 
	`mod_hash_ª£rve
(
mod_hash_t
 *, 
mod_hash_hndl_t
 *);

133 
	`mod_hash_ˇn˚l
(
mod_hash_t
 *, 
mod_hash_hndl_t
 *);

134 
	`mod_hash_ö£π_ª£rve
(
mod_hash_t
 *, 
mod_hash_key_t
, 
mod_hash_vÆ_t
,

135 
mod_hash_hndl_t
);

139 #ifde‡
__˝lu•lus


140 
	}
}

	@/usr/include/sys/param.h

34 #i‚de‡
_SYS_PARAM_H


35  
	#_SYS_PARAM_H


	)
37 #¥agm®
idít
 "@(#)param.h 1.77 02/01/22 SMI"

39 #i‚de‡
_ASM


40 
	~<sys/ty≥s.h
>

41 
	~<sys/iß_defs.h
>

45 #ifdef 
__˝lu•lus


53 #i‚def 
_POSIX_VDISABLE


54  
	#_POSIX_VDISABLE
 0

	)
57 #i‚def 
MAX_INPUT


58  
	#MAX_INPUT
 512

	)
61 #i‚def 
MAX_CANON


62  
	#MAX_CANON
 256

	)
65  
	#UID_NOBODY
 60001

	)
66  
	#GID_NOBODY
 
UID_NOBODY


	)
68  
	#UID_NOACCESS
 60002

	)
70 #ifde‡
_KERNEL


71  
	#MAX_TASKID
 999999

	)
72  
	#MAX_MAXPID
 999999

	)
75 #ifde‡
DEBUG


76  
	#DEFAULT_MAXPID
 999999

	)
77  
	#DEFAULT_JUMPPID
 100000

	)
79  
	#DEFAULT_MAXPID
 30000

	)
80  
	#DEFAULT_JUMPPID
 0

	)
84  
	#MAXUID
 2147483647

	)
85  
	#MAXPROJID
 
MAXUID


	)
86  
	#MAXLINK
 32767

	)
88  
	#NMOUNT
 40

	)
90  
	#CANBSIZ
 256

	)
92  
	#NOFILE
 20

	)
101  
	#NGROUPS_UMIN
 0

	)
102  
	#NGROUPS_UMAX
 32

	)
108  
	#NGROUPS_MAX_DEFAULT
 16

	)
113  
	#NZERO
 20

	)
119  
	#NBPW
  ()

	)
121 #i‚def 
NULL


122 #i‡
deföed
(
_LP64
Ë&& !deföed(
__˝lu•lus
)

123  
	#NULL
 0L

	)
125  
	#NULL
 0

	)
129  
	#CMASK
 022

	)
130  
	#CDLIMIT
 (1L<<11)

	)
131  
	#NBPS
 0x20000

	)
132  
	#NBPSCTR
 512

	)
133  
	#UBSIZE
 512

	)
134  
	#SCTRSHFT
 9

	)
136 #ifde‡
_LITTLE_ENDIAN


137  
	#lobyã
(
X
) (((*)&(X))[0])

	)
138  
	#hibyã
(
X
) (((*)&(X))[1])

	)
139  
	#low‹d
(
X
) (((
ush‹t_t
 *)&(X))[0])

	)
140  
	#hiw‹d
(
X
) (((
ush‹t_t
 *)&(X))[1])

	)
142 #ifde‡
_BIG_ENDIAN


143  
	#lobyã
(
X
) (((*)&(X))[1])

	)
144  
	#hibyã
(
X
) (((*)&(X))[0])

	)
145  
	#low‹d
(
X
) (((
ush‹t_t
 *)&(X))[1])

	)
146  
	#hiw‹d
(
X
) (((
ush‹t_t
 *)&(X))[0])

	)
150  
	#SYSNAME
 9

	)
151  
	#PREMOTE
 39

	)
163  
	#MAXPATHLEN
 1024

	)
164  
	#MAXSYMLINKS
 20

	)
165  
	#MAXNAMELEN
 256

	)
167 #i‚de‡
NADDR


168  
	#NADDR
 13

	)
176 #i‚de‡
PIPE_BUF


177  
	#PIPE_BUF
 5120

	)
180 #i‚de‡
PIPE_MAX


181  
	#PIPE_MAX
 5120

	)
184 #i‚de‡
NBBY


185  
	#NBBY
 8

	)
189  
	#dkblock
(
bp
) ((bp)->
b_blkno
)

	)
190  
	#dkunô
(
bp
) (
	`mö‹
((bp)->
b_dev
Ë>> 3)

	)
205  
	#MAXBSIZE
 8192

	)
206  
	#DEV_BSIZE
 512

	)
207  
	#DEV_BSHIFT
 9

	)
208  
	#MAXFRAG
 8

	)
209 #ifdef 
_SYSCALL32


210  
	#MAXOFF32_T
 0x7fffffff

	)
212 #ifdef 
_LP64


213  
	#MAXOFF_T
 0x7ffffffffffffffÊ

	)
214  
	#MAXOFFSET_T
 0x7ffffffffffffffÊ

	)
216  
	#MAXOFF_T
 0x7ffffffÊ

	)
217 #ifde‡
_NO_LONGLONG


218  
	#MAXOFFSET_T
 0x7fffffff

	)
220  
	#MAXOFFSET_T
 0x7fffffffffffffffLL

	)
224  
	#btodb
(
byãs
) \

225 (()(
byãs
Ë>> 
DEV_BSHIFT
)

	)
226  
	#dbtob
(
db
) \

227 (()(
db
Ë<< 
DEV_BSHIFT
)

	)
230  
	#lbtodb
(
byãs
) \

231 ((
off£t_t
)(
byãs
Ë>> 
DEV_BSHIFT
)

	)
232  
	#ldbtob
(
db
) \

233 ((
off£t_t
)(
db
Ë<< 
DEV_BSHIFT
)

	)
235 #i‚de‡
_ASM


236 #i‚de‡
NODEV


237  
	#NODEV
 (
dev_t
)(-1l)

	)
238 #ifde‡
_SYSCALL32


239  
	#NODEV32
 (
dev32_t
)(-1)

	)
247  
	#NCARGS32
 0x100000

	)
248  
	#NCARGS64
 0x200000

	)
249 #ifdef 
_LP64


250  
	#NCARGS
 
NCARGS64


	)
252  
	#NCARGS
 
NCARGS32


	)
259  
	#FSHIFT
 8

	)
260  
	#FSCALE
 (1<<
FSHIFT
)

	)
267 #i‡
deföed
(
_KERNEL
Ë&& !deföed(
_ASM
)

268 
drv_u£cwaô
(
˛ock_t
);

269  
	#DELAY
(
n
) 
	`drv_u£cwaô
“)

	)
270  
	#CDELAY
(
c
, 
n
) \

272 
N
 = 
n
; \

273 --
N
 > 0) { \

274 
c
) \

276 
	`drv_u£cwaô
(1); \

278 }

	)
281 #ifdef 
__˝lu•lus


290 #i‡(
deföed
(
_KERNEL
Ë|| deföed(
_KMEMUSER
))

292 #i‡
deföed
(
_MACHDEP
)

293 
	~<sys/mach∑øm.h
>

296 #ifdef 
__˝lu•lus


300 #i‡
deföed
(
_KERNEL
Ë&& !deföed(
_ASM
)

301 
˝u_deˇy_Á˘‹
;

302 
pid_t
 
maxpid
;

303 
pid_t
 
jump_pid
;

306 #i‡!
deföed
(
_MACHDEP
)

312 #i‡
deföed
(
_KERNEL
Ë&& !deföed(
_ASM
)

313 
hz
;

314 
¢o›ög
;

315 
uöt_t
 
¢o›_öãrvÆ
;

316 c⁄° 
_∑gesize
;

317 c⁄° 
_∑geshi·
;

318 c⁄° 
_∑geoff£t
;

319 c⁄° 
_∑gemask
;

320 c⁄° 
_mmu_∑gesize
;

321 c⁄° 
_mmu_∑geshi·
;

322 c⁄° 
_mmu_∑geoff£t
;

323 c⁄° 
_mmu_∑gemask
;

324 c⁄° 
uöçå_t
 
_kî√lba£
;

325 c⁄° 
uöçå_t
 
_u£æimô
;

326 c⁄° 
uöçå_t
 
_u£æimô32
;

327 c⁄° 
uöçå_t
 
_¨gsba£
;

328 c⁄° 
_deÁu…°ksz
;

329 c⁄° 
_nbpg
;

330 c⁄° 
_n˝u
;

331 c⁄° 
_˛size
;

334  
	#PAGESIZE
 
_∑gesize


	)
335  
	#PAGESHIFT
 
_∑geshi·


	)
336  
	#PAGEOFFSET
 
_∑geoff£t


	)
337  
	#PAGEMASK
 
_∑gemask


	)
338  
	#MMU_PAGESIZE
 
_mmu_∑gesize


	)
339  
	#MMU_PAGESHIFT
 
_mmu_∑geshi·


	)
340  
	#MMU_PAGEOFFSET
 
_mmu_∑geoff£t


	)
341  
	#MMU_PAGEMASK
 
_mmu_∑gemask


	)
343  
	#KERNELBASE
 
_kî√lba£


	)
344  
	#USERLIMIT
 
_u£æimô


	)
345  
	#USERLIMIT32
 
_u£æimô32


	)
346  
	#ARGSBASE
 
_¨gsba£


	)
347  
	#DEFAULTSTKSZ
 
_deÁu…°ksz


	)
348  
	#NCPU
 
_n˝u


	)
362  
	#mmu_±ob
(
x
) ((xË<< 
MMU_PAGESHIFT
)

	)
363  
	#mmu_bt›
(
x
) (((x)Ë>> 
MMU_PAGESHIFT
)

	)
364  
	#mmu_bt›r
(
x
) ((((xË+ 
MMU_PAGEOFFSET
Ë>> 
MMU_PAGESHIFT
))

	)
369  
	#mmu_±od
(
x
) ((xË<< (
MMU_PAGESHIFT
 - 
DEV_BSHIFT
))

	)
370  
	#±od
(
x
) ((xË<< (
PAGESHIFT
 - 
DEV_BSHIFT
))

	)
384 #ifde‡
_LP64


385  
	#±ob
(
x
) (((
pg˙t_t
)(x)Ë<< 
PAGESHIFT
)

	)
387  
	#±ob
(
x
) ((xË<< 
PAGESHIFT
)

	)
389  
	#bt›
(
x
) (((xË>> 
PAGESHIFT
))

	)
390  
	#bt›r
(
x
) ((((xË+ 
PAGEOFFSET
Ë>> 
PAGESHIFT
))

	)
395  
	#NDPP
 (
PAGESIZE
/
DEV_BSIZE
)

	)
396  
	#dt›
(
DD
) (((DDË+ 
NDPP
 - 1Ë>> (
PAGESHIFT
 - 
DEV_BSHIFT
))

	)
397  
	#dt›t
(
DD
) ((DDË>> (
PAGESHIFT
 - 
DEV_BSHIFT
))

	)
402  
	#_AIO_LISTIO_MAX
 (4096)

	)
403  
	#_AIO_MAX
 (-1)

	)
404  
	#_MQ_OPEN_MAX
 (32)

	)
405  
	#_MQ_PRIO_MAX
 (32)

	)
406  
	#_SEM_NSEMS_MAX
 
INT_MAX


	)
407  
	#_SEM_VALUE_MAX
 
INT_MAX


	)
409 #ifdef 
__˝lu•lus


423 
	~<sys/uni°d.h
>

425 #ifdef 
__˝lu•lus


429 #i‡!
deföed
(
_ASM
)

430 
_sysc⁄f
();

433  
	#HZ
 ((
˛ock_t
)
	`_sysc⁄f
(
_SC_CLK_TCK
))

	)
434  
	#TICK
 (1000000000/((
˛ock_t
)
	`_sysc⁄f
(
_SC_CLK_TCK
)))

	)
435  
	#PAGESIZE
 (
	`_sysc⁄f
(
_SC_PAGESIZE
))

	)
436  
	#PAGEOFFSET
 (
PAGESIZE
 - 1)

	)
437  
	#PAGEMASK
 (~
PAGEOFFSET
)

	)
438  
	#MAXPID
 ((
pid_t
)
	`_sysc⁄f
(
_SC_MAXPID
))

	)
440 #ifdef 
__˝lu•lus


	@/usr/include/sys/pcb.h

6 #i‚de‡
_SYS_PCB_H


7  
	#_SYS_PCB_H


	)
9 #¥agm®
idít
 "@(#)pcb.h 1.35 01/09/25 SMI"

11 
	~<sys/ªg£t.h
>

13 #ifdef 
__˝lu•lus


21 #i‚de‡
_ASM


22 
	spcb
 {

23 
pcb_Êags
;

24 
uöt32_t
 
pcb_å≠0addr
;

27 
uöt_t
 
pcb_ö°r
;

28 
	e
{ 
XREGNONE
 = 0, 
XREGPRESENT
, 
XREGMODIFIED
 }

29 
pcb_xªg°©
;

30 
rwödow
 
pcb_xªgs
;

31 
pcb_°ï
;

32 
ˇddr_t
 
pcb_åa˚pc
;

33 } 
	tpcb_t
;

37  
	#INSTR_VALID
 0x02

	)
38  
	#NORMAL_STEP
 0x04

	)
39  
	#WATCH_STEP
 0x08

	)
40  
	#CPC_OVERFLOW
 0x10

	)
41  
	#ASYNC_HWERR
 0x20

	)
42  
	#ASYNC_BERR
 0x40

	)
43  
	#ASYNC_BTO
 0x80

	)
46  
	#STEP_NONE
 0

	)
47  
	#STEP_REQUESTED
 1

	)
48  
	#STEP_ACTIVE
 2

	)
49  
	#STEP_WASACTIVE
 3

	)
51 #ifdef 
__˝lu•lus


	@/usr/include/sys/regset.h

13 #i‚def 
_SYS_REGSET_H


14  
	#_SYS_REGSET_H


	)
16 #¥agm®
idít
 "@(#)regset.h 1.25 00/09/14 SMI"

18 
	~<sys/„©uª_ã°s.h
>

20 #i‡!
deföed
(
_ASM
)

21 
	~<sys/öt_ty≥s.h
>

24 #ifdef 
__˝lu•lus


32 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

34 #i‡
deföed
(
__•¨cv9
)

35  
	#REG_CCR
 (0)

	)
36 #i‡
deföed
(
__•¨cv9˝u
)

37  
	#REG_PSR
 (0)

	)
40  
	#REG_PSR
 (0)

	)
43  
	#REG_PC
 (1)

	)
44  
	#REG_nPC
 (2)

	)
45  
	#REG_Y
 (3)

	)
46  
	#REG_G1
 (4)

	)
47  
	#REG_G2
 (5)

	)
48  
	#REG_G3
 (6)

	)
49  
	#REG_G4
 (7)

	)
50  
	#REG_G5
 (8)

	)
51  
	#REG_G6
 (9)

	)
52  
	#REG_G7
 (10)

	)
53  
	#REG_O0
 (11)

	)
54  
	#REG_O1
 (12)

	)
55  
	#REG_O2
 (13)

	)
56  
	#REG_O3
 (14)

	)
57  
	#REG_O4
 (15)

	)
58  
	#REG_O5
 (16)

	)
59  
	#REG_O6
 (17)

	)
60  
	#REG_O7
 (18)

	)
61 #i‡
deföed
(
__•¨cv9
)

62  
	#REG_ASI
 (19)

	)
63  
	#REG_FPRS
 (20)

	)
67 #i‡!
deföed
(
__•¨cv9
)

68  
	#REG_PS
 
REG_PSR


	)
70  
	#REG_SP
 
REG_O6


	)
71  
	#REG_R0
 
REG_O0


	)
72  
	#REG_R1
 
REG_O1


	)
75 #i‚def 
_ASM


77 #i‡
deföed
(
_LP64
Ë|| deföed(
_I32LPx
)

78 
	tgªg_t
;

80 
	tgªg_t
;

83 #i‡
deföed
(
_SYSCALL32
)

85 
öt32_t
 
	tgªg32_t
;

86 
öt64_t
 
	tgªg64_t
;

98 #i‡
deföed
(
__•¨cv9
)

99  
	#_NGREG
 21

	)
101  
	#_NGREG
 19

	)
103 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

104  
	#NGREG
 
_NGREG


	)
107 
gªg_t
 
	tgªg£t_t
[
_NGREG
];

109 #i‡
deföed
(
_SYSCALL32
)

111  
	#_NGREG32
 19

	)
112  
	#_NGREG64
 21

	)
114 
gªg32_t
 
	tgªg£t32_t
[
_NGREG32
];

115 
gªg64_t
 
	tgªg£t64_t
[
_NGREG64
];

119 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

127  
	#SPARC_MAXREGWINDOW
 31

	)
129 
	srwödow
 {

130 
gªg_t
 
	mrw_loˇl
[8];

131 
gªg_t
 
	mrw_ö
[8];

134 #i‡
deföed
(
_SYSCALL32
)

136 
	srwödow32
 {

137 
gªg32_t
 
	mrw_loˇl
[8];

138 
gªg32_t
 
	mrw_ö
[8];

141 
	srwödow64
 {

142 
gªg64_t
 
	mrw_loˇl
[8];

143 
gªg64_t
 
	mrw_ö
[8];

146 #i‡
deföed
(
_KERNEL
)

147 
rwödow_¡o32
(
rwödow
 *, 
rwödow32
 *);

148 
rwödow_32t⁄
(
rwödow32
 *, 
rwödow
 *);

153  
	#rw_Â
 
rw_ö
[6]

	)
154  
	#rw_πn
 
rw_ö
[7]

	)
156 
	sgwödows
 {

157 
	mwb˙t
;

158 
gªg_t
 *
	m•buf
[
SPARC_MAXREGWINDOW
];

159 
rwödow
 
	mwbuf
[
SPARC_MAXREGWINDOW
];

160 } 
	tgwödows_t
;

162 #i‡
deföed
(
_SYSCALL32
)

164 
	sgwödows32
 {

165 
öt32_t
 
	mwb˙t
;

166 
ˇddr32_t
 
	m•buf
[
SPARC_MAXREGWINDOW
];

167 
rwödow32
 
	mwbuf
[
SPARC_MAXREGWINDOW
];

168 } 
	tgwödows32_t
;

170 
	sgwödows64
 {

171 
	mwb˙t
;

172 
gªg64_t
 *
	m•buf
[
SPARC_MAXREGWINDOW
];

173 
rwödow64
 
	mwbuf
[
SPARC_MAXREGWINDOW
];

174 } 
	tgwödows64_t
;

183  
	#MAXFPQ
 16

	)
193 
	sÂq
 {

194 *
	mÂq_addr
;

195 
	mÂq_ö°r
;

198 
	sfq
 {

199 
	u
{

200 
	mwhﬁe
;

201 
Âq
 
	mÂq
;

202 } 
	mFQu
;

205 #i‡
deföed
(
_SYSCALL32
)

207 
	sÂq32
 {

208 
ˇddr32_t
 
	mÂq_addr
;

209 
uöt32_t
 
	mÂq_ö°r
;

212 
	sfq32
 {

213 
	u
{

214 
	mwhﬁe
;

215 
Âq32
 
	mÂq
;

216 } 
	mFQu
;

234  
	#FPU_REGS_TYPE
 
uöt32_t


	)
235  
	#FPU_DREGS_TYPE
 
uöt64_t


	)
236  
	#V7_FPU_FSR_TYPE
 
uöt32_t


	)
237  
	#V9_FPU_FSR_TYPE
 
uöt64_t


	)
238  
	#V9_FPU_FPRS_TYPE
 
uöt32_t


	)
240 #ifdef 
__•¨cv9˝u


241  
	#FPU_FSR_TYPE
 
V9_FPU_FSR_TYPE


	)
243  
	#FPU_FSR_TYPE
 
V7_FPU_FSR_TYPE


	)
246 #i‡
deföed
(
__•¨cv9
)

248 
	sÂu
 {

249 
	u
{

250 
FPU_REGS_TYPE
 
	mÂu_ªgs
[32];

251 
	mÂu_dªgs
[32];

252 
	mÂu_qªgs
[16];

253 } 
	mÂu_‰
;

254 
fq
 *
	mÂu_q
;

255 
V9_FPU_FSR_TYPE
 
	mÂu_f§
;

256 
uöt8_t
 
	mÂu_q˙t
;

257 
uöt8_t
 
	mÂu_q_íåysize
;

258 
uöt8_t
 
	mÂu_í
;

263 
	sÂu
 {

264 
	u
{

265 
FPU_REGS_TYPE
 
	mÂu_ªgs
[32];

266 
	mÂu_dªgs
[16];

267 } 
	mÂu_‰
;

268 
fq
 *
	mÂu_q
;

269 
V7_FPU_FSR_TYPE
 
	mÂu_f§
;

270 
uöt8_t
 
	mÂu_q˙t
;

271 
uöt8_t
 
	mÂu_q_íåysize
;

272 
uöt8_t
 
	mÂu_í
;

277 
Âu
 
	tÂªg£t_t
;

279 #i‡
deföed
(
_SYSCALL32
)

283 
	sÂu32
 {

284 
	u
{

285 
uöt32_t
 
	mÂu_ªgs
[32];

286 
	mÂu_dªgs
[16];

287 } 
	mÂu_‰
;

288 
ˇddr32_t
 
	mÂu_q
;

289 
uöt32_t
 
	mÂu_f§
;

290 
uöt8_t
 
	mÂu_q˙t
;

291 
uöt8_t
 
	mÂu_q_íåysize
;

292 
uöt8_t
 
	mÂu_í
;

295 
Âu32
 
	tÂªg£t32_t
;

299 #ifde‡
__•¨cv9˝u


307 
	sv9_Âu
 {

308 
	u_Âu_‰
 {

309 
FPU_REGS_TYPE
 
	mÂu_ªgs
[32];

310 
FPU_DREGS_TYPE
 
	mÂu_dªgs
[32];

311 
	mÂu_qªgs
[16];

312 } 
	mÂu_‰
;

313 
V9_FPU_FSR_TYPE
 
	mÂu_f§
;

314 
V9_FPU_FPRS_TYPE
 
	mÂu_Ârs
;

315 
fq
 *
	mÂu_q
;

316 
uöt8_t
 
	mÂu_q˙t
;

317 
uöt8_t
 
	mÂu_q_íåysize
;

318 
uöt8_t
 
	mÂu_í
;

321 
v9_Âu
 
	tv9_Âªg£t_t
;

326 #ifdef 
_KERNEL


331 #ifdef 
__•¨cv9˝u


332 
v9_Âu
 
	tkÂu_t
;

334 
Âu
 
	tkÂu_t
;

339 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

350 
	s
{

351 
	mxrs_id
;

352 
ˇddr_t
 
	mxrs_±r
;

353 } 
	txrs_t
;

355  
	#XRS_ID
 0x78727300

	)
357 #i‡
deföed
(
_SYSCALL32
)

359 
	s
{

360 
uöt32_t
 
	mxrs_id
;

361 
ˇddr32_t
 
	mxrs_±r
;

362 } 
	txrs32_t
;

366 #i‡
deföed
(
__•¨cv9
)

375 
öt64_t
 
	ta§£t_t
[16];

394 
	s
{

395 
gªg£t_t
 
	mgªgs
;

396 
gwödows_t
 *
	mgwös
;

397 
Âªg£t_t
 
	mÂªgs
;

398 
xrs_t
 
	mxrs
;

399 #i‡
deföed
(
__•¨cv9
)

400 
a§£t_t
 
	ma§s
;

401 
	mfûÀr
[4];

403 
	mfûÀr
[19];

405 } 
	tmc⁄ãxt_t
;

407 #i‡
deföed
(
_SYSCALL32
)

409 
	s
{

410 
gªg£t32_t
 
	mgªgs
;

411 
ˇddr32_t
 
	mgwös
;

412 
Âªg£t32_t
 
	mÂªgs
;

413 
xrs32_t
 
	mxrs
;

414 
öt32_t
 
	mfûÀr
[19];

415 } 
	tmc⁄ãxt32_t
;

441 #i‡!
deföed
(
__•¨cv9
)

442 #i‡!
deföed
(
_KERNEL
Ë&& !deföed(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

443 
	~<v7/sys/¥ivªgs.h
>

453 #i‡
deföed
(
_XPG4_2
Ë&& !deföed(
__EXTENSIONS__
)

465 #i‚def 
_ASM


471  
	#_SPARC_MAXREGWINDOW
 31

	)
473 
	s__rwödow
 {

474 
gªg_t
 
	m__rw_loˇl
[8];

475 
gªg_t
 
	m__rw_ö
[8];

478  
	#__rw_Â
 
__rw_ö
[6]

	)
479  
	#__rw_πn
 
__rw_ö
[7]

	)
481 
	s__gwödows
 {

482 
	m__wb˙t
;

483 
gªg_t
 *
	m__•buf
[
_SPARC_MAXREGWINDOW
];

484 
__rwödow
 
	m__wbuf
[
_SPARC_MAXREGWINDOW
];

487 
__gwödows
 
	tgwödows_t
;

494 
	s__Âq
 {

495 *
	m__Âq_addr
;

496 
	m__Âq_ö°r
;

499 
	s__fq
 {

500 
	u
{

501 
	m__whﬁe
;

502 
__Âq
 
	m__Âq
;

503 } 
	m_FQu
;

510  
	#_FPU_REGS_TYPE
 
uöt32_t


	)
511  
	#_FPU_DREGS_TYPE
 
uöt64_t


	)
512  
	#_V7_FPU_FSR_TYPE
 
uöt32_t


	)
513  
	#_V9_FPU_FSR_TYPE
 
uöt64_t


	)
514  
	#_V9_FPU_FPRS_TYPE
 
uöt32_t


	)
516 #ifdef 
__•¨cv9˝u


517  
	#_FPU_FSR_TYPE
 
_V9_FPU_FSR_TYPE


	)
519  
	#_FPU_FSR_TYPE
 
_V7_FPU_FSR_TYPE


	)
522 #i‡
deföed
(
__•¨cv9
)

528 
	s__Âu
 {

529 
	u
{

530 
_FPU_REGS_TYPE
 
	m__Âu_ªgs
[32];

531 
	m__Âu_dªgs
[32];

532 
	m__Âu_qªgs
[16];

533 } 
	m__Âu_‰
;

534 
__fq
 *
	m__Âu_q
;

535 
_V9_FPU_FSR_TYPE
 
	m__Âu_f§
;

536 
uöt8_t
 
	m__Âu_q˙t
;

537 
uöt8_t
 
	m__Âu_q_íåysize
;

538 
uöt8_t
 
	m__Âu_í
;

547 
	s__Âu
 {

548 
	u
{

549 
_FPU_REGS_TYPE
 
	m__Âu_ªgs
[32];

550 
	m__Âu_dªgs
[16];

551 } 
	m__Âu_‰
;

552 
__fq
 *
	m__Âu_q
;

553 
_V7_FPU_FSR_TYPE
 
	m__Âu_f§
;

554 
uöt8_t
 
	m__Âu_q˙t
;

555 
uöt8_t
 
	m__Âu_q_íåysize
;

556 
uöt8_t
 
	m__Âu_í
;

561 
__Âu
 
	tÂªg£t_t
;

563 #i‡
deföed
(
__•¨cv9˝u
Ë&& !deföed(
__•¨cv9
)

569 
	s__v9_Âu
 {

570 
	u
{

571 
_FPU_REGS_TYPE
 
	m__Âu_ªgs
[32];

572 
_FPU_DREGS_TYPE
 
	m__Âu_dªgs
[32];

573 
	m__Âu_qªgs
[16];

574 } 
	m__Âu_‰
;

575 
_V9_FPU_FSR_TYPE
 
	m__Âu_f§
;

576 
_V9_FPU_FPRS_TYPE
 
	m__Âu_Ârs
;

577 
__fq
 *
	m__Âu_q
;

578 
uöt8_t
 
	m__Âu_q˙t
;

579 
uöt8_t
 
	m__Âu_q_íåysize
;

580 
uöt8_t
 
	m__Âu_í
;

583 
__v9_Âu
 
	tv9_Âªg£t_t
;

591 
	s
{

592 
	m__xrs_id
;

593 
ˇddr_t
 
	m__xrs_±r
;

594 } 
	txrs_t
;

596  
	#_XRS_ID
 0x78727300

	)
598 #i‡
deföed
(
__•¨cv9
)

607 
öt64_t
 
	ta§£t_t
[16];

614 
	s
{

615 
gªg£t_t
 
	m__gªgs
;

616 
gwödows_t
 *
	m__gwös
;

617 
Âªg£t_t
 
	m__Âªgs
;

618 
xrs_t
 
	m__xrs
;

619 #i‡
deföed
(
__•¨cv9
)

620 
a§£t_t
 
	m__a§s
;

621 
	m__fûÀr
[4];

623 
	m__fûÀr
[19];

625 } 
	tmc⁄ãxt_t
;

631 #ifdef 
__˝lu•lus


	@/usr/include/sys/signal.h

13 #i‚de‡
_SYS_SIGNAL_H


14  
	#_SYS_SIGNAL_H


	)
16 #¥agm®
idít
 "@(#)signal.h 1.56 01/05/28 SMI"

18 
	~<sys/„©uª_ã°s.h
>

19 
	~<sys/iso/sig«l_iso.h
>

21 #ifdef 
__˝lu•lus


25 #i‡
deföed
(
__EXTENSIONS__
Ë|| (
__STDC__
 - 0 == 0) || \

26 
deföed
(
_POSIX_C_SOURCE
Ë|| deföed(
_XOPEN_SOURCE
) || \

27 
	$deföed
(
_XPG4_2
)

29 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| ((
__STDC__
 - 0 == 0) && \

30 !
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

31 (
_POSIX_C_SOURCE
 > 2Ë|| 
	$deföed
(
_XPG4_2
)

35 
	~<sys/sigöfo.h
>

40 #i‚def 
_SIGSET_T


41  
	#_SIGSET_T


	)
42 
	s
{

43 
__sigbôs
[4];

44 } 
	tsig£t_t
;

46 #i‡
	`deföed
(
_SYSCALL32
)

50 
	s
{

51 
uöt32_t
 
__sigbôs
[4];

52 } 
	tsig£t32_t
;

58 
	s
{

59 
__sigbôs
[2];

60 } 
	tk_sig£t_t
;

76 
	ssiga˘i⁄
 {

77 
ß_Êags
;

78 
	u
{

79 #ifdef 
__˝lu•lus


80 (*
_h™dÀr
)();

82 (*
_h™dÀr
)();

84 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| ((
__STDC__
 - 0 == 0) && \

85 !
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

86 (
_POSIX_C_SOURCE
 > 2Ë|| 
	`deföed
(
_XPG4_2
)

87 (*
_siga˘i⁄
)(, 
sigöfo_t
 *, *);

89 } 
_fun˝å
;

90 
sig£t_t
 
ß_mask
;

91 #i‚de‡
_LP64


92 
ß_ªsv
[2];

95  
	#ß_h™dÀr
 
_fun˝å
.
_h™dÀr


	)
96  
	#ß_siga˘i⁄
 
_fun˝å
.
_siga˘i⁄


	)
98 #i‡
	`deföed
(
_SYSCALL32
)

102 
	ssiga˘i⁄32
 {

103 
öt32_t
 
ß_Êags
;

104 
	u
{

105 
ˇddr32_t
 
_h™dÀr
;

106 
ˇddr32_t
 
_siga˘i⁄
;

107 } 
_fun˝å
;

108 
sig£t32_t
 
ß_mask
;

109 
öt32_t
 
ß_ªsv
[2];

115  
	#SA_NOCLDSTOP
 0x00020000

	)
118 #i‡
	`deföed
(
__EXTENSIONS__
) || \

119 ((
__STDC__
 - 0 =0Ë&& !
	`deföed
(
_POSIX_C_SOURCE
)) || \

120 
	$deföed
(
_XPG4_2
)

125  
	#SA_ONSTACK
 0x00000001

	)
126  
	#SA_RESETHAND
 0x00000002

	)
127  
	#SA_RESTART
 0x00000004

	)
130 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| ((
__STDC__
 - 0 == 0) && \

131 !
	`deföed
(
_POSIX_C_SOURCE
)) || (_POSIX_C_SOURCE > 2) || \

132 
	$deföed
(
_XPG4_2
)

133  
	#SA_SIGINFO
 0x00000008

	)
136 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| ((
__STDC__
 - 0 == 0) && \

137 !
	`deföed
(
_POSIX_C_SOURCE
)Ë|| 
	$deföed
(
_XPG4_2
)

138  
	#SA_NODEFER
 0x00000010

	)
141  
	#SA_NOCLDWAIT
 0x00010000

	)
144  
	#SA_WAITSIG
 0x00010000

	)
146 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| !deföed(
_XPG4_2
)

151  
	#NSIG
 47

	)
152  
	#MAXSIG
 46

	)
154  
	#S_SIGNAL
 1

	)
155  
	#S_SIGSET
 2

	)
156  
	#S_SIGACTION
 3

	)
157  
	#S_NONE
 4

	)
160  
	#MINSIGSTKSZ
 2048

	)
161  
	#SIGSTKSZ
 8192

	)
163  
	#SS_ONSTACK
 0x00000001

	)
164  
	#SS_DISABLE
 0x00000002

	)
167 #i‚def 
_STACK_T


168  
	#_STACK_T


	)
169 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| !deföed(
_XPG4_2
)

170 
	ssigÆt°ack
 {

172 
	s
{

174 *
ss_•
;

175 
size_t
 
ss_size
;

176 
ss_Êags
;

177 } 
	t°ack_t
;

179 #i‡
	`deföed
(
_SYSCALL32
)

183 
	ssigÆt°ack32
 {

184 
ˇddr32_t
 
ss_•
;

185 
size32_t
 
ss_size
;

186 
öt32_t
 
ss_Êags
;

187 } 
	t°ack32_t
;

195 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| ((
__STDC__
 - 0 == 0) && \

196 !
	`deföed
(
_POSIX_C_SOURCE
Ë&& !
	$deföed
(
_XOPEN_SOURCE
))

199 
	ssignŸify_id
 {

200 
pid_t
 
¢_pid
;

201 
¢_ödex
;

202 
¢_∑d
;

203 } 
	tsignŸify_id_t
;

205 #i‡
	`deföed
(
_SYSCALL32
)

209 
	ssignŸify32_id
 {

210 
pid32_t
 
¢_pid
;

211 
öt32_t
 
¢_ödex
;

212 
öt32_t
 
¢_∑d
;

213 } 
	tsignŸify32_id_t
;

219  
	#SN_PROC
 1

	)
220  
	#SN_CANCEL
 2

	)
221  
	#SN_SEND
 3

	)
226 #i‡
	`deföed
(
__EXTENSIONS__
Ë|| (
__STDC__
 == 0 && \

227 !
	`deföed
(
_POSIX_C_SOURCE
Ë&& !deföed(
_XOPEN_SOURCE
)) || \

228 
	$deföed
(
_XPG4_2
)

229 
	ssig°ack
 {

230 *
ss_•
;

231 
ss_⁄°ack
;

239 #i‡
	`deföed
(
_XPG4_2
)

240 
	~<sys/uc⁄ãxt.h
>

243 #ifde‡
_KERNEL


244 
	~<sys/t_lock.h
>

246 
k_sig£t_t


248 
nuŒsmask
,

249 
fûl£t
,

250 
hﬁdvf‹k
,

251 
ˇ¡mask
,

252 
ˇ¡ª£t
,

253 
ign‹edeÁu…
,

254 
°›deÁu…
,

255 
c‹edeÁu…
;

257  
	#sigmask
(
n
) (()1 << ((“Ë- 1Ë& (32 - 1)))

	)
258  
	#sigw‹d
(
n
) ((()(“Ë- 1))>>5)

	)
260  
	#sigem±y£t
(
s
) (*(sË
nuŒsmask
)

	)
261  
	#sigfûl£t
(
s
) (*(sË
fûl£t
)

	)
262  
	#sigadd£t
(
s
, 
n
) ((s)->
__sigbôs
[
	`sigw‹d
“)] |
	`sigmask
“))

	)
263  
	#sigdñ£t
(
s
, 
n
) ((s)->
__sigbôs
[
	`sigw‹d
“)] &~
	`sigmask
“))

	)
264  
	#sigismembî
(
s
, 
n
) (
	`sigmask
“Ë& (s)->
__sigbôs
[
	`sigw‹d
“)])

	)
265  
	#sigi£m±y
(
s
) (!(((s)->
__sigbôs
[0]Ë| ((s)->__sigbôs[1])))

	)
266  
	#sigutok
(
us
, 
ks
) ((ks)->
__sigbôs
[0] = (us)->__sigbits[0], \

267 (
ks
)->
__sigbôs
[1] = (
us
)->__sigbôs[1])

	)
268  
	#sigktou
(
ks
, 
us
) ((us)->
__sigbôs
[0] = (ks)->__sigbits[0], \

269 (
us
)->
__sigbôs
[1] = (
ks
)->__sigbits[1], \

270 (
us
)->
__sigbôs
[2] = 0, \

271 (
us
)->
__sigbôs
[3] = 0)

	)
272 
	s
{

273 
sig
;

274 
≥rm
;

275 
check≥rm
;

276 
sicode
;

277 
sigvÆ
 
vÆue
;

278 } 
	tsig£nd_t
;

280 
	s
{

281 
sigqueue_t
 
¢_sigq
;

282 
u_l⁄gl⁄g_t
 
¢_¢id
;

283 } 
	tsignŸifyq_t
;

286 
	ssigqhdr
 {

287 
sigqueue_t
 *
sqb_‰ì
;

288 
uch¨_t
 
sqb_cou¡
;

289 
uch¨_t
 
sqb_maxcou¡
;

290 
ush‹t_t
 
sqb_size
;

291 
uch¨_t
 
sqb_≥xôed
;

292 
uch¨_t
 
sqb_£¡
;

293 
kmuãx_t
 
sqb_lock
;

294 } 
	tsigqhdr_t
;

296  
	#_SIGQUEUE_MAX
 32

	)
297  
	#_SIGNOTIFY_MAX
 32

	)
299 
	`£tsiga˘
(, (*)(), 
k_sig£t_t
, );

300 
	`sig‹£t
(
k_sig£t_t
 *, k_sigset_t *);

301 
	`sig™d£t
(
k_sig£t_t
 *, k_sigset_t *);

302 
	`sigdiff£t
(
k_sig£t_t
 *, k_sigset_t *);

303 
	`sigöå
(
k_sig£t_t
 *, );

304 
	`sigunöå
(
k_sig£t_t
 *);

305 
	`sigª∂a˚
(
k_sig£t_t
 *, k_sigset_t *);

309 #ifdef 
__˝lu•lus


310 
	}
}

	@/usr/include/sys/t_lock.h

12 #i‚de‡
_SYS_T_LOCK_H


13  
	#_SYS_T_LOCK_H


	)
15 #¥agm®
idít
 "@(#)t_lock.h 1.45 98/02/01 SMI"

17 #i‚def 
_ASM


18 
	~<sys/machlock.h
>

19 
	~<sys/∑øm.h
>

20 
	~<sys/muãx.h
>

21 
	~<sys/rwlock.h
>

22 
	~<sys/£m≠h‹e.h
>

23 
	~<sys/c⁄dv¨.h
>

26 #ifdef 
__˝lu•lus


30 #i‚def 
_ASM


42 #i‡
deföed
(
_KERNEL
)

44 
n˝us
;

51 
di•_lock_íãr
(
di•_lock_t
 *);

52 
di•_lock_exô
(
di•_lock_t
 *);

53 
di•_lock_exô_n›ªem±
(
di•_lock_t
 *);

54 
di•_lock_íãr_high
(
di•_lock_t
 *);

55 
di•_lock_exô_high
(
di•_lock_t
 *);

56 
di•_lock_öô
(
di•_lock_t
 *
Õ
, *
«me
);

57 
di•_lock_de°roy
(
di•_lock_t
 *
Õ
);

59  
	#DISP_LOCK_INIT
(
Õ
) 
	`LOCK_INIT_CLEAR
((
lock_t
 *)÷p))

	)
60  
	#DISP_LOCK_HELD
(
Õ
) 
	`LOCK_HELD
((
lock_t
 *)÷p))

	)
61  
	#DISP_LOCK_DESTROY
(
Õ
) 
	`ASSERT
(!
	`DISP_LOCK_HELD
÷p))

	)
69 #i‚de‡
NO_LOCKS_HELD


70  
	#NO_LOCKS_HELD
 1

	)
72 #i‚de‡
NO_COMPETING_THREADS


73  
	#NO_COMPETING_THREADS
 1

	)
80 #ifdef 
__˝lu•lus


	@/usr/include/vm/seg_enum.h

31 #i‚def 
_VM_SEG_ENUM_H


32  
	#_VM_SEG_ENUM_H


	)
34 #¥agm®
idít
 "@(#)seg_enum.h 1.7 00/05/22 SMI"

36 #ifdef 
__˝lu•lus


50 
	eÁu…_ty≥
 {

51 
F_INVAL
,

52 
F_PROT
,

53 
F_SOFTLOCK
,

54 
F_SOFTUNLOCK


60 
	elock_ty≥
 {

61 
L_PAGELOCK
,

62 
L_PAGEUNLOCK
,

63 
L_PAGERECLAIM


69 
	e£g_rw
 {

70 
S_OTHER
,

71 
S_READ
,

72 
S_WRITE
,

73 
S_EXEC
,

74 
S_CREATE


77 #ifdef 
__˝lu•lus


	@/usr/include/sys/aio_req.h

5 #i‚de‡
_SYS_AIO_REQ_H


6  
	#_SYS_AIO_REQ_H


	)
8 #¥agm®
idít
 "@(#)aio_req.h 1.7 00/05/22 SMI"

10 
	~<sys/buf.h
>

12 #ifdef 
__˝lu•lus


16 #ifde‡
_KERNEL


21 
	saio_ªq
 {

22 
uio
 *
aio_uio
;

23 *
aio_¥iv©e
;

26 
≠hysio
((*)(), (*)(), 
dev_t
, , (*)(),

27 
aio_ªq
 *);

28 
™oˇn˚l
(
buf
 *);

32 #ifdef 
__˝lu•lus


	@/usr/include/sys/buf.h

13 #i‚de‡
_SYS_BUF_H


14  
	#_SYS_BUF_H


	)
16 #¥agm®
idít
 "@(#)buf.h 1.53 02/05/30 SMI"

18 
	~<sys/ty≥s32.h
>

19 
	~<sys/t_lock.h
>

20 
	~<sys/k°©.h
>

22 #ifdef 
__˝lu•lus


56 
	sbuf
 {

57 
b_Êags
;

58 
buf
 *
b_f‹w
;

59 
buf
 *
b_back
;

60 
buf
 *
av_f‹w
;

61 
buf
 *
av_back
;

62 
o_dev_t
 
b_dev
;

63 
size_t
 
b_bcou¡
;

64 
	u
{

65 
ˇddr_t
 
b_addr
;

66 
fs
 *
b_fs
;

67 
cg
 *
b_cg
;

68 
döode
 *
b_döo
;

69 
daddr32_t
 *
b_daddr
;

70 } 
b_un
;

72 
Œdaddr_t
 
_b_blkno
;

73  
	#b_lblkno
 
_b_blkno
.
_f


	)
74 #ifde‡
_LP64


75  
	#b_blkno
 
_b_blkno
.
_f


	)
77  
	#b_blkno
 
_b_blkno
.
_p
.
_l


	)
80 
b_obs1
;

81 
size_t
 
b_ªsid
;

82 
˛ock_t
 
b_°¨t
;

83 
¥oc
 *
b_¥oc
;

84 
∑ge
 *
b_∑ges
;

85 
˛ock_t
 
b_obs2
;

87  
	#b_a˘f
 
av_f‹w


	)
88  
	#b_a˘l
 
av_back


	)
89  
	#b_a˘ive
 
b_bcou¡


	)
90  
	#b_îr˙t
 
b_ªsid


	)
91 
size_t
 
b_bufsize
;

92 (*
b_iod⁄e
)(
buf
 *);

93 
vnode
 *
b_vp
;

94 
buf
 *
b_chaö
;

95 
b_obs3
;

96 
b_îr‹
;

97 *
b_¥iv©e
;

98 
dev_t
 
b_edev
;

99 
k£ma_t
 
b_£m
;

100 
k£ma_t
 
b_io
;

101 
buf
 *
b_li°
;

102 
∑ge
 **
b_shadow
;

103 } 
	tbuf_t
;

110 
	sdiskhd
 {

111 
b_Êags
;

112 
buf
 *
b_f‹w
, *
b_back
;

113 
buf
 *
av_f‹w
, *
av_back
;

114 
o_dev_t
 
b_dev
;

115 
size_t
 
b_bcou¡
;

122 
	sbio°©s
 {

123 
k°©_«med_t
 
bio_lookup
;

124 
k°©_«med_t
 
bio_hô
;

125 
k°©_«med_t
 
bio_bufw™t
;

126 
k°©_«med_t
 
bio_bufwaô
;

127 
k°©_«med_t
 
bio_bufbusy
;

128 
k°©_«med_t
 
bio_bufdup
;

135  
	#B_BUSY
 0x0001

	)
136  
	#B_DONE
 0x0002

	)
137  
	#B_ERROR
 0x0004

	)
138  
	#B_PAGEIO
 0x0010

	)
139  
	#B_PHYS
 0x0020

	)
140  
	#B_READ
 0x0040

	)
141  
	#B_WRITE
 0x0100

	)
144  
	#B_WANTED
 0x0080

	)
145  
	#B_AGE
 0x000200

	)
146  
	#B_ASYNC
 0x000400

	)
147  
	#B_DELWRI
 0x000800

	)
148  
	#B_STALE
 0x001000

	)
149  
	#B_DONTNEED
 0x002000

	)
150  
	#B_REMAPPED
 0x004000

	)
151  
	#B_FREE
 0x008000

	)
152  
	#B_INVAL
 0x010000

	)
153  
	#B_FORCE
 0x020000

	)
154  
	#B_NOCACHE
 0x080000

	)
155  
	#B_TRUNC
 0x100000

	)
156  
	#B_SHADOW
 0x200000

	)
157  
	#B_RETRYWRI
 0x400000

	)
158  
	#B_FAILFAST
 0x1000000

	)
163  
	#bªmhash
(
bp
) { \

164 
	`ASSERT
((
bp
)->
b_f‹w
 !
NULL
); \

165 
	`ASSERT
((
bp
)->
b_back
 !
NULL
); \

166 (
bp
)->
b_back
->
b_f‹w
 = (bp)->b_forw; \

167 (
bp
)->
b_f‹w
->
b_back
 = (bp)->b_back; \

168 (
bp
)->
b_f‹w
 = (bp)->
b_back
 = 
NULL
; \

169 }

	)
170  
	#böshash
(
bp
, 
dp
) { \

171 
	`ASSERT
((
bp
)->
b_f‹w
 =
NULL
); \

172 
	`ASSERT
((
bp
)->
b_back
 =
NULL
); \

173 
	`ASSERT
((
dp
)->
b_f‹w
 !
NULL
); \

174 
	`ASSERT
((
dp
)->
b_back
 !
NULL
); \

175 (
bp
)->
b_f‹w
 = (
dp
)->b_forw; \

176 (
bp
)->
b_back
 = (
dp
); \

177 (
dp
)->
b_f‹w
->
b_back
 = (
bp
); \

178 (
dp
)->
b_f‹w
 = (
bp
); \

179 }

	)
202 
	shbuf
 {

203 
b_Êags
;

205 
buf
 *
b_f‹w
;

206 
buf
 *
b_back
;

208 
buf
 *
av_f‹w
;

209 
buf
 *
av_back
;

211 
b_Àngth
;

212 
kmuãx_t
 
b_lock
;

219 
	sdwbuf
 {

220 
b_Êags
;

222 
buf
 *
b_f‹w
;

223 
buf
 *
b_back
;

225 
buf
 *
av_f‹w
;

226 
buf
 *
av_back
;

234  
	#nŸavaû
(
bp
) \

236 
	`ASSERT
(
	`SEMA_HELD
(&
bp
->
b_£m
)); \

237 
	`ASSERT
((
bp
)->
av_f‹w
 !
NULL
); \

238 
	`ASSERT
((
bp
)->
av_back
 !
NULL
); \

239 
	`ASSERT
((
bp
)->
av_f‹w
 != (bp)); \

240 
	`ASSERT
((
bp
)->
av_back
 != (bp)); \

241 (
bp
)->
av_back
->
av_f‹w
 = (bp)->av_forw; \

242 (
bp
)->
av_f‹w
->
av_back
 = (bp)->av_back; \

243 (
bp
)->
b_Êags
 |
B_BUSY
; \

244 (
bp
)->
av_f‹w
 = (bp)->
av_back
 = 
NULL
; \

245 }

	)
247 #i‡
deföed
(
_KERNEL
)

256  
	#BREAD
(
dev
, 
blkno
, 
bsize
) \

257 
	`bªad_comm⁄
–
NULL
, 
dev
, 
blkno
, 
bsize
)

	)
259  
	#BWRITE
(
bp
) \

260 
	`bwrôe_comm⁄
–
NULL
, 
bp
, 0, \

262 (
B_READ
 | 
B_DONE
 | 
B_ERROR
 | 
B_DELWRI
))

	)
264  
	#BWRITE2
(
bp
) \

265 
	`bwrôe_comm⁄
–
NULL
, 
bp
, 1, \

267 (
B_READ
 | 
B_DONE
 | 
B_ERROR
 | 
B_DELWRI
))

	)
269  
	#GETBLK
(
dev
, 
blkno
, 
bsize
) \

270 
	`gëblk_comm⁄
–
NULL
, 
dev
, 
blkno
, 
bsize
, 0)

	)
280  
	#bdrwrôe
(
bp
) { \

281 (
bp
)->
b_Êags
 |
B_RETRYWRI
; \

282 
	`bdwrôe
((
bp
)); \

283 }

	)
288  
	#brwrôe
(
bp
) { \

289 (
bp
)->
b_Êags
 |
B_RETRYWRI
; \

290 
	`bwrôe_comm⁄
((
bp
), 0, 1, \

291 (
B_READ
 | 
B_DONE
 | 
B_ERROR
 | 
B_DELWRI
)); \

292 }

	)
294 
hbuf
 *hbuf;

295 
dwbuf
 *dwbuf;

296 
buf
 *buf;

297 
buf
 
b‰ìli°
;

299 (*
bio_lufs_°øãgy
)(*, 
buf_t
 *);

300 (*
bio_¢≠shŸ_°øãgy
)(*, 
buf_t
 *);

302 
bcheck
(
dev_t
, 
buf
 *);

303 
iowaô
(
buf
 *);

304 
hash2öts
(
x
, 
y
);

305 
bio_busy
();

306 
biowaô
(
buf
 *);

307 
biomodifõd
(
buf
 *);

308 
gëîr‹
(
buf
 *);

309 
möphys
(
buf
 *);

314 
bwrôe_comm⁄
(*
ufsvf•
, 
buf
 *, 
f‹˚_waô
,

315 
do_ªl£
, 
˛ór_Êags
);

316 
bwrôe
(
buf
 *);

317 
bwrôe2
(
buf
 *);

318 
bdwrôe
(
buf
 *);

319 
bawrôe
(
buf
 *);

320 
bªl£
(
buf
 *);

321 
iod⁄e
(
buf
 *);

322 
˛rbuf
(
buf
 *);

323 
bÊush
(
dev_t
);

324 
blkÊush
(
dev_t
, 
daddr_t
);

325 
bövÆ
(
dev_t
);

326 
bfövÆ
(
dev_t
, );

327 
böô
();

328 
biod⁄e
(
buf
 *);

329 
bioöô
(
buf
 *);

330 
bioföi
(
buf
 *);

331 
bp_m≠ö
(
buf
 *);

332 *
bp_m≠ö_comm⁄
(
buf
 *, );

333 
bp_m≠out
(
buf
 *);

334 
bp_öô
(
size_t
, 
uöt_t
);

335 
bp_cﬁ‹
(
buf
 *);

336 
∑geio_d⁄e
(
buf
 *);

337 
buf
 *
bªad
(
dev_t
, 
daddr_t
, );

338 
buf
 *
bªad_comm⁄
(*, 
dev_t
, 
daddr_t
, );

339 
buf
 *
bªada
(
dev_t
, 
daddr_t
, daddr_t, );

340 
buf
 *
gëblk
(
dev_t
, 
daddr_t
, );

341 
buf
 *
gëblk_comm⁄
(*, 
dev_t
, 
daddr_t
, , );

342 
buf
 *
ngëeblk
();

343 
buf
 *
gëeblk
();

344 
buf
 *
∑geio_£tup
(
∑ge
 *, 
size_t
, 
vnode
 *, );

345 
bi€º‹
(
buf
 *
bp
, 
îr‹
);

346 
bi‹e£t
(
buf
 *
bp
);

347 
buf
 *
bio˛⁄e
(bu‡*, 
off_t
, 
size_t
, 
dev_t
, 
daddr_t
,

348 (*)(
buf
 *), buf *, );

349 
size_t
 
biosize
();

352 #ifdef 
__˝lu•lus


	@/usr/include/sys/condvar.h

14 #i‚de‡
_SYS_CONDVAR_H


15  
	#_SYS_CONDVAR_H


	)
17 #¥agm®
idít
 "@(#)condvar.h 1.13 01/01/29 SMI"

19 #i‚def 
_ASM


20 
	~<sys/ty≥s.h
>

21 
	~<sys/time.h
>

22 #ifde‡
_KERNEL


23 
	~<sys/muãx.h
>

27 #ifdef 
__˝lu•lus


31 #i‚def 
_ASM


37 
	s_kc⁄dv¨
 {

38 
ush‹t_t
 
_›aque
;

39 } 
	tkc⁄dv¨_t
;

41 
	e
{

42 
	mCV_DEFAULT
,

43 
	mCV_DRIVER


44 } 
	tkcv_ty≥_t
;

47 #i‡
deföed
(
_KERNEL
)

53 
cv_öô
(
kc⁄dv¨_t
 *, *, 
kcv_ty≥_t
, *);

54 
cv_de°roy
(
kc⁄dv¨_t
 *);

55 
cv_waô
(
kc⁄dv¨_t
 *, 
kmuãx_t
 *);

56 
cv_waô_°›
(
kc⁄dv¨_t
 *, 
kmuãx_t
 *, );

57 
˛ock_t
 
cv_timedwaô
(
kc⁄dv¨_t
 *, 
kmuãx_t
 *, clock_t);

58 
cv_waô_sig
(
kc⁄dv¨_t
 *, 
kmuãx_t
 *);

59 
˛ock_t
 
cv_timedwaô_sig
(
kc⁄dv¨_t
 *, 
kmuãx_t
 *, clock_t);

60 
cv_waô_sig_sw≠
(
kc⁄dv¨_t
 *, 
kmuãx_t
 *);

61 
cv_sig«l
(
kc⁄dv¨_t
 *);

62 
cv_brﬂdˇ°
(
kc⁄dv¨_t
 *);

63 
cv_waôu¡û_sig
(
kc⁄dv¨_t
 *, 
kmuãx_t
 *, 
time°ruc_t
 *, );

69 #ifdef 
__˝lu•lus


	@/usr/include/sys/iso/signal_iso.h

25 #i‚de‡
_SYS_SIGNAL_ISO_H


26  
	#_SYS_SIGNAL_ISO_H


	)
28 #¥agm®
idít
 "@(#)signal_iso.h 1.2 01/04/05 SMI"

30 
	~<sys/uni°d.h
>

32 #ifdef 
__˝lu•lus


36  
	#SIGHUP
 1

	)
37  
	#SIGINT
 2

	)
38  
	#SIGQUIT
 3

	)
39  
	#SIGILL
 4

	)
40  
	#SIGTRAP
 5

	)
41  
	#SIGIOT
 6

	)
42  
	#SIGABRT
 6

	)
43  
	#SIGEMT
 7

	)
44  
	#SIGFPE
 8

	)
45  
	#SIGKILL
 9

	)
46  
	#SIGBUS
 10

	)
47  
	#SIGSEGV
 11

	)
48  
	#SIGSYS
 12

	)
49  
	#SIGPIPE
 13

	)
50  
	#SIGALRM
 14

	)
51  
	#SIGTERM
 15

	)
52  
	#SIGUSR1
 16

	)
53  
	#SIGUSR2
 17

	)
54  
	#SIGCLD
 18

	)
55  
	#SIGCHLD
 18

	)
56  
	#SIGPWR
 19

	)
57  
	#SIGWINCH
 20

	)
58  
	#SIGURG
 21

	)
59  
	#SIGPOLL
 22

	)
60  
	#SIGIO
 
SIGPOLL


	)
61  
	#SIGSTOP
 23

	)
62  
	#SIGTSTP
 24

	)
63  
	#SIGCONT
 25

	)
64  
	#SIGTTIN
 26

	)
65  
	#SIGTTOU
 27

	)
66  
	#SIGVTALRM
 28

	)
67  
	#SIGPROF
 29

	)
68  
	#SIGXCPU
 30

	)
69  
	#SIGXFSZ
 31

	)
70  
	#SIGWAITING
 32

	)
71  
	#SIGLWP
 33

	)
72  
	#SIGFREEZE
 34

	)
73  
	#SIGTHAW
 35

	)
74  
	#SIGCANCEL
 36

	)
75  
	#SIGLOST
 37

	)
76  
	#SIGXRES
 38

	)
79  
	#_SIGRTMIN
 39

	)
80  
	#_SIGRTMAX
 46

	)
81 
_sysc⁄f
();

82  
	#SIGRTMIN
 (()
	`_sysc⁄f
(
_SC_SIGRT_MIN
))

	)
83  
	#SIGRTMAX
 (()
	`_sysc⁄f
(
_SC_SIGRT_MAX
))

	)
85 #if 
deföed
(
__˝lu•lus
)

87 
	tSIG_FUNC_TYP
();

88 
SIG_FUNC_TYP
 *
	tSIG_TYP
;

89  
	#SIG_PF
 
SIG_TYP


	)
91  
	#SIG_DFL
 (
SIG_PF
)0

	)
92  
	#SIG_ERR
 (
SIG_PF
)-1

	)
93  
	#SIG_IGN
 (
SIG_PF
)1

	)
94  
	#SIG_HOLD
 (
SIG_PF
)2

	)
96 #ñif 
deföed
(
löt
)

98  
	#SIG_DFL
 ((*)())0

	)
99  
	#SIG_ERR
 ((*)())0

	)
100  
	#SIG_IGN
 ((*)())0

	)
101  
	#SIG_HOLD
 ((*)())0

	)
105  
	#SIG_DFL
 ((*)())0

	)
106  
	#SIG_ERR
 ((*)())-1

	)
107  
	#SIG_IGN
 ((*)())1

	)
108  
	#SIG_HOLD
 ((*)())2

	)
112  
	#SIG_BLOCK
 1

	)
113  
	#SIG_UNBLOCK
 2

	)
114  
	#SIG_SETMASK
 3

	)
116  
	#SIGNO_MASK
 0xFF

	)
117  
	#SIGDEFER
 0x100

	)
118  
	#SIGHOLD
 0x200

	)
119  
	#SIGRELSE
 0x400

	)
120  
	#SIGIGNORE
 0x800

	)
121  
	#SIGPAUSE
 0x1000

	)
123 #ifdef 
__˝lu•lus


	@/usr/include/sys/lwp.h

6 #i‚def 
_SYS_LWP_H


7  
	#_SYS_LWP_H


	)
9 #¥agm®
idít
 "@(#)lwp.h 1.31 00/02/18 SMI"

11 
	~<sys/synch.h
>

12 
	~<sys/uc⁄ãxt.h
>

14 #ifdef 
__˝lu•lus


21  
	#LWP_DAEMON
 0x00000020

	)
22  
	#LWP_DETACHED
 0x00000040

	)
23  
	#LWP_SUSPENDED
 0x00000080

	)
29  
	#__LWP_ASLWP
 0x00000100

	)
34 
	slwpöfo
 {

35 
time°ruc_t
 
lwp_utime
;

36 
time°ruc_t
 
lwp_°ime
;

37 
lwpöfo_∑d
[64];

40 #i‡
deföed
(
_SYSCALL32
)

44 
	slwpöfo32
 {

45 
time°ruc32_t
 
lwp_utime
;

46 
time°ruc32_t
 
lwp_°ime
;

47 
öt32_t
 
lwpöfo_∑d
[64];

52 #i‚de‡
_KERNEL


54 
	tlwpid_t
;

56 
_lwp_makec⁄ãxt
(
uc⁄ãxt_t
 *, ((*)(*)),

57 *, *, 
ˇddr_t
, 
size_t
);

58 
_lwp_¸óã
(
uc⁄ãxt_t
 *, 
uöt_t
, 
lwpid_t
 *);

59 
_lwp_kûl
(
lwpid_t
, );

60 
_lwp_öfo
(
lwpöfo
 *);

61 
_lwp_exô
();

62 
_lwp_waô
(
lwpid_t
,Üwpid_t *);

63 
_lwp_dëach
(
lwpid_t
);

64 
lwpid_t
 
_lwp_£lf
();

65 
_lwp_su•íd
(
lwpid_t
);

66 
_lwp_su•íd2
(
lwpid_t
, *);

67 
_lwp_c⁄töue
(
lwpid_t
);

68 
_lwp_£çriv©e
(*);

69 * 
_lwp_gë¥iv©e
();

73 #ifdef 
__˝lu•lus


	@/usr/include/sys/machlock.h

6 #i‚de‡
_SYS_MACHLOCK_H


7  
	#_SYS_MACHLOCK_H


	)
9 #¥agm®
idít
 "@(#)machlock.h 1.22 01/10/31 SMI"

11 #ifdef 
__˝lu•lus


15 #i‚def 
_ASM


17 
	~<sys/ty≥s.h
>

19 #ifde‡
__•¨cv9˝u


20 
	~<v9/sys/¥ivªgs.h
>

22 
	~<v7/sys/¥ivªgs.h
>

25 #ifde‡
_KERNEL


27 
lock_£t
(
lock_t
 *
Õ
);

28 
lock_åy
(
lock_t
 *
Õ
);

29 
ulock_åy
(
lock_t
 *
Õ
);

30 
ulock_˛ór
(
lock_t
 *
Õ
);

31 
lock_˛ór
(
lock_t
 *
Õ
);

32 
lock_£t_•l
(
lock_t
 *
Õ
, 
√w_pû
, 
ush‹t_t
 *
ﬁd_pû
);

33 
lock_˛ór_•lx
(
lock_t
 *
Õ
, 
s
);

37  
	#LOCK_HELD_VALUE
 0xff

	)
38  
	#LOCK_INIT_CLEAR
(
Õ
) (*÷pË0)

	)
39  
	#LOCK_INIT_HELD
(
Õ
) (*÷pË
LOCK_HELD_VALUE
)

	)
40  
	#LOCK_HELD
(
Õ
) (*(vﬁ©ûê
lock_t
 *)÷pË!0)

	)
42 
lock_t
 
	tdi•_lock_t
;

48  
	#SPIN_LOCK
(
∂
) (’lË> 
	`ù…o•l
(
LOCK_LEVEL
))

	)
56  
	#LOCK_SAMPLE_INTERVAL
(
i
) (((iË& 0xffË=0)

	)
61 
hªs_lock
;

87  
	#CLOCK_LEVEL
 10

	)
88  
	#LOCK_LEVEL
 10

	)
89  
	#DISP_LEVEL
 (
LOCK_LEVEL
 + 1)

	)
91  
	#HIGH_LEVELS
 (
PIL_MAX
 - 
LOCK_LEVEL
)

	)
101  
	#PTR24_LSB
 5

	)
102  
	#PTR24_MSB
 (
PTR24_LSB
 + 24)

	)
103  
	#PTR24_ALIGN
 32

	)
104  
	#PTR24_BASE
 0xe0000000

	)
106 #ifdef 
__˝lu•lus


	@/usr/include/sys/msacct.h

5 #i‚def 
_SYS_MSACCT_H


6  
	#_SYS_MSACCT_H


	)
8 #¥agm®
idít
 "@(#)msacct.h 1.7 93/07/13 SMI"

10 #ifdef 
__˝lu•lus


15  
	#LMS_USER
 0

	)
16  
	#LMS_SYSTEM
 1

	)
17  
	#LMS_TRAP
 2

	)
18  
	#LMS_TFAULT
 3

	)
19  
	#LMS_DFAULT
 4

	)
20  
	#LMS_KFAULT
 5

	)
21  
	#LMS_USER_LOCK
 6

	)
22  
	#LMS_SLEEP
 7

	)
23  
	#LMS_WAIT_CPU
 8

	)
24  
	#LMS_STOPPED
 9

	)
30  
	#NMSTATES
 10

	)
32 #ifdef 
__˝lu•lus


	@/usr/include/sys/rwlock.h

6 #i‚de‡
_SYS_RWLOCK_H


7  
	#_SYS_RWLOCK_H


	)
9 #¥agm®
idít
 "@(#)rwlock.h 1.9 98/02/18 SMI"

15 
	~<sys/ty≥s.h
>

17 #ifdef 
__˝lu•lus


21 #i‚de‡
_ASM


23 
	e
{

24 
RW_DRIVER
 = 2,

25 
RW_DEFAULT
 = 4

26 } 
	tkrw_ty≥_t
;

28 
	e
{

29 
	mRW_WRITER
,

30 
	mRW_READER


31 } 
	tkrw_t
;

33 
	s_krwlock
 {

34 *
	m_›aque
[1];

35 } 
	tkrwlock_t
;

37 #i‡
deföed
(
_KERNEL
)

39  
	#RW_READ_HELD
(
x
) (
	`rw_ªad_hñd
((x)))

	)
40  
	#RW_WRITE_HELD
(
x
) (
	`rw_wrôe_hñd
((x)))

	)
41  
	#RW_LOCK_HELD
(
x
) (
	`rw_lock_hñd
((x)))

	)
42  
	#RW_ISWRITER
(
x
) (
	`rw_iswrôî
(x))

	)
44 
rw_öô
(
krwlock_t
 *, *, 
krw_ty≥_t
, *);

45 
rw_de°roy
(
krwlock_t
 *);

46 
rw_íãr
(
krwlock_t
 *, 
krw_t
);

47 
rw_åyíãr
(
krwlock_t
 *, 
krw_t
);

48 
rw_exô
(
krwlock_t
 *);

49 
rw_downgøde
(
krwlock_t
 *);

50 
rw_åyupgøde
(
krwlock_t
 *);

51 
rw_ªad_hñd
(
krwlock_t
 *);

52 
rw_wrôe_hñd
(
krwlock_t
 *);

53 
rw_lock_hñd
(
krwlock_t
 *);

54 
rw_ªad_locked
(
krwlock_t
 *);

55 
rw_iswrôî
(
krwlock_t
 *);

56 
_kthªad
 *
rw_ow√r
(
krwlock_t
 *);

62 #ifdef 
__˝lu•lus


	@/usr/include/sys/semaphore.h

6 #i‚de‡
_SYS_SEMAPHORE_H


7  
	#_SYS_SEMAPHORE_H


	)
9 #¥agm®
idít
 "@(#)semaphore.h 1.5 98/02/01 SMI"

15 #i‚def 
_ASM


17 #ifde‡
_KERNEL


18 
	~<sys/thªad.h
>

21 #ifdef 
__˝lu•lus


25 
	e
{

26 
SEMA_DEFAULT
,

27 
SEMA_DRIVER


28 } 
	tk£ma_ty≥_t
;

30 
	s_k£ma
 {

31 * 
_›aque
[2];

32 } 
	tk£ma_t
;

34 #i‡
deföed
(
_KERNEL
)

36  
	#SEMA_HELD
(
x
) (
	`£ma_hñd
((x)))

	)
38 
£ma_öô
(
k£ma_t
 *, 
uöt32_t
, *, 
k£ma_ty≥_t
, *);

39 
£ma_de°roy
(
k£ma_t
 *);

40 
£ma_p
(
k£ma_t
 *);

41 
£ma_p_sig
(
k£ma_t
 *);

42 
£ma_v
(
k£ma_t
 *);

43 
£ma_åyp
(
k£ma_t
 *);

44 
£ma_hñd
(
k£ma_t
 *);

48 #ifdef 
__˝lu•lus


	@/usr/include/sys/ucontext.h

13 #i‚de‡
_SYS_UCONTEXT_H


14  
	#_SYS_UCONTEXT_H


	)
16 #¥agm®
idít
 "@(#)ucontext.h 1.29 04/03/27 SMI"

18 
	~<sys/„©uª_ã°s.h
>

20 
	~<sys/ty≥s.h
>

21 
	~<sys/ªg£t.h
>

22 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

23 
	~<sys/sig«l.h
>

26 #ifdef 
__˝lu•lus


36 #i‡
deföed
(
_XPG4_2
Ë&& !deföed(
__EXTENSIONS__
)

37 #i‚def 
_SIGSET_T


38  
	#_SIGSET_T


	)
39 
	s
{

40 
__sigbôs
[4];

41 } 
	tsig£t_t
;

44 #i‚def 
_STACK_T


45  
	#_STACK_T


	)
46 
	s
{

47 *
	mss_•
;

48 
size_t
 
	mss_size
;

49 
	mss_Êags
;

50 } 
	t°ack_t
;

55 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

56 
uc⁄ãxt
 
	tuc⁄ãxt_t
;

58 
__uc⁄ãxt
 
	tuc⁄ãxt_t
;

61 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

62 
	suc⁄ãxt
 {

64 
	s__uc⁄ãxt
 {

66 
uöt_t
 
	muc_Êags
;

67 
uc⁄ãxt_t
 *
	muc_lök
;

68 
sig£t_t
 
	muc_sigmask
;

69 
°ack_t
 
	muc_°ack
;

70 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

71 #ifdef 
__•¨cv9


72 
	muc_fûÀr
[4];

74 
	muc_fûÀr
[23];

78 #ifde‡
_SYSCALL32


82 
	suc⁄ãxt32
 {

83 
uöt32_t
 
	muc_Êags
;

84 
ˇddr32_t
 
	muc_lök
;

85 
sig£t32_t
 
	muc_sigmask
;

86 
°ack32_t
 
	muc_°ack
;

87 
mc⁄ãxt32_t
 
	muc_mc⁄ãxt
;

88 
öt32_t
 
	muc_fûÀr
[23];

89 } 
	tuc⁄ãxt32_t
;

91 #ifde‡
_KERNEL


92 
uc⁄ãxt_32t⁄
(c⁄° 
uc⁄ãxt32_t
 *, 
uc⁄ãxt_t
 *,

93 c⁄° 
fq32
 *, 
fq
 *);

94 
Âuªg£t_¡o32
(c⁄° 
Âªg£t_t
 *, 
Âªg£t32_t
 *, 
fq32
 *);

99 #i‡!
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

100  
	#GETCONTEXT
 0

	)
101  
	#SETCONTEXT
 1

	)
102  
	#GETUSTACK
 2

	)
103  
	#SETUSTACK
 3

	)
112  
	#UC_SIGMASK
 0x01

	)
113  
	#UC_STACK
 0x02

	)
114  
	#UC_CPU
 0x04

	)
115  
	#UC_MAU
 0x08

	)
116  
	#UC_FPU
 
UC_MAU


	)
117  
	#UC_INTR
 0x10

	)
118  
	#UC_ASR
 0x20

	)
120  
	#UC_MCONTEXT
 (
UC_CPU
|
UC_FPU
|
UC_ASR
)

	)
126  
	#UC_ALL
 (
UC_SIGMASK
|
UC_STACK
|
UC_MCONTEXT
)

	)
129 #ifde‡
_KERNEL


130 
ßvec⁄ãxt
(
uc⁄ãxt_t
 *, 
k_sig£t_t
);

131 
ª°‹ec⁄ãxt
(
uc⁄ãxt_t
 *);

133 #ifde‡
_SYSCALL32


134 
ßvec⁄ãxt32
(
uc⁄ãxt32_t
 *, 
k_sig£t_t
, 
fq32
 *);

138 #ifdef 
__˝lu•lus


	@/usr/include/sys/uio.h

13 #i‚de‡
_SYS_UIO_H


14  
	#_SYS_UIO_H


	)
16 #¥agm®
idít
 "@(#)uio.h 1.30 01/03/19 SMI"

18 
	~<sys/„©uª_ã°s.h
>

20 #ifdef 
__˝lu•lus


24 
	~<sys/ty≥s.h
>

33 #if 
deföed
(
_XPG4_2
)

34 
	siovec
 {

35 *
iov_ba£
;

36 
size_t
 
iov_Àn
;

37 } 
	tiovec_t
;

39 
	siovec
 {

40 
ˇddr_t
 
iov_ba£
;

41 #i‡
deföed
(
_LP64
)

42 
size_t
 
iov_Àn
;

44 
iov_Àn
;

46 } 
	tiovec_t
;

49 #i‡
deföed
(
_SYSCALL32
)

53 
	siovec32
 {

54 
ˇddr32_t
 
iov_ba£
;

55 
öt32_t
 
iov_Àn
;

56 } 
	tiovec32_t
;

60 #i‡ !
deföed
(
_XPG4_2
Ë|| deföed(
__EXTENSIONS__
)

64 
	euio_£g
 { 
UIO_USERSPACE
, 
UIO_SYSSPACE
, 
UIO_USERISPACE
 } 
	tuio_£g_t
;

66 
	suio
 {

67 
iovec_t
 *
uio_iov
;

68 
uio_iov˙t
;

69 
Œoff_t
 
_uio_off£t
;

70 
uio_£g_t
 
uio_£gÊg
;

71 
uio_fmode
;

72 
Œoff_t
 
_uio_limô
;

73 
ssize_t
 
uio_ªsid
;

74 } 
	tuio_t
;

76  
	#uio_loff£t
 
_uio_off£t
.
_f


	)
77 #i‡!
deföed
(
_LP64
)

78  
	#uio_off£t
 
_uio_off£t
.
_p
.
_l


	)
80  
	#uio_off£t
 
uio_loff£t


	)
83  
	#uio_Œimô
 
_uio_limô
.
_f


	)
84 #i‡!
deföed
(
_LP64
)

85  
	#uio_limô
 
_uio_limô
.
_p
.
_l


	)
87  
	#uio_limô
 
uio_Œimô


	)
93 
	euio_rw
 { 
UIO_READ
, 
UIO_WRITE
 } 
	tuio_rw_t
;

96 #if 
deföed
(
_KERNEL
)

98 
uiomove
(*, 
size_t
, 
uio_rw
, 
uio_t
 *);

99 
uªadc
(, 
uio_t
 *);

100 
uwrôec
(
uio
 *);

101 
uiomvuio
(
uio_t
 *, uio_t *);

102 
uioskù
(
uio_t
 *, 
size_t
);

103 
uiodup
(
uio_t
 *, uio_à*, 
iovec_t
 *, );

104 
uioùc›yö
(*, 
size_t
, 
uio_t
 *, *, , );

105 
uioùc›yout
(*, 
size_t
, 
uio_t
 *, *, , );

106 
ui›ageÊù
(*, 
size_t
, 
uio_t
 *);

110 #i‡ 
deföed
(
__STDC__
)

112 
ssize_t
 
ªadv
(, c⁄° 
iovec
 *, );

113 
ssize_t
 
wrôev
(, c⁄° 
iovec
 *, );

117 
ssize_t
 
ªadv
();

118 
ssize_t
 
wrôev
();

124 #ifdef 
__˝lu•lus


	@/usr/include/sys/vmem.h

6 #i‚de‡
_SYS_VMEM_H


7  
	#_SYS_VMEM_H


	)
9 #¥agm®
idít
 "@(#)vmem.h 1.6 03/02/06 SMI"

11 
	~<sys/ty≥s.h
>

13 #ifdef 
__˝lu•lus


20  
	#VM_SLEEP
 0x00000000

	)
21  
	#VM_NOSLEEP
 0x00000001

	)
22  
	#VM_PANIC
 0x00000002

	)
23  
	#VM_PUSHPAGE
 0x00000004

	)
24  
	#VM_KMFLAGS
 0x000000ff

	)
26  
	#VM_BESTFIT
 0x00000100

	)
27  
	#VM_FIRSTFIT
 0x00000200

	)
28  
	#VM_NEXTFIT
 0x00000400

	)
30  
	#VM_FLAGS
 0x0000FFFF

	)
35  
	#VMC_POPULATOR
 0x00010000

	)
37  
	#VMC_FLAGS
 0xFFFF0000

	)
42  
	#VMEM_ALLOC
 0x01

	)
43  
	#VMEM_FREE
 0x02

	)
48  
	#VMEM_SPAN
 0x10

	)
49  
	#VMEM_ROTOR
 0x20

	)
50  
	#VMEM_WALKER
 0x40

	)
61  
	#VMEM_REENTRANT
 0x80000000

	)
63 
vmem
 
	tvmem_t
;

64 *(
	tvmem_Æloc_t
)(
	tvmem_t
 *, 
	tsize_t
, );

65 (
vmem_‰ì_t
)(
	tvmem_t
 *, *, 
	tsize_t
);

67 #ifde‡
_KERNEL


68 
vmem_t
 *
vmem_öô
(c⁄° *, *, 
size_t
, size_t,

69 
vmem_Æloc_t
 *, 
vmem_‰ì_t
 *);

70 
vmem_upd©e
(*);

71 
size_t
 
vmem_£g_size
;

74 
vmem_t
 *
vmem_¸óã
(c⁄° *, *, 
size_t
, size_t,

75 
vmem_Æloc_t
 *, 
vmem_‰ì_t
 *, 
vmem_t
 *, 
size_t
, );

76 
vmem_de°roy
(
vmem_t
 *);

77 *
vmem_Æloc
(
vmem_t
 *, 
size_t
, );

78 *
vmem_xÆloc
(
vmem_t
 *, 
size_t
, size_t, size_t, size_t,

80 
vmem_‰ì
(
vmem_t
 *, *, 
size_t
);

81 
vmem_x‰ì
(
vmem_t
 *, *, 
size_t
);

82 *
vmem_add
(
vmem_t
 *, *, 
size_t
, );

83 
vmem_c⁄èös
(
vmem_t
 *, *, 
size_t
);

84 
vmem_wÆk
(
vmem_t
 *, , (*)(*, *, 
size_t
), *);

85 
size_t
 
vmem_size
(
vmem_t
 *, );

87 #ifdef 
__˝lu•lus


	@/usr/include/v7/sys/privregs.h

6 #i‚de‡
_SYS_PRIVREGS_H


7  
	#_SYS_PRIVREGS_H


	)
9 #¥agm®
idít
 "@(#)privregs.h 1.5 99/06/05 SMI"

11 #ifdef 
__˝lu•lus


24 
	~<v7/sys/p§.h
>

25 
	~<sys/f§.h
>

27 #i‚def 
_ASM


29 
	sªgs
 {

30 
r_p§
;

31 
r_pc
;

32 
r_≈c
;

33 
r_y
;

34 
r_g1
;

35 
r_g2
;

36 
r_g3
;

37 
r_g4
;

38 
r_g5
;

39 
r_g6
;

40 
r_g7
;

41 
r_o0
;

42 
r_o1
;

43 
r_o2
;

44 
r_o3
;

45 
r_o4
;

46 
r_o5
;

47 
r_o6
;

48 
r_o7
;

51  
	#r_ps
 
r_p§


	)
52  
	#r_r0
 
r_o0


	)
53  
	#r_•
 
r_o6


	)
57 #ifde‡
_KERNEL


59  
	#PIL_MAX
 0xf

	)
61  
	#lw±‹egs
(
lwp
) ((
ªgs
 *)(÷wp)->
lwp_ªgs
))

	)
62  
	#lw±oÂu
(
lwp
) ((
Âu
 *)(÷wp)->
lwp_Âu
))

	)
68  
	#SAVE_GLOBALS
(
RP
) \

69 
°
 %
g1
, [
RP
 + 
G1
*4]; \

70 
°d
 %
g2
, [
RP
 + 
G2
*4]; \

71 
°d
 %
g4
, [
RP
 + 
G4
*4]; \

72 
°d
 %
g6
, [
RP
 + 
G6
*4]; \

73 
mov
 %
y
, %
g1
; \

74 
°
 %
g1
, [
RP
 + 
Y
*4]

	)
76  
	#RESTORE_GLOBALS
(
RP
) \

77 
ld
 [
RP
 + 
Y
*4], %
g1
; \

78 
mov
 %
g1
, %
y
; \

79 
ld
 [
RP
 + 
G1
*4], %
g1
; \

80 
ldd
 [
RP
 + 
G2
*4], %
g2
; \

81 
ldd
 [
RP
 + 
G4
*4], %
g4
; \

82 
ldd
 [
RP
 + 
G6
*4], %
g6
;

	)
84  
	#SAVE_OUTS
(
RP
) \

85 
°d
 %
i0
, [
RP
 + 
O0
*4]; \

86 
°d
 %
i2
, [
RP
 + 
O2
*4]; \

87 
°d
 %
i4
, [
RP
 + 
O4
*4]; \

88 
°d
 %
i6
, [
RP
 + 
O6
*4];

	)
90  
	#RESTORE_OUTS
(
RP
) \

91 
ldd
 [
RP
 + 
O0
*4], %
i0
; \

92 
ldd
 [
RP
 + 
O2
*4], %
i2
; \

93 
ldd
 [
RP
 + 
O4
*4], %
i4
; \

94 
ldd
 [
RP
 + 
O6
*4], %
i6
;

	)
96  
	#SAVE_WINDOW
(
SBP
) \

97 
°d
 %
l0
, [
SBP
 + (0*4)]; \

98 
°d
 %
l2
, [
SBP
 + (2*4)]; \

99 
°d
 %
l4
, [
SBP
 + (4*4)]; \

100 
°d
 %
l6
, [
SBP
 + (6*4)]; \

101 
°d
 %
i0
, [
SBP
 + (8*4)]; \

102 
°d
 %
i2
, [
SBP
 + (10*4)]; \

103 
°d
 %
i4
, [
SBP
 + (12*4)]; \

104 
°d
 %
i6
, [
SBP
 + (14*4)];

	)
106  
	#RESTORE_WINDOW
(
SBP
) \

107 
ldd
 [
SBP
 + (0*4)], %
l0
; \

108 
ldd
 [
SBP
 + (2*4)], %
l2
; \

109 
ldd
 [
SBP
 + (4*4)], %
l4
; \

110 
ldd
 [
SBP
 + (6*4)], %
l6
; \

111 
ldd
 [
SBP
 + (8*4)], %
i0
; \

112 
ldd
 [
SBP
 + (10*4)], %
i2
; \

113 
ldd
 [
SBP
 + (12*4)], %
i4
; \

114 
ldd
 [
SBP
 + (14*4)], %
i6
;

	)
116  
	#STORE_FPREGS
(
FP
) \

117 
°d
 %
f0
, [
FP
]; \

118 
°d
 %
f2
, [
FP
 + 8]; \

119 
°d
 %
f4
, [
FP
 + 16]; \

120 
°d
 %
f6
, [
FP
 + 24]; \

121 
°d
 %
f8
, [
FP
 + 32]; \

122 
°d
 %
f10
, [
FP
 + 40]; \

123 
°d
 %
f12
, [
FP
 + 48]; \

124 
°d
 %
f14
, [
FP
 + 56]; \

125 
°d
 %
f16
, [
FP
 + 64]; \

126 
°d
 %
f18
, [
FP
 + 72]; \

127 
°d
 %
f20
, [
FP
 + 80]; \

128 
°d
 %
f22
, [
FP
 + 88]; \

129 
°d
 %
f24
, [
FP
 + 96]; \

130 
°d
 %
f26
, [
FP
 + 104]; \

131 
°d
 %
f28
, [
FP
 + 112]; \

132 
°d
 %
f30
, [
FP
 + 120];

	)
134  
	#LOAD_FPREGS
(
FP
) \

135 
ldd
 [
FP
], %
f0
; \

136 
ldd
 [
FP
 + 8], %
f2
; \

137 
ldd
 [
FP
 + 16], %
f4
; \

138 
ldd
 [
FP
 + 24], %
f6
; \

139 
ldd
 [
FP
 + 32], %
f8
; \

140 
ldd
 [
FP
 + 40], %
f10
; \

141 
ldd
 [
FP
 + 48], %
f12
; \

142 
ldd
 [
FP
 + 56], %
f14
; \

143 
ldd
 [
FP
 + 64], %
f16
; \

144 
ldd
 [
FP
 + 72], %
f18
; \

145 
ldd
 [
FP
 + 80], %
f20
; \

146 
ldd
 [
FP
 + 88], %
f22
; \

147 
ldd
 [
FP
 + 96], %
f24
; \

148 
ldd
 [
FP
 + 104], %
f26
; \

149 
ldd
 [
FP
 + 112], %
f28
; \

150 
ldd
 [
FP
 + 120], %
f30
;

	)
154 #ifdef 
__˝lu•lus


	@/usr/include/sys/fsr.h

5 #i‚de‡
_SYS_FSR_H


6  
	#_SYS_FSR_H


	)
8 #¥agm®
idít
 "@(#)fsr.h 1.3 97/02/11 SMI"

10 #ifdef 
__˝lu•lus


36  
	#FSR_CEXC
 0x0000001f

	)
37  
	#FSR_AEXC
 0x000003e0

	)
38  
	#FSR_FCC
 0x00000c00

	)
39  
	#FSR_PR
 0x00001000

	)
40  
	#FSR_QNE
 0x00002000

	)
41  
	#FSR_FTT
 0x0001c000

	)
42  
	#FSR_VER
 0x000e0000

	)
43  
	#FSR_TEM
 0x0f800000

	)
44  
	#FSR_RP
 0x30000000

	)
45  
	#FSR_RD
 0xc0000000

	)
46  
	#FSR_VER_SHIFT
 17

	)
47  
	#FSR_FCC1
 0x00000003

	)
48  
	#FSR_FCC2
 0x0000000C

	)
49  
	#FSR_FCC3
 0x00000030

	)
54  
	#FSR_CEXC_NX
 0x00000001

	)
55  
	#FSR_CEXC_DZ
 0x00000002

	)
56  
	#FSR_CEXC_UF
 0x00000004

	)
57  
	#FSR_CEXC_OF
 0x00000008

	)
58  
	#FSR_CEXC_NV
 0x00000010

	)
63  
	#FSR_AEXC_NX
 (0x1 << 5)

	)
64  
	#FSR_AEXC_DZ
 (0x2 << 5)

	)
65  
	#FSR_AEXC_UF
 (0x4 << 5)

	)
66  
	#FSR_AEXC_OF
 (0x8 << 5)

	)
67  
	#FSR_AEXC_NV
 (0x10 << 5)

	)
72  
	#FTT_NONE
 0

	)
73  
	#FTT_IEEE
 1

	)
74  
	#FTT_UNFIN
 2

	)
75  
	#FTT_UNIMP
 3

	)
76  
	#FTT_SEQ
 4

	)
77  
	#FTT_ALIGN
 5

	)
78  
	#FTT_DFAULT
 6

	)
79  
	#FSR_FTT_SHIFT
 14

	)
80  
	#FSR_FTT_IEEE
 (
FTT_IEEE
 << 
FSR_FTT_SHIFT
)

	)
81  
	#FSR_FTT_UNFIN
 (
FTT_UNFIN
 << 
FSR_FTT_SHIFT
)

	)
82  
	#FSR_FTT_UNIMP
 (
FTT_UNIMP
 << 
FSR_FTT_SHIFT
)

	)
83  
	#FSR_FTT_SEQ
 (
FTT_SEQ
 << 
FSR_FTT_SHIFT
)

	)
84  
	#FSR_FTT_ALIGN
 (
FTT_ALIGN
 << 
FSR_FTT_SHIFT
)

	)
85  
	#FSR_FTT_DFAULT
 (
FTT_DFAULT
 << 
FSR_FTT_SHIFT
)

	)
90  
	#FSR_TEM_NX
 (0x1 << 23)

	)
91  
	#FSR_TEM_DZ
 (0x2 << 23)

	)
92  
	#FSR_TEM_UF
 (0x4 << 23)

	)
93  
	#FSR_TEM_OF
 (0x8 << 23)

	)
94  
	#FSR_TEM_NV
 (0x10 << 23)

	)
99  
	#RP_DBLEXT
 0

	)
100  
	#RP_SINGLE
 1

	)
101  
	#RP_DOUBLE
 2

	)
102  
	#RP_RESERVED
 3

	)
107  
	#RD_NEAR
 0

	)
108  
	#RD_ZER0
 1

	)
109  
	#RD_POSINF
 2

	)
110  
	#RD_NEGINF
 3

	)
122  
	#FPRS_DL
 0x1

	)
123  
	#FPRS_DU
 0x2

	)
124  
	#FPRS_FEF
 0x4

	)
126 #ifdef 
__˝lu•lus


	@/usr/include/sys/kstat.h

6 #i‚def 
_SYS_KSTAT_H


7  
	#_SYS_KSTAT_H


	)
9 #¥agm®
idít
 "@(#)kstat.h 1.17 01/10/04 SMI"

15 
	~<sys/ty≥s.h
>

16 
	~<sys/time.h
>

18 #ifdef 
__˝lu•lus


22 
	tkid_t
;

28  
	#KSTAT_IOC_BASE
 ('K' << 8)

	)
30  
	#KSTAT_IOC_CHAIN_ID
 
KSTAT_IOC_BASE
 | 0x01

	)
31  
	#KSTAT_IOC_READ
 
KSTAT_IOC_BASE
 | 0x02

	)
32  
	#KSTAT_IOC_WRITE
 
KSTAT_IOC_BASE
 | 0x03

	)
42  
	#KSTAT_STRLEN
 31

	)
48 
	sk°©
 {

52 
hπime_t
 
ks_¸time
;

53 
k°©
 *
ks_√xt
;

54 
kid_t
 
ks_kid
;

55 
ks_moduÀ
[
KSTAT_STRLEN
];

56 
uch¨_t
 
ks_ªsv
;

57 
ks_ö°™˚
;

58 
ks_«me
[
KSTAT_STRLEN
];

59 
uch¨_t
 
ks_ty≥
;

60 
ks_˛ass
[
KSTAT_STRLEN
];

61 
uch¨_t
 
ks_Êags
;

62 *
ks_d©a
;

63 
uöt_t
 
ks_nd©a
;

64 
size_t
 
ks_d©a_size
;

65 
hπime_t
 
ks_¢≠time
;

69 (*
ks_upd©e
)(
k°©
 *, );

70 *
ks_¥iv©e
;

71 (*
ks_¢≠shŸ
)(
k°©
 *, *, );

72 *
ks_lock
;

73 } 
	tk°©_t
;

75 #ifde‡
_SYSCALL32


77 
öt32_t
 
	tkid32_t
;

79 
	sk°©32
 {

83 
hπime_t
 
ks_¸time
;

84 
ˇddr32_t
 
ks_√xt
;

85 
kid32_t
 
ks_kid
;

86 
ks_moduÀ
[
KSTAT_STRLEN
];

87 
uöt8_t
 
ks_ªsv
;

88 
öt32_t
 
ks_ö°™˚
;

89 
ks_«me
[
KSTAT_STRLEN
];

90 
uöt8_t
 
ks_ty≥
;

91 
ks_˛ass
[
KSTAT_STRLEN
];

92 
uöt8_t
 
ks_Êags
;

93 
ˇddr32_t
 
ks_d©a
;

94 
uöt32_t
 
ks_nd©a
;

95 
size32_t
 
ks_d©a_size
;

96 
hπime_t
 
ks_¢≠time
;

100 
öt32_t
 
_ks_upd©e
;

101 
ˇddr32_t
 
_ks_¥iv©e
;

102 
öt32_t
 
_ks_¢≠shŸ
;

103 
ˇddr32_t
 
_ks_lock
;

104 } 
	tk°©32_t
;

131 #if 
deföed
(
_KERNEL
)

133  
	#KSTAT_ENTER
(
k
) \

134 { 
kmuãx_t
 *
Õ
 = (
k
)->
ks_lock
; ÕË
	`muãx_íãr
÷p); }

	)
136  
	#KSTAT_EXIT
(
k
) \

137 { 
kmuãx_t
 *
Õ
 = (
k
)->
ks_lock
; ÕË
	`muãx_exô
÷p); }

	)
139  
	#KSTAT_UPDATE
(
k
, 
rw
) (*(k)->
ks_upd©e
)((k), (rw))

	)
141  
	#KSTAT_SNAPSHOT
(
k
, 
buf
, 
rw
) (*(k)->
ks_¢≠shŸ
)((k), (buf), (rw))

	)
201  
	#KSTAT_TYPE_RAW
 0

	)
203  
	#KSTAT_TYPE_NAMED
 1

	)
205  
	#KSTAT_TYPE_INTR
 2

	)
207  
	#KSTAT_TYPE_IO
 3

	)
209  
	#KSTAT_TYPE_TIMER
 4

	)
212  
	#KSTAT_NUM_TYPES
 5

	)
281  
	#KSTAT_FLAG_VIRTUAL
 0x01

	)
282  
	#KSTAT_FLAG_VAR_SIZE
 0x02

	)
283  
	#KSTAT_FLAG_WRITABLE
 0x04

	)
284  
	#KSTAT_FLAG_PERSISTENT
 0x08

	)
285  
	#KSTAT_FLAG_DORMANT
 0x10

	)
286  
	#KSTAT_FLAG_INVALID
 0x20

	)
328  
	#KSTAT_READ
 0

	)
329  
	#KSTAT_WRITE
 1

	)
423 
	sk°©_«med
 {

424 
«me
[
KSTAT_STRLEN
];

425 
uch¨_t
 
d©a_ty≥
;

426 
	u
{

427 
c
[16];

428 
öt32_t
 
i32
;

429 
uöt32_t
 
ui32
;

430 
	s
{

431 
	u
{

432 *
±r
;

433 #i‡
deföed
(
_KERNEL
Ë&& deföed(
_MULTI_DATAMODEL
)

434 
ˇddr32_t
 
±r32
;

436 
__∑d
[8];

437 } 
addr
;

438 
uöt32_t
 
Àn
;

439 } 
°rög
;

446 #i‡
deföed
(
_LP64
Ë|| (
__STDC__
 - 0 =0 && !deföed(
_NO_LONGLONG
))

447 
öt64_t
 
i64
;

448 
uöt64_t
 
ui64
;

450 
l
;

451 
ul⁄g_t
 
ul
;

455 
l⁄gl⁄g_t
 
Œ
;

456 
u_l⁄gl⁄g_t
 
uŒ
;

457 
f
;

458 
d
;

459 } 
vÆue
;

460 } 
	tk°©_«med_t
;

462  
	#KSTAT_DATA_CHAR
 0

	)
463  
	#KSTAT_DATA_INT32
 1

	)
464  
	#KSTAT_DATA_UINT32
 2

	)
465  
	#KSTAT_DATA_INT64
 3

	)
466  
	#KSTAT_DATA_UINT64
 4

	)
468 #i‡!
deföed
(
_LP64
)

469  
	#KSTAT_DATA_LONG
 
KSTAT_DATA_INT32


	)
470  
	#KSTAT_DATA_ULONG
 
KSTAT_DATA_UINT32


	)
472 #i‡!
deföed
(
_KERNEL
)

473  
	#KSTAT_DATA_LONG
 
KSTAT_DATA_INT64


	)
474  
	#KSTAT_DATA_ULONG
 
KSTAT_DATA_UINT64


	)
476  
	#KSTAT_DATA_LONG
 7

	)
477  
	#KSTAT_DATA_ULONG
 8

	)
497  
	#KSTAT_DATA_STRING
 9

	)
501  
	#KSTAT_DATA_LONGLONG
 
KSTAT_DATA_INT64


	)
502  
	#KSTAT_DATA_ULONGLONG
 
KSTAT_DATA_UINT64


	)
503  
	#KSTAT_DATA_FLOAT
 5

	)
504  
	#KSTAT_DATA_DOUBLE
 6

	)
506  
	#KSTAT_NAMED_PTR
(
k±r
) ((
k°©_«med_t
 *)(k±r)->
ks_d©a
)

	)
511  
	#KSTAT_NAMED_STR_PTR
(
k≈å
Ë((k≈å)->
vÆue
.
°rög
.
addr
.
±r
)

	)
517  
	#KSTAT_NAMED_STR_BUFLEN
(
k≈å
Ë((k≈å)->
vÆue
.
°rög
.
Àn
)

	)
538  
	#KSTAT_INTR_HARD
 0

	)
539  
	#KSTAT_INTR_SOFT
 1

	)
540  
	#KSTAT_INTR_WATCHDOG
 2

	)
541  
	#KSTAT_INTR_SPURIOUS
 3

	)
542  
	#KSTAT_INTR_MULTSVC
 4

	)
544  
	#KSTAT_NUM_INTRS
 5

	)
546 
	sk°©_öå
 {

547 
uöt_t
 
öås
[
KSTAT_NUM_INTRS
];

548 } 
	tk°©_öå_t
;

550  
	#KSTAT_INTR_PTR
(
k±r
) ((
k°©_öå_t
 *)(k±r)->
ks_d©a
)

	)
556 
	sk°©_io
 {

565 
u_l⁄gl⁄g_t
 
ƒód
;

566 
u_l⁄gl⁄g_t
 
nwrôãn
;

567 
uöt_t
 
ªads
;

568 
uöt_t
 
wrôes
;

643 
hπime_t
 
wtime
;

644 
hπime_t
 
wÀ¡ime
;

645 
hπime_t
 
wœ°upd©e
;

646 
hπime_t
 
πime
;

647 
hπime_t
 
æítime
;

648 
hπime_t
 
æa°upd©e
;

650 
uöt_t
 
w˙t
;

651 
uöt_t
 
r˙t
;

653 } 
	tk°©_io_t
;

655  
	#KSTAT_IO_PTR
(
k±r
) ((
k°©_io_t
 *)(k±r)->
ks_d©a
)

	)
664 
	sk°©_timî
 {

665 
«me
[
KSTAT_STRLEN
];

666 
uch¨_t
 
ªsv
;

667 
u_l⁄gl⁄g_t
 
num_evíts
;

668 
hπime_t
 
ñ≠£d_time
;

669 
hπime_t
 
mö_time
;

670 
hπime_t
 
max_time
;

671 
hπime_t
 
°¨t_time
;

672 
hπime_t
 
°›_time
;

673 } 
	tk°©_timî_t
;

675  
	#KSTAT_TIMER_PTR
(
k±r
) ((
k°©_timî_t
 *)(k±r)->
ks_d©a
)

	)
677 #if 
deföed
(
_KERNEL
)

679 
	~<sys/t_lock.h
>

681 
kid_t
 
k°©_chaö_id
;

682 
k°©_öô
();

756 
k°©_t
 *
k°©_¸óã
(*, , *, *, 
uch¨_t
,

757 
uöt_t
, 
uch¨_t
);

758 
k°©_ö°Æl
(
k°©_t
 *);

759 
k°©_dñëe
(
k°©_t
 *);

760 
k°©_«med_£t°r
(
k°©_«med_t
 *
k≈
, c⁄° *
§c
);

761 
k°©_£t_°rög
(*, *);

762 
k°©_dñëe_by«me
(*, , *);

763 
k°©_«med_öô
(
k°©_«med_t
 *, *, 
uch¨_t
);

764 
k°©_timî_öô
(
k°©_timî_t
 *, *);

765 
k°©_waôq_íãr
(
k°©_io_t
 *);

766 
k°©_waôq_exô
(
k°©_io_t
 *);

767 
k°©_runq_íãr
(
k°©_io_t
 *);

768 
k°©_runq_exô
(
k°©_io_t
 *);

769 
k°©_waôq_to_runq
(
k°©_io_t
 *);

770 
k°©_runq_back_to_waôq
(
k°©_io_t
 *);

771 
k°©_timî_°¨t
(
k°©_timî_t
 *);

772 
k°©_timî_°›
(
k°©_timî_t
 *);

774 
k°©_t
 *
k°©_hﬁd_bykid
(
kid_t
 
kid
);

775 
k°©_t
 *
k°©_hﬁd_by«me
(*, , *);

776 
k°©_ªÀ
(
k°©_t
 *);

780 #ifdef 
__˝lu•lus


	@/usr/include/sys/synch.h

6 #i‚def 
_SYS_SYNCH_H


7  
	#_SYS_SYNCH_H


	)
9 #¥agm®
idít
 "@(#)synch.h 1.39 01/06/12 SMI"

11 #i‚de‡
_ASM


12 
	~<sys/ty≥s.h
>

13 
	~<sys/öt_ty≥s.h
>

16 #ifdef 
__˝lu•lus


20 #i‚de‡
_ASM


36 
	s_lwp_muãx
 {

37 
	s
{

38 
uöt16_t
 
Êag1
;

39 
uöt8_t
 
Êag2
;

40 
uöt8_t
 
˚ûög
;

41 
	u
{

42 
uöt16_t
 
b˝ty≥
;

43 
	s
{

44 
uöt8_t
 
cou¡_ty≥1
;

45 
uöt8_t
 
cou¡_ty≥2
;

46 } 
mty≥_rcou¡
;

47 } 
mb˝_ty≥_un
;

48 
uöt16_t
 
magic
;

49 } 
Êags
;

50 
	u
{

51 
	s
{

52 
uöt8_t
 
∑d
[8];

53 } 
lock64
;

54 
	s
{

55 
uöt32_t
 
ow√Ωid
;

56 
uöt32_t
 
lockw‹d
;

57 } 
lock32
;

58 
u∑d64_t
 
ow√r64
;

59 } 
lock
;

60 
u∑d64_t
 
d©a
;

61 } 
	tlwp_muãx_t
;

70 
	s_lwp_c⁄d
 {

71 
	s
{

72 
uöt8_t
 
	mÊag
[4];

73 
uöt16_t
 
	mty≥
;

74 
uöt16_t
 
	mmagic
;

75 } 
	mÊags
;

76 
u∑d64_t
 
	md©a
;

77 } 
	tlwp_c⁄d_t
;

82 
	s_lwp_£ma
 {

83 
uöt32_t
 
	mcou¡
;

84 
uöt16_t
 
	mty≥
;

85 
uöt16_t
 
	mmagic
;

86 
uöt8_t
 
	mÊags
[8];

87 
u∑d64_t
 
	md©a
;

88 } 
	tlwp_£ma_t
;

94  
	#USYNC_THREAD
 0x00

	)
95  
	#USYNC_PROCESS
 0x01

	)
98  
	#LOCK_NORMAL
 0x00

	)
99  
	#LOCK_ERRORCHECK
 0x02

	)
100  
	#LOCK_RECURSIVE
 0x04

	)
102  
	#USYNC_PROCESS_ROBUST
 0x08

	)
106  
	#LOCK_PRIO_NONE
 0x00

	)
107  
	#LOCK_PRIO_INHERIT
 0x10

	)
108  
	#LOCK_PRIO_PROTECT
 0x20

	)
109  
	#LOCK_STALL_NP
 0x00

	)
110  
	#LOCK_ROBUST_NP
 0x40

	)
115  
	#LOCK_OWNERDEAD
 0x1

	)
116  
	#LOCK_NOTRECOVERABLE
 0x2

	)
117  
	#LOCK_INITED
 0x4

	)
118  
	#LOCK_UNMAPPED
 0x8

	)
120 #ifdef 
__˝lu•lus


	@/usr/include/v7/sys/psr.h

5 #i‚de‡
_SYS_PSR_H


6  
	#_SYS_PSR_H


	)
8 #¥agm®
idít
 "@(#)psr.h 1.3 96/09/12 SMI"

10 #ifdef 
__˝lu•lus


26  
	#PSR_CWP
 0x0000001F

	)
27  
	#PSR_ET
 0x00000020

	)
28  
	#PSR_PS
 0x00000040

	)
29  
	#PSR_S
 0x00000080

	)
30  
	#PSR_PIL
 0x00000F00

	)
31  
	#PSR_EF
 0x00001000

	)
32  
	#PSR_EC
 0x00002000

	)
33  
	#PSR_RSV
 0x000FC000

	)
34  
	#PSR_ICC
 0x00F00000

	)
35  
	#PSR_C
 0x00100000

	)
36  
	#PSR_V
 0x00200000

	)
37  
	#PSR_Z
 0x00400000

	)
38  
	#PSR_N
 0x00800000

	)
39  
	#PSR_VER
 0x0F000000

	)
40  
	#PSR_IMPL
 0xF0000000

	)
42  
	#PSL_ALLCC
 
PSR_ICC


	)
44 #i‚de‡
_ASM


45 
	tpsw_t
;

51  
	#PSL_USER
 (
PSR_S
)

	)
52  
	#PSL_USERMASK
 (
PSR_ICC
)

	)
54  
	#PSL_UBITS
 (
PSR_ICC
|
PSR_EF
)

	)
57 #i‚def 
__•¨cv9˝u


61  
	#USERMODE
(
ps
) ((’sË& 
PSR_PS
Ë=0)

	)
64 #ifdef 
__˝lu•lus


	@/usr/include/v9/sys/privregs.h

6 #i‚de‡
_SYS_PRIVREGS_H


7  
	#_SYS_PRIVREGS_H


	)
9 #¥agm®
idít
 "@(#)privregs.h 1.18 01/09/18 SMI"

11 #ifdef 
__˝lu•lus


19 
	~<sys/f§.h
>

20 
	~<v9/sys/asi.h
>

27 #i‚def 
_ASM


29 
	sªgs
 {

30 
r_t°©e
;

31 
r_g1
;

32 
r_g2
;

33 
r_g3
;

34 
r_g4
;

35 
r_g5
;

36 
r_g6
;

37 
r_g7
;

38 
r_o0
;

39 
r_o1
;

40 
r_o2
;

41 
r_o3
;

42 
r_o4
;

43 
r_o5
;

44 
r_o6
;

45 
r_o7
;

49 
r_pc
;

50 
r_≈c
;

51 
r_y
;

54  
	#r_ps
 
r_t°©e


	)
55  
	#r_•
 
r_o6


	)
59 #ifde‡
_KERNEL


61  
	#lw±‹egs
(
lwp
) ((
ªgs
 *)(÷wp)->
lwp_ªgs
))

	)
62  
	#lw±oÂu
(
lwp
) ((
v9_Âu
 *)(÷wp)->
lwp_Âu
))

	)
68  
	#SAVE_GLOBALS
(
RP
) \

69 
°x
 %
g1
, [
RP
 + 
G1_OFF
]; \

70 
°x
 %
g2
, [
RP
 + 
G2_OFF
]; \

71 
°x
 %
g3
, [
RP
 + 
G3_OFF
]; \

72 
°x
 %
g4
, [
RP
 + 
G4_OFF
]; \

73 
°x
 %
g5
, [
RP
 + 
G5_OFF
]; \

74 
°x
 %
g6
, [
RP
 + 
G6_OFF
]; \

75 
°x
 %
g7
, [
RP
 + 
G7_OFF
]; \

76 
mov
 %
y
, %
g1
; \

77 
°
 %
g1
, [
RP
 + 
Y_OFF
];

	)
79  
	#RESTORE_GLOBALS
(
RP
) \

80 
ld
 [
RP
 + 
Y_OFF
], %
g1
; \

81 
mov
 %
g1
, %
y
; \

82 
ldx
 [
RP
 + 
G1_OFF
], %
g1
; \

83 
ldx
 [
RP
 + 
G2_OFF
], %
g2
; \

84 
ldx
 [
RP
 + 
G3_OFF
], %
g3
; \

85 
ldx
 [
RP
 + 
G4_OFF
], %
g4
; \

86 
ldx
 [
RP
 + 
G5_OFF
], %
g5
; \

87 
ldx
 [
RP
 + 
G6_OFF
], %
g6
; \

88 
ldx
 [
RP
 + 
G7_OFF
], %
g7
;

	)
90  
	#SAVE_OUTS
(
RP
) \

91 
°x
 %
i0
, [
RP
 + 
O0_OFF
]; \

92 
°x
 %
i1
, [
RP
 + 
O1_OFF
]; \

93 
°x
 %
i2
, [
RP
 + 
O2_OFF
]; \

94 
°x
 %
i3
, [
RP
 + 
O3_OFF
]; \

95 
°x
 %
i4
, [
RP
 + 
O4_OFF
]; \

96 
°x
 %
i5
, [
RP
 + 
O5_OFF
]; \

97 
°x
 %
i6
, [
RP
 + 
O6_OFF
]; \

98 
°x
 %
i7
, [
RP
 + 
O7_OFF
];

	)
100  
	#RESTORE_OUTS
(
RP
) \

101 
ldx
 [
RP
 + 
O0_OFF
], %
i0
; \

102 
ldx
 [
RP
 + 
O1_OFF
], %
i1
; \

103 
ldx
 [
RP
 + 
O2_OFF
], %
i2
; \

104 
ldx
 [
RP
 + 
O3_OFF
], %
i3
; \

105 
ldx
 [
RP
 + 
O4_OFF
], %
i4
; \

106 
ldx
 [
RP
 + 
O5_OFF
], %
i5
; \

107 
ldx
 [
RP
 + 
O6_OFF
], %
i6
; \

108 
ldx
 [
RP
 + 
O7_OFF
], %
i7
;

	)
110  
	#SAVE_V8WINDOW
(
SBP
) \

111 
°
 %
l0
, [
SBP
 + (0*4)]; \

112 
°
 %
l1
, [
SBP
 + (1*4)]; \

113 
°
 %
l2
, [
SBP
 + (2*4)]; \

114 
°
 %
l3
, [
SBP
 + (3*4)]; \

115 
°
 %
l4
, [
SBP
 + (4*4)]; \

116 
°
 %
l5
, [
SBP
 + (5*4)]; \

117 
°
 %
l6
, [
SBP
 + (6*4)]; \

118 
°
 %
l7
, [
SBP
 + (7*4)]; \

119 
°
 %
i0
, [
SBP
 + (8*4)]; \

120 
°
 %
i1
, [
SBP
 + (9*4)]; \

121 
°
 %
i2
, [
SBP
 + (10*4)]; \

122 
°
 %
i3
, [
SBP
 + (11*4)]; \

123 
°
 %
i4
, [
SBP
 + (12*4)]; \

124 
°
 %
i5
, [
SBP
 + (13*4)]; \

125 
°
 %
i6
, [
SBP
 + (14*4)]; \

126 
°
 %
i7
, [
SBP
 + (15*4)];

	)
128  
	#RESTORE_V8WINDOW
(
SBP
) \

129 
ld
 [
SBP
 + (0*4)], %
l0
; \

130 
ld
 [
SBP
 + (1*4)], %
l1
; \

131 
ld
 [
SBP
 + (2*4)], %
l2
; \

132 
ld
 [
SBP
 + (3*4)], %
l3
; \

133 
ld
 [
SBP
 + (4*4)], %
l4
; \

134 
ld
 [
SBP
 + (5*4)], %
l5
; \

135 
ld
 [
SBP
 + (6*4)], %
l6
; \

136 
ld
 [
SBP
 + (7*4)], %
l7
; \

137 
ld
 [
SBP
 + (8*4)], %
i0
; \

138 
ld
 [
SBP
 + (9*4)], %
i1
; \

139 
ld
 [
SBP
 + (10*4)], %
i2
; \

140 
ld
 [
SBP
 + (11*4)], %
i3
; \

141 
ld
 [
SBP
 + (12*4)], %
i4
; \

142 
ld
 [
SBP
 + (13*4)], %
i5
; \

143 
ld
 [
SBP
 + (14*4)], %
i6
; \

144 
ld
 [
SBP
 + (15*4)], %
i7
;

	)
146  
	#SAVE_V9WINDOW
(
SBP
) \

147 
°x
 %
l0
, [
SBP
 + (0*8)]; \

148 
°x
 %
l1
, [
SBP
 + (1*8)]; \

149 
°x
 %
l2
, [
SBP
 + (2*8)]; \

150 
°x
 %
l3
, [
SBP
 + (3*8)]; \

151 
°x
 %
l4
, [
SBP
 + (4*8)]; \

152 
°x
 %
l5
, [
SBP
 + (5*8)]; \

153 
°x
 %
l6
, [
SBP
 + (6*8)]; \

154 
°x
 %
l7
, [
SBP
 + (7*8)]; \

155 
°x
 %
i0
, [
SBP
 + (8*8)]; \

156 
°x
 %
i1
, [
SBP
 + (9*8)]; \

157 
°x
 %
i2
, [
SBP
 + (10*8)]; \

158 
°x
 %
i3
, [
SBP
 + (11*8)]; \

159 
°x
 %
i4
, [
SBP
 + (12*8)]; \

160 
°x
 %
i5
, [
SBP
 + (13*8)]; \

161 
°x
 %
i6
, [
SBP
 + (14*8)]; \

162 
°x
 %
i7
, [
SBP
 + (15*8)];

	)
164  
	#RESTORE_V9WINDOW
(
SBP
) \

165 
ldx
 [
SBP
 + (0*8)], %
l0
; \

166 
ldx
 [
SBP
 + (1*8)], %
l1
; \

167 
ldx
 [
SBP
 + (2*8)], %
l2
; \

168 
ldx
 [
SBP
 + (3*8)], %
l3
; \

169 
ldx
 [
SBP
 + (4*8)], %
l4
; \

170 
ldx
 [
SBP
 + (5*8)], %
l5
; \

171 
ldx
 [
SBP
 + (6*8)], %
l6
; \

172 
ldx
 [
SBP
 + (7*8)], %
l7
; \

173 
ldx
 [
SBP
 + (8*8)], %
i0
; \

174 
ldx
 [
SBP
 + (9*8)], %
i1
; \

175 
ldx
 [
SBP
 + (10*8)], %
i2
; \

176 
ldx
 [
SBP
 + (11*8)], %
i3
; \

177 
ldx
 [
SBP
 + (12*8)], %
i4
; \

178 
ldx
 [
SBP
 + (13*8)], %
i5
; \

179 
ldx
 [
SBP
 + (14*8)], %
i6
; \

180 
ldx
 [
SBP
 + (15*8)], %
i7
;

	)
182  
	#STORE_FPREGS
(
FP
) \

183 
°d
 %
f0
, [
FP
]; \

184 
°d
 %
f2
, [
FP
 + 8]; \

185 
°d
 %
f4
, [
FP
 + 16]; \

186 
°d
 %
f6
, [
FP
 + 24]; \

187 
°d
 %
f8
, [
FP
 + 32]; \

188 
°d
 %
f10
, [
FP
 + 40]; \

189 
°d
 %
f12
, [
FP
 + 48]; \

190 
°d
 %
f14
, [
FP
 + 56]; \

191 
°d
 %
f16
, [
FP
 + 64]; \

192 
°d
 %
f18
, [
FP
 + 72]; \

193 
°d
 %
f20
, [
FP
 + 80]; \

194 
°d
 %
f22
, [
FP
 + 88]; \

195 
°d
 %
f24
, [
FP
 + 96]; \

196 
°d
 %
f26
, [
FP
 + 104]; \

197 
°d
 %
f28
, [
FP
 + 112]; \

198 
°d
 %
f30
, [
FP
 + 120]; \

199 
°d
 %
d32
, [
FP
 + 128]; \

200 
°d
 %
d34
, [
FP
 + 136]; \

201 
°d
 %
d36
, [
FP
 + 144]; \

202 
°d
 %
d38
, [
FP
 + 152]; \

203 
°d
 %
d40
, [
FP
 + 160]; \

204 
°d
 %
d42
, [
FP
 + 168]; \

205 
°d
 %
d44
, [
FP
 + 176]; \

206 
°d
 %
d46
, [
FP
 + 184]; \

207 
°d
 %
d48
, [
FP
 + 192]; \

208 
°d
 %
d50
, [
FP
 + 200]; \

209 
°d
 %
d52
, [
FP
 + 208]; \

210 
°d
 %
d54
, [
FP
 + 216]; \

211 
°d
 %
d56
, [
FP
 + 224]; \

212 
°d
 %
d58
, [
FP
 + 232]; \

213 
°d
 %
d60
, [
FP
 + 240]; \

214 
°d
 %
d62
, [
FP
 + 248];

	)
216  
	#LOAD_FPREGS
(
FP
) \

217 
ldd
 [
FP
], %
f0
; \

218 
ldd
 [
FP
 + 8], %
f2
; \

219 
ldd
 [
FP
 + 16], %
f4
; \

220 
ldd
 [
FP
 + 24], %
f6
; \

221 
ldd
 [
FP
 + 32], %
f8
; \

222 
ldd
 [
FP
 + 40], %
f10
; \

223 
ldd
 [
FP
 + 48], %
f12
; \

224 
ldd
 [
FP
 + 56], %
f14
; \

225 
ldd
 [
FP
 + 64], %
f16
; \

226 
ldd
 [
FP
 + 72], %
f18
; \

227 
ldd
 [
FP
 + 80], %
f20
; \

228 
ldd
 [
FP
 + 88], %
f22
; \

229 
ldd
 [
FP
 + 96], %
f24
; \

230 
ldd
 [
FP
 + 104], %
f26
; \

231 
ldd
 [
FP
 + 112], %
f28
; \

232 
ldd
 [
FP
 + 120], %
f30
; \

233 
ldd
 [
FP
 + 128], %
d32
; \

234 
ldd
 [
FP
 + 136], %
d34
; \

235 
ldd
 [
FP
 + 144], %
d36
; \

236 
ldd
 [
FP
 + 152], %
d38
; \

237 
ldd
 [
FP
 + 160], %
d40
; \

238 
ldd
 [
FP
 + 168], %
d42
; \

239 
ldd
 [
FP
 + 176], %
d44
; \

240 
ldd
 [
FP
 + 184], %
d46
; \

241 
ldd
 [
FP
 + 192], %
d48
; \

242 
ldd
 [
FP
 + 200], %
d50
; \

243 
ldd
 [
FP
 + 208], %
d52
; \

244 
ldd
 [
FP
 + 216], %
d54
; \

245 
ldd
 [
FP
 + 224], %
d56
; \

246 
ldd
 [
FP
 + 232], %
d58
; \

247 
ldd
 [
FP
 + 240], %
d60
; \

248 
ldd
 [
FP
 + 248], %
d62
;

	)
250  
	#STORE_DL_FPREGS
(
FP
) \

251 
°d
 %
f0
, [
FP
]; \

252 
°d
 %
f2
, [
FP
 + 8]; \

253 
°d
 %
f4
, [
FP
 + 16]; \

254 
°d
 %
f6
, [
FP
 + 24]; \

255 
°d
 %
f8
, [
FP
 + 32]; \

256 
°d
 %
f10
, [
FP
 + 40]; \

257 
°d
 %
f12
, [
FP
 + 48]; \

258 
°d
 %
f14
, [
FP
 + 56]; \

259 
°d
 %
f16
, [
FP
 + 64]; \

260 
°d
 %
f18
, [
FP
 + 72]; \

261 
°d
 %
f20
, [
FP
 + 80]; \

262 
°d
 %
f22
, [
FP
 + 88]; \

263 
°d
 %
f24
, [
FP
 + 96]; \

264 
°d
 %
f26
, [
FP
 + 104]; \

265 
°d
 %
f28
, [
FP
 + 112]; \

266 
°d
 %
f30
, [
FP
 + 120];

	)
268  
	#STORE_DU_FPREGS
(
FP
) \

269 
°d
 %
d32
, [
FP
 + 128]; \

270 
°d
 %
d34
, [
FP
 + 136]; \

271 
°d
 %
d36
, [
FP
 + 144]; \

272 
°d
 %
d38
, [
FP
 + 152]; \

273 
°d
 %
d40
, [
FP
 + 160]; \

274 
°d
 %
d42
, [
FP
 + 168]; \

275 
°d
 %
d44
, [
FP
 + 176]; \

276 
°d
 %
d46
, [
FP
 + 184]; \

277 
°d
 %
d48
, [
FP
 + 192]; \

278 
°d
 %
d50
, [
FP
 + 200]; \

279 
°d
 %
d52
, [
FP
 + 208]; \

280 
°d
 %
d54
, [
FP
 + 216]; \

281 
°d
 %
d56
, [
FP
 + 224]; \

282 
°d
 %
d58
, [
FP
 + 232]; \

283 
°d
 %
d60
, [
FP
 + 240]; \

284 
°d
 %
d62
, [
FP
 + 248];

	)
286  
	#LOAD_DL_FPREGS
(
FP
) \

287 
ldd
 [
FP
], %
f0
; \

288 
ldd
 [
FP
 + 8], %
f2
; \

289 
ldd
 [
FP
 + 16], %
f4
; \

290 
ldd
 [
FP
 + 24], %
f6
; \

291 
ldd
 [
FP
 + 32], %
f8
; \

292 
ldd
 [
FP
 + 40], %
f10
; \

293 
ldd
 [
FP
 + 48], %
f12
; \

294 
ldd
 [
FP
 + 56], %
f14
; \

295 
ldd
 [
FP
 + 64], %
f16
; \

296 
ldd
 [
FP
 + 72], %
f18
; \

297 
ldd
 [
FP
 + 80], %
f20
; \

298 
ldd
 [
FP
 + 88], %
f22
; \

299 
ldd
 [
FP
 + 96], %
f24
; \

300 
ldd
 [
FP
 + 104], %
f26
; \

301 
ldd
 [
FP
 + 112], %
f28
; \

302 
ldd
 [
FP
 + 120], %
f30
;

	)
304  
	#LOAD_DU_FPREGS
(
FP
) \

305 
ldd
 [
FP
 + 128], %
d32
; \

306 
ldd
 [
FP
 + 136], %
d34
; \

307 
ldd
 [
FP
 + 144], %
d36
; \

308 
ldd
 [
FP
 + 152], %
d38
; \

309 
ldd
 [
FP
 + 160], %
d40
; \

310 
ldd
 [
FP
 + 168], %
d42
; \

311 
ldd
 [
FP
 + 176], %
d44
; \

312 
ldd
 [
FP
 + 184], %
d46
; \

313 
ldd
 [
FP
 + 192], %
d48
; \

314 
ldd
 [
FP
 + 200], %
d50
; \

315 
ldd
 [
FP
 + 208], %
d52
; \

316 
ldd
 [
FP
 + 216], %
d54
; \

317 
ldd
 [
FP
 + 224], %
d56
; \

318 
ldd
 [
FP
 + 232], %
d58
; \

319 
ldd
 [
FP
 + 240], %
d60
; \

320 
ldd
 [
FP
 + 248], %
d62
;

	)
337  
	#CCR_IC
 0x01

	)
338  
	#CCR_IV
 0x02

	)
339  
	#CCR_IZ
 0x04

	)
340  
	#CCR_IN
 0x08

	)
341  
	#CCR_XC
 0x10

	)
342  
	#CCR_XV
 0x20

	)
343  
	#CCR_XZ
 0x40

	)
344  
	#CCR_XN
 0x80

	)
345  
	#CCR_ICC
 0x0F

	)
346  
	#CCR_XCC
 0xF0

	)
357  
	#PSTATE_AG
 0x001

	)
358  
	#PSTATE_IE
 0x002

	)
359  
	#PSTATE_PRIV
 0x004

	)
360  
	#PSTATE_AM
 0x008

	)
361  
	#PSTATE_PEF
 0x010

	)
362  
	#PSTATE_RED
 0x020

	)
363  
	#PSTATE_MM
 0x0C0

	)
364  
	#PSTATE_TLE
 0x100

	)
365  
	#PSTATE_CLE
 0x200

	)
366  
	#PSTATE_MG
 0x400

	)
367  
	#PSTATE_IG
 0x800

	)
369  
	#PSTATE_BITS
 \

370 "\020\014IG\013MG\012CLE\011TLE\010MM-RMO\
\07MM-PSO\06RED\05PEF\04AM\03PRIV\02IE\01AG"

	)
376  
	#PSTATE_MM_TSO
 0x00

	)
377  
	#PSTATE_MM_PSO
 0x40

	)
378  
	#PSTATE_MM_RMO
 0x80

	)
389  
	#TSTATE_CWP_MASK
 0x01F

	)
390  
	#TSTATE_CWP_SHIFT
 0

	)
391  
	#TSTATE_PSTATE_MASK
 0xFFF

	)
392  
	#TSTATE_PSTATE_SHIFT
 8

	)
393  
	#TSTATE_ASI_MASK
 0x0FF

	)
394  
	#TSTATE_ASI_SHIFT
 24

	)
395  
	#TSTATE_CCR_MASK
 0x0FF

	)
396  
	#TSTATE_CCR_SHIFT
 32

	)
401  
	#TSTATE_AG
 (
PSTATE_AG
 << 
TSTATE_PSTATE_SHIFT
)

	)
402  
	#TSTATE_IE
 (
PSTATE_IE
 << 
TSTATE_PSTATE_SHIFT
)

	)
403  
	#TSTATE_PRIV
 (
PSTATE_PRIV
 << 
TSTATE_PSTATE_SHIFT
)

	)
404  
	#TSTATE_AM
 (
PSTATE_AM
 << 
TSTATE_PSTATE_SHIFT
)

	)
405  
	#TSTATE_PEF
 (
PSTATE_PEF
 << 
TSTATE_PSTATE_SHIFT
)

	)
406  
	#TSTATE_MG
 (
PSTATE_MG
 << 
TSTATE_PSTATE_SHIFT
)

	)
407  
	#TSTATE_IG
 (
PSTATE_IG
 << 
TSTATE_PSTATE_SHIFT
)

	)
408  
	#TSTATE_CWP
 
TSTATE_CWP_MASK


	)
413 #i‚de‡
_ASM


414  
	#TSTATE_ICC
 (()
CCR_ICC
 << 
TSTATE_CCR_SHIFT
)

	)
415  
	#TSTATE_IC
 (()
CCR_IC
 << 
TSTATE_CCR_SHIFT
)

	)
417  
	#TSTATE_ICC
 (
CCR_ICC
 << 
TSTATE_CCR_SHIFT
)

	)
418  
	#TSTATE_IC
 (
CCR_IC
 << 
TSTATE_CCR_SHIFT
)

	)
420  
	#TSTATE_V8_UBITS
 (
TSTATE_ICC
 | 
TSTATE_PEF
)

	)
425  
	#PTSTATE_KERN_COMMON
 \

426 (
PSTATE_PRIV
 | 
PSTATE_PEF
 | 
PSTATE_MM_TSO
)

	)
428  
	#TSTATE_USER_COMMON
 \

429 (
PSTATE_IE
 | 
PSTATE_PEF
 | 
PSTATE_MM_TSO
)

	)
431  
	#TSTATE_KERN32
 \

432 ((
PTSTATE_KERN_COMMON
 | 
PSTATE_AM
Ë<< 
TSTATE_PSTATE_SHIFT
)

	)
434  
	#TSTATE_KERN64
 \

435 (
PTSTATE_KERN_COMMON
 << 
TSTATE_PSTATE_SHIFT
)

	)
437  
	#PSTATE_KERN32
 \

438 (
PTSTATE_KERN_COMMON
 | 
PSTATE_AM
 | 
PSTATE_PRIV
 | 
PSTATE_IE
)

	)
440  
	#PSTATE_KERN64
 \

441 (
PTSTATE_KERN_COMMON
 | 
PSTATE_PRIV
 | 
PSTATE_IE
)

	)
443  
	#TSTATE_USER32
 \

444 (((
TSTATE_USER_COMMON
 | 
PSTATE_AM
Ë<< 
TSTATE_PSTATE_SHIFT
) | \

445 (()
ASI_PNF
 << 
TSTATE_ASI_SHIFT
))

	)
447  
	#TSTATE_USER64
 \

448 ((
TSTATE_USER_COMMON
 << 
TSTATE_PSTATE_SHIFT
) | \

449 (()
ASI_PNF
 << 
TSTATE_ASI_SHIFT
))

	)
451 #ifde‡
__•¨cv9


452  
	#PSTATE_KERN
 
PSTATE_KERN64


	)
453  
	#TSTATE_KERN
 
TSTATE_KERN64


	)
455  
	#PSTATE_KERN
 
PSTATE_KERN32


	)
456  
	#TSTATE_KERN
 
TSTATE_KERN32


	)
459  
	#USERMODE
(
x
) (!((xË& 
TSTATE_PRIV
))

	)
470  
	#WSTATE_BAD
 0

	)
471  
	#WSTATE_U32
 1

	)
472  
	#WSTATE_U64
 2

	)
473  
	#WSTATE_CLEAN32
 3

	)
474  
	#WSTATE_CLEAN64
 4

	)
475  
	#WSTATE_K32
 5

	)
476  
	#WSTATE_K64
 6

	)
477  
	#WSTATE_KMIX
 7

	)
479  
	#WSTATE_CLEAN_OFFSET
 2

	)
480  
	#WSTATE_SHIFT
 3

	)
481  
	#WSTATE_MASK
 7

	)
482  
	#WSTATE
(
o
, 
n
) (((oË<< 3Ë| (n))

	)
484  
	#WSTATE_USER32
 
	`WSTATE
(
WSTATE_BAD
, 
WSTATE_U32
)

	)
485  
	#WSTATE_USER64
 
	`WSTATE
(
WSTATE_BAD
, 
WSTATE_U64
)

	)
486 #ifde‡
__•¨cv9


487  
	#WSTATE_KERN
 
	`WSTATE
(
WSTATE_U32
, 
WSTATE_K64
)

	)
489  
	#WSTATE_KERN
 
	`WSTATE
(
WSTATE_U32
, 
WSTATE_K32
)

	)
501  
	#PIL_MAX
 0xF

	)
512  
	#VER_MANUF
 0xFFFF000000000000

	)
513  
	#VER_IMPL
 0x0000FFFF00000000

	)
514  
	#VER_MASK
 0x00000000FF000000

	)
515  
	#VER_MAXTL
 0x000000000000FF00

	)
516  
	#VER_MAXWIN
 0x000000000000001F

	)
531  
	#TICK_NPT
 0x8000000000000000

	)
532  
	#TICK_COUNTER
 0x7FFFFFFFFFFFFFFF

	)
538  
	#CLEARTICKNPT
 \

539 
£thi
 %
	`hi
(
˝u_˛óπick≈t
), %
g1
; \

540 
jmp
 %
g1
 + %
	`lo
(
˝u_˛óπick≈t
); \

541 
rd
 %
pc
, %
g4


	)
543 #ifdef 
__˝lu•lus


	@/usr/include/v9/sys/asi.h

5 #i‚def 
_SYS_ASI_H


6  
	#_SYS_ASI_H


	)
8 #¥agm®
idít
 "@(#)asi.h 1.6 95/03/22 SMI"

10 #ifdef 
__˝lu•lus


24  
	#ASI_N
 0x04

	)
25  
	#ASI_NL
 0x0C

	)
26  
	#ASI_AIUP
 0x10

	)
27  
	#ASI_AIUS
 0x11

	)
28  
	#ASI_AIUPL
 0x18

	)
29  
	#ASI_AIUSL
 0x19

	)
30  
	#ASI_P
 0x80

	)
31  
	#ASI_S
 0x81

	)
32  
	#ASI_PNF
 0x82

	)
33  
	#ASI_SNF
 0x83

	)
34  
	#ASI_PL
 0x88

	)
35  
	#ASI_SL
 0x89

	)
36  
	#ASI_PNFL
 0x8A

	)
37  
	#ASI_SNFL
 0x8B

	)
42  
	#ASI_USER
 
ASI_AIUS


	)
44 #ifdef 
__˝lu•lus


	@
1
.
1
/usr/include
129
2819
app.cpp
app.h
cache.h
declarations.h
defines.h
flit.cpp
flit.h
flit_move.cpp
flit_move.h
globals.h
link.cpp
link.h
main.cpp
main.h
multimedia.cpp
multimedia.h
nic.cpp
nic.h
node_init.cpp
node_marking.cpp
node_marking.h
parameters.h
power.h
route_adaptive.cpp
route_adaptive.h
route_deterministic.cpp
route_proximity_aware.cpp
route_proximity_aware.h
route_simple_ft.cpp
route_simple_ft.h
route_west_first.cpp
route_west_first.h
router.cpp
router.h
router_common.cpp
router_common.h
shared.h
sim_engine.h
sim_init.cpp
sim_result.cpp
sim_result.h
transaction.h
utils.cpp
/usr/include/math.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/time.h
/usr/include/zlib.h
/usr/include/floatingpoint.h
/usr/include/iso/math_iso.h
/usr/include/iso/stdio_iso.h
/usr/include/iso/stdlib_iso.h
/usr/include/iso/string_iso.h
/usr/include/iso/time_iso.h
/usr/include/sys/feature_tests.h
/usr/include/sys/time_impl.h
/usr/include/sys/types.h
/usr/include/sys/wait.h
/usr/include/zconf.h
/usr/include/stdio_impl.h
/usr/include/stdio_tag.h
/usr/include/sys/ieeefp.h
/usr/include/sys/int_types.h
/usr/include/sys/inttypes.h
/usr/include/sys/isa_defs.h
/usr/include/sys/machtypes.h
/usr/include/sys/procset.h
/usr/include/sys/resource.h
/usr/include/sys/select.h
/usr/include/sys/siginfo.h
/usr/include/sys/types32.h
/usr/include/sys/va_list.h
/usr/include/unistd.h
/usr/include/sys/int_const.h
/usr/include/sys/int_fmtio.h
/usr/include/sys/int_limits.h
/usr/include/sys/machsig.h
/usr/include/sys/model.h
/usr/include/sys/proc.h
/usr/include/sys/time.h
/usr/include/sys/time_std_impl.h
/usr/include/sys/unistd.h
/usr/include/sys/avl.h
/usr/include/sys/cred.h
/usr/include/sys/debug.h
/usr/include/sys/mutex.h
/usr/include/sys/rctl.h
/usr/include/sys/refstr.h
/usr/include/sys/task.h
/usr/include/sys/thread.h
/usr/include/sys/timer.h
/usr/include/sys/user.h
/usr/include/sys/utrap.h
/usr/include/sys/watchpoint.h
/usr/include/sys/auxv.h
/usr/include/sys/avl_impl.h
/usr/include/sys/copyops.h
/usr/include/sys/errno.h
/usr/include/sys/exacct_impl.h
/usr/include/sys/id_space.h
/usr/include/sys/klwp.h
/usr/include/sys/kmem.h
/usr/include/sys/modhash.h
/usr/include/sys/param.h
/usr/include/sys/pcb.h
/usr/include/sys/regset.h
/usr/include/sys/signal.h
/usr/include/sys/t_lock.h
/usr/include/vm/seg_enum.h
/usr/include/sys/aio_req.h
/usr/include/sys/buf.h
/usr/include/sys/condvar.h
/usr/include/sys/iso/signal_iso.h
/usr/include/sys/lwp.h
/usr/include/sys/machlock.h
/usr/include/sys/msacct.h
/usr/include/sys/rwlock.h
/usr/include/sys/semaphore.h
/usr/include/sys/ucontext.h
/usr/include/sys/uio.h
/usr/include/sys/vmem.h
/usr/include/v7/sys/privregs.h
/usr/include/sys/fsr.h
/usr/include/sys/kstat.h
/usr/include/sys/synch.h
/usr/include/v7/sys/psr.h
/usr/include/v9/sys/privregs.h
/usr/include/v9/sys/asi.h
