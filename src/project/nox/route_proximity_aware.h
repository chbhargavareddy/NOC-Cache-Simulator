/* NoX (NoC Simulator)
 *
 * Dept. of Computer Science & Engineering, Pennsylvania State University.
 * All Rights Reserved.
 *  
 * 1. License     
 * NoX is distributed free of charge for academic, educational, noncommercial 
 * research purposes as long as this notice in its entirety is preserved in
 * every file included in this package.
 * All commercial use of this program requires separate licence. Contact the
 * author for details.
 * 
 * 2. All the publications that used the simulation results generated by the 
 * NoX should notify the author of the publication information and put 
 * following reference.
 *
 *  http://www.cse.psu.edu/~dpark/nox/
 * 
 * 3. Modification of the source code is permitted and encouraged as long as 
 * it follows the terms described in this copyright notice.
 *
 * 4. The author is not responsible for any problems caused by possible errors
 * of the NoX package. Therefore, users should verify the simulation result
 * before using it in their publication.
 *
 * Dept. of Computer Science & Engineering, Pennsylvania State University.
 * Contact: dpark@cse.psu.edu 
 * 
 * 6. If problems are found with the NoX package, please send an email to the
 * author for discussion and correction.

 */

/* Update History
 *
 *
 */


/* 
 * Proximity aware fault tolerant routing algorithm
 */

#ifndef _proximity_aware_router_h
#define _proximity_aware_router_h

#include "router.h"

#define NORTH_EAST 0
#define SOUTH_EAST 1
#define SOUTH_WEST 2
#define NORTH_WEST 3

#define WW   0  // 00 00
#define WN   1  // 00 01
#define WE   2  // 00 10
#define WS   3  // 00 11

#define NW   4  // 01 00
#define NN   5  // 01 01
#define NE   6  // 01 10
#define NS   7  // 01 11

#define EW   8  // 10 00
#define EN   9  // 10 01
#define EE  10  // 10 10
#define ES  11  // 10 11

#define SW  12  // 11 00
#define SN  13  // 11 01
#define SE  14  // 11 10
#define SS  15  // 11 11

void init_FA_route_info(void);
void init_FA_neighbor_info(void);
void init_FA_direction_info(void);

void dest_in_straight(int dir, int cn, int pc, int vc, int dx, int dy, int *dest_pc, int *dest_vc, int *is_blocked, int *nbuf);
void dest_in_diagonal(int dir1, int dir2, int cn, int pc, int vc, int dx, int dy, int *dest_pc, int *dest_vc, int *is_blocked, int *nbuf);
void proximity_aware_route(int cn, int dn, int pc, int vc, int *dest_pc, int *dest_vc);
#endif

